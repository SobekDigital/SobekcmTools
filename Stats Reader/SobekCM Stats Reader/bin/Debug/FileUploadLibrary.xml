<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileUploadLibrary</name>
    </assembly>
    <members>
        <member name="T:darrenjohnstone.net.FileUpload.FieldTestProcessor">
            <summary>
            This is a test processor similar to the FileSystemProcessor. This processor
            demonstrates the use of the PreviousFields parameter to take action based
            on user fields populated before the current file input but on the same form.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.IFileProcessor">
            <summary>
            The IFileProcessor interface defines classes which are used to
            process an individual file coming from a form stream.
            
            The interface defines methods to start the file processing (with a file
            name and content type), write data, and end the upload process.
            
            IFileProcessor implementations are used to write uploaded data to
            persistant storage such as the file system or a database.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.IFileProcessor.StartNewFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Starts a new file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="headerItems">A dictionary of items pulled from the header of the field.</param>
            <param name="previousFields">A dictionary of previous fields.</param>
            <returns>An optional object used to identify the item in the storage container.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.IFileProcessor.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the output file.
            </summary>
            <param name="buffer">Buffer to write from.</param>
            <param name="offset">Offset in the buffer to write from.</param>
            <param name="count">Count of bytes to write.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.IFileProcessor.EndFile">
            <summary>
            Ends current file processing.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.IFileProcessor.GetFileName">
            <summary>
            Returns the name of the file that is currently being processed.
            Null if there is no file.
            </summary>
            <returns>The file name.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.IFileProcessor.GetIdentifier">
            <summary>
            Gets the identifier in the container.
            </summary>
            <returns>The container identifier.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.IFileProcessor.GetHeaderItems">
            <summary>
            Gets the header items.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.StartNewFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Starts a new file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="headerItems">A dictionary of items pulled from the header of the field.</param>
            <param name="previousFields">A dictionary of previous fields.</param>
            <returns>An optional object used to identify the item in the storage container.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the output file.
            </summary>
            <param name="buffer">Buffer to write from.</param>
            <param name="offset">Offset in the buffer to write from.</param>
            <param name="count">Count of bytes to write.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.EndFile">
            <summary>
            Ends current file processing.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.GetFileName">
            <summary>
            Returns the name of the file that is currently being processed.
            Null if there is no file.
            </summary>
            <returns>The file name.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.GetIdentifier">
            <summary>
            Returns the container identifier.
            </summary>
            <returns>The container identifier.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.GetHeaderItems">
            <summary>
            Gets the header items.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FieldTestProcessor.System#IDisposable#Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FieldTestProcessor.OutputPath">
            <summary>
            Gets/sets the output folder path.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.DJAccessibleProgressBar">
            <summary>
            Provides a basic progress bar updated by refreshes in an IFrame. This allows
            support for browsers without javascript and others where the UI is blocked
            during file uploads.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJAccessibleProgressBar.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJAccessibleProgressBar.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJAccessibleProgressBar.ProgressURL">
            <summary>
            Gets/sets the URL of the progress page.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.DummyProcessor">
            <summary>
            Implements the IFileProcessor interface as a dummy testing stub.
            The byte stream is simply discarded.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.StartNewFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Starts a new file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="headerItems">A dictionary of items pulled from the header of the field.</param>
            <param name="previousFields">A dictionary of previous fields.</param>
            <returns>An optional object used to identify the item in the storage container.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the output file.
            </summary>
            <param name="buffer">Buffer to write from.</param>
            <param name="offset">Offset in the buffer to write from.</param>
            <param name="count">Count of bytes to write.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.EndFile">
            <summary>
            Ends current file processing.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.GetFileName">
            <summary>
            Returns the name of the file that is currently being processed.
            Null if there is no file.
            </summary>
            <returns>The file name.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.GetIdentifier">
            <summary>
            Returns the container identifier.
            </summary>
            <returns>The container identifier.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.GetHeaderItems">
            <summary>
            Gets the header items.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DummyProcessor.System#IDisposable#Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FileSystemProcessor">
            <summary>
            Implements the IFileProcessor interface to stream uploaded files to
            a directory in the file system.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.StartNewFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Starts a new file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="headerItems">A dictionary of items pulled from the header of the field.</param>
            <param name="previousFields">A dictionary of previous fields.</param>
            <returns>An optional object used to identify the item in the storage container.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the output file.
            </summary>
            <param name="buffer">Buffer to write from.</param>
            <param name="offset">Offset in the buffer to write from.</param>
            <param name="count">Count of bytes to write.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.EndFile">
            <summary>
            Ends current file processing.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.GetFileName">
            <summary>
            Returns the name of the file that is currently being processed.
            Null if there is no file.
            </summary>
            <returns>The file name.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.GetIdentifier">
            <summary>
            Returns the container identifier.
            </summary>
            <returns>The container identifier.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.GetHeaderItems">
            <summary>
            Gets the header items.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileSystemProcessor.System#IDisposable#Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FileSystemProcessor.OutputPath">
            <summary>
            Gets/sets the output folder path.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.DJFileUpload">
            <summary>
            Multiple file upload control with progress bar.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJFileUpload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.DJFileUpload"/> class.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJFileUpload.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJFileUpload.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJFileUpload.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use 
            composition-based implementation to create any child controls they contain 
            in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJFileUpload.val_ServerValidate(System.Object,System.Web.UI.WebControls.ServerValidateEventArgs)">
            <summary>
            Handles the ServerValidate event of the val control.
            </summary>
            <param name="source">The source of the event.</param>
            <param name="args">The <see cref="T:System.Web.UI.WebControls.ServerValidateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJFileUpload.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.FileProcessor">
            <summary>
            Gets/sets a custom file processor which will override the global settings
            in UploadManager.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.AllowedFileExtensions">
            <summary>
            Gets or sets the allowed file extensions (a comma separated list .pdf,.zip,.gif).
            </summary>
            <value>The allowed file extensions.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.RequiredField">
            <summary>
            Gets/sets a boolean value indicating if at least one upload file is required for this control.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.ApplyStyles">
            <summary>
            Gets/sets a boolean value indicating if styles should be applied to this control.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.RequiredMessage">
            <summary>
            Gets/sets the required field validation message.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.InvalidExtensionMessage">
            <summary>
            Gets/sets the message to display when a file with an invalid extension is selected.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.InitialFileUploads">
            <summary>
            Gets or sets the initial number of file uploads.
            </summary>
            <value>Gets or sets the initial number of file uploads.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.MaxFileUploads">
            <summary>
            Gets or sets the maximum number of file uploads.
            </summary>
            <value>Gets or sets the maximum number of file uploads.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.ShowUploadButton">
            <summary>
            Gets or sets a value indicating whether the upload button should be shown.
            </summary>
            <value><c>true</c> if the upload button should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJFileUpload.ShowAddButton">
            <summary>
            Gets or sets a value indicating whether the add button should be shown.
            </summary>
            <value><c>true</c> if the add button should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FileEventHandler">
            <summary>
            Delegate for file events.
            </summary>
            <param name="sender">Sender.</param>
            <param name="fileName">File name.</param>
            <param name="identifier">
            An optional identifier passed from the processor and 
            used to identify the item in the storage container.
            </param>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FileErrorEventHandler">
            <summary>
            Delegate for file error events.
            </summary>
            <param name="sender">Sender.</param>
            <param name="fileName">File name.</param>
            <param name="identifier">
            An optional identifier passed from the processor and 
            used to identify the item in the storage container.
            </param>
            <param name="ex">The exception that was raised.</param>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FormStream">
            <summary>
            Implements a stream which can be used to parse an RFC1867 (HTTP upload)
            compliant HTTP request.
            
            The stream writes it's output to an IFileProcessor implementation on a
            file by file basis.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.OnError(System.Exception)">
            <summary>
            Fires the error event.
            </summary>
            <param name="ex">Exception information.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.OnFileStarted(System.String,System.Object)">
            <summary>
            Fires the FileStarted event.
            </summary>
            <param name="fileName">File name.</param>
            <param name="identifier">
            An optional identifier passed from the processor and 
            used to identify the item in the storage container.
            </param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.OnFileCompleted(System.String,System.Object)">
            <summary>
            Fires the FileCompleted event.
            </summary>
            <param name="fileName">File name.</param>
            <param name="identifier">
            An optional identifier passed from the processor and 
            used to identify the item in the storage container.
            </param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.OnFileCompletedError(System.String,System.Object,System.Exception)">
            <summary>
            Fires the FileCompletedError event.
            </summary>
            <param name="fileName">File name.</param>
            <param name="identifier">
            An optional identifier passed from the processor and 
            used to identify the item in the storage container.
            </param>
            <param name="ex">The exception raised.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.#ctor(darrenjohnstone.net.FileUpload.IFileProcessor,System.String,System.Text.Encoding)">
            <summary>
            Constructor.
            </summary>
            <param name="processor">The file processor to use for file persistance.</param>
            <param name="boundary">The boundary (delimiter) of the post.</param>
            <param name="encoding">The encoder of the request stream.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.Flush">
            <summary>
            Flushes the output buffer of the stream.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">Buffer to write to.</param>
            <param name="offset">Offset to read from.</param>
            <param name="count">Count of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks a position in the stream.
            </summary>
            <param name="offset">Offset to read from.</param>
            <param name="origin">Origin.</param>
            <returns>The position in the stream.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">Length.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="bytes">Buffer to write from.</param>
            <param name="offset">Offset in the buffer to write from.</param>
            <param name="count">Count of the bytes to write.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.ParseHeader(System.Byte[],System.Int32)">
            <summary>
            Parses a header and returns a dictionary of name/value pairs representing the fields.
            </summary>
            <param name="bytes">Input bytes.</param>
            <param name="pos">Position to start at.</param>
            <returns>A dictionary of name/value pairs representing the fields.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.TryParseActionField(System.Byte[],System.Byte[],System.String@,System.Int32)">
            <summary>
            Attempts to find an action field in a byte array.
            </summary>
            <param name="tag">The action tag.</param>
            <param name="bytes">Input bytes.</param>
            <param name="result">Result string.</param>
            <param name="boundaryPos">The index of the next boundary if found.</param>
            <returns>True if an action field was located.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.CheckForActionFields">
            <summary>
            Checks the current field for actions (ID tag, processor parameters, etc).
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.ProcessField(System.Byte[],System.Int32)">
            <summary>
            Processes a field.
            </summary>
            <param name="bytes">The input string</param>
            <param name="pos">The position to start at.</param>
            <returns>The SectionResult class giving the next actions for the processor.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.WriteBytes(System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a string to the output buffer.
            </summary>
            <param name="toFile">True to write to a file, false for form content.</param>
            <param name="bytes">Bytes to write.</param>
            <param name="pos">Position to write from.</param>
            <param name="count">Character count.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.IndexOf(System.Byte[],System.Byte[])">
            <summary>
            Finds the position of a byte array within a byte array.
            </summary>
            <param name="buffer">Array to search within.</param>
            <param name="checkFor">Bytes to check for.</param>
            <returns>The index of the byte array.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.IndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Finds the position of a byte array within a byte array.
            </summary>
            <param name="buffer">Array to search within.</param>
            <param name="checkFor">Bytes to check for.</param>
            <param name="start">Position to start at.</param>
            <returns>The index of the byte array.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.IndexOf(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Finds the position of a byte array within a byte array.
            </summary>
            <param name="buffer">Array to search within.</param>
            <param name="checkFor">Bytes to check for.</param>
            <param name="start">Position to start at.</param>
            <param name="count">Number of bytes to search.</param>
            <returns>The index of the byte array.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.System#IDisposable#Dispose">
            <summary>
            Dispose of the object.
            </summary>
        </member>
        <member name="E:darrenjohnstone.net.FileUpload.FormStream.Error">
            <summary>
            Fired when an exception occurs.
            </summary>
        </member>
        <member name="E:darrenjohnstone.net.FileUpload.FormStream.FileStarted">
            <summary>
            Fired when a new file is started.
            </summary>
        </member>
        <member name="E:darrenjohnstone.net.FileUpload.FormStream.FileCompleted">
            <summary>
            Fired when a file is completed sucessfully.
            </summary>
        </member>
        <member name="E:darrenjohnstone.net.FileUpload.FormStream.FileCompletedError">
            <summary>
            Fired when a file is discarded because of an error.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.PreviousFields">
            <summary>
            Gets the previous fileds.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.ContentMinusFiles">
            <summary>
            Gets a byte array containing the content of the form without
            any uploaded files.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.StatusKey">
            <summary>
            Gets the status key.
            </summary>
            <value>The status key.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.Processor">
            <summary>
            Gets the processor.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.CanRead">
            <summary>
            Determines if the stream can be read.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.CanSeek">
            <summary>
            Determines if seek operations are valid on the stream.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.CanWrite">
            <summary>
            Determines if write operations are valid on the stream.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.Length">
            <summary>
            Gets the current length of the stream.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.Position">
            <summary>
            Gets the current position in the stream.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FormStream.SectionResult">
            <summary>
            Defines the result of processing of a single section.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FormStream.SectionResult.#ctor(System.Int32,darrenjohnstone.net.FileUpload.FormStream.SectionResult.SectionAction)">
            <summary>
            Constructor.
            </summary>
            <param name="nextOffset">The next offset to process.</param>
            <param name="nextAction">The next action to complete.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.SectionResult.NextAction">
            <summary>
            Get/sets the next action to carry out.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FormStream.SectionResult.NextOffset">
            <summary>
            Gets/sets the next offset to process.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FormStream.SectionResult.SectionAction">
            <summary>
            Defines the possible actions to take at the end of a section.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.FormStream.SectionResult.SectionAction.BoundaryReached">
            <summary>
            A boundary has been reached. End the current file or field and look for the next header.
            The next header may also by the end of the content.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.FormStream.SectionResult.SectionAction.NoBoundaryKeepBuffer">
            <summary>
            No boundary was found. Keep back a buffer and move on.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.SettingsStorageObject">
            <summary>
            Stores settings for a processor object.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.SettingsStorageObject.CipherText">
            <summary>
            The encrypted settings cipher text.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.SettingsStorageObject.Hash">
            <summary>
            The validation hash.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.SettingsStorageObject.CipherIV">
            <summary>
            The cipher initialistion vector.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.SQLFileDownloadHandler">
            <summary>
            An HTTP handler which allows files to be downloaded from a SQL database.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLFileDownloadHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.SQLFileDownloadHandler"/> class.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLFileDownloadHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.SQLFileDownloadHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.SQLProcessor">
            <summary>
            Implements the IFileSystemProcessor interface to provide a processor for streaming uploads into a SQL database.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.GetConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <returns>The connection string.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.CreateInitialInsertCommand(System.String,System.String)">
            <summary>
            Creates a SQL command object which performs an initial insert
            of the blob row into the database.
            </summary>
            <param name="fileName">File name.</param>
            <param name="contentType">Content type.</param>
            <returns>A SQL command which creates the initial row in the database.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.CreateBlobAppendCommand(System.Byte[],System.Int64,System.Byte[])">
            <summary>
            Creates a SQL command object which appends incoming bytes onto the blob field.
            </summary>
            <param name="pointer">SQL pointer to the blob.</param>
            <param name="offset">Offset in the blob.</param>
            <param name="bytes">The bytes to write.</param>
            <returns>A SQL command object which appends the bytes to the blob field.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.CreateSelectCommand(System.Int32)">
            <summary>
            Creates a SQL command which reads the file name, content type, and image column of a file based on the ID.
            </summary>
            <param name="id">The ID to retrieve.</param>
            <returns>A SQL command object which gets the image from the database.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.CleanUp(System.Boolean)">
            <summary>
            Closes the connection and cleans up.
            </summary>
            <param name="commit">True to commit the transaction.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.StartNewFile(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Starts a new file.
            </summary>
            <param name="fileName">File name.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="headerItems">A dictionary of items pulled from the header of the field.</param>
            <param name="previousFields">A dictionary of previous fields.</param>
            <returns>An optional object used to identify the item in the storage container.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the output file.
            </summary>
            <param name="buffer">Buffer to write from.</param>
            <param name="offset">Offset in the buffer to write from.</param>
            <param name="count">Count of bytes to write.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.GetFileDetails(System.Int32,System.String@,System.String@)">
            <summary>
            Gets the file name and content type of the file.
            </summary>
            <param name="id">The ID of the file to get.</param>
            <param name="fileName">File name.</param>
            <param name="contentType">Content type.</param>
            <returns>True if the file is found, otherwise false.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.SaveFileToStream(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Gets the file from the database and writes it to a stream.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="id">The id of the record to get.</param>
            <param name="blockSize">The size of blocks to stream the data in.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.EndFile">
            <summary>
            Ends current file processing.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.GetFileName">
            <summary>
            Returns the name of the file that is currently being processed.
            Null if there is no file.
            </summary>
            <returns>The file name.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.GetIdentifier">
            <summary>
            Returns the container identifier.
            </summary>
            <returns>The container identifier.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.GetHeaderItems">
            <summary>
            Gets the header items.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.SQLProcessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.SQLProcessor.ConnectionConfig">
            <summary>
            Gets or sets the name of the connection string config setting.
            </summary>
            <value>The connection string config name.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.SQLProcessor.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.SQLProcessor.TableName">
            <summary>
            Gets/sets the table name to store the files in.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.DJUploadController">
            <summary>
            Controller for uploads. Must be placed before all upload controls on the page.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.DJUploadController"/> class.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.AddStyleLink(System.String)">
            <summary>
            Adds a style sheet reference to the page header.
            </summary>
            <param name="name">The name of the file to link.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.GetProcessorForControl(System.Web.UI.Control)">
            <summary>
            Gets the file processor associated with a control.
            </summary>
            <returns>The file processor or null if none is found.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.ProcessUploadControls(System.Web.UI.ControlCollection,darrenjohnstone.net.FileUpload.IFileProcessor,darrenjohnstone.net.FileUpload.UploadStatus)">
            <summary>
            Processes all upload controls in a control collection when the module is not installed.
            </summary>
            <param name="cc">Control collection.</param>
            <param name="defaultProcessor">The default processor.</param>
            <param name="status">The upload status.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.ManualProcessUploads">
            <summary>
            Processes file uploads through the processor when the upload module is not installed.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.CreateChildControls">
            <summary>
            Called by the ASP.NET page framework to notify server controls that use composition-based implementation to create any child controls they contain in preparation for posting back or rendering.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.GetControllerFromControls(System.Web.UI.ControlCollection)">
            <summary>
            Gets the controller from a control collection recursively.
            </summary>
            <param name="cc">Control collection.</param>
            <returns>Controller or null if not found.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.DJUploadController.GetController(System.Web.UI.Page)">
            <summary>
            Gets the upload controller.
            </summary>
            <param name="page">The page to check.</param>
            <returns>The upload controller.</returns>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.DefaultFileProcessor">
            <summary>
            Gets/sets the default file processor.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.AllowedFileExtensions">
            <summary>
            Gets or sets the allowed file extensions (a comma separated list .pdf,.zip,.gif).
            </summary>
            <value>The allowed file extensions.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.Status">
            <summary>
            Gets or sets the upload status.
            </summary>
            <value>The upload status.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.ScriptPath">
            <summary>
            Gets or sets the path to the script file.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.CSSPath">
            <summary>
            Gets or sets the path to the css file.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.ProgressUrl">
            <summary>
            Gets or sets the url of the progress page.
            </summary>
            <value>The URL of the progress page.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.ImagePath">
            <summary>
            Gets or sets the image path.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.ShowCancelButton">
            <summary>
            Gets or sets a value indicating whether the cancel button should be shown.
            </summary>
            <value><c>true</c> if the cancel button should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.ShowProgressBar">
            <summary>
            Gets or sets a value indicating whether the progress bar should be shown.
            </summary>
            <value><c>true</c> if the progress bar should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.EnableManualProcessing">
            <summary>
            Gets or sets a value indicating whether manual processing should be allowed if the
            upload module is not installed.
            </summary>
            <value><c>true</c> if manual processing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.DJUploadController.UploadID">
            <summary>
            Gets the upload ID.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadConfigurationSection">
            <summary>
            Configuration section for the upload module. Defines global settings for the module
            in web.config.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadConfigurationSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.UploadConfigurationSection"/> class.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadConfigurationSection.GetConfig">
            <summary>
            Gets the configuration section.
            </summary>
            <returns>The configuration section.</returns>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.LengthExceededHttpCode">
            <summary>
            Gets or sets the HTTP status code to return when the maximum length is exceeded.
            </summary>
            <value>The allowed file extensions.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.AllowedFileExtensions">
            <summary>
            Gets or sets the allowed file extensions (a comma separated list .pdf,.zip,.gif).
            </summary>
            <value>The allowed file extensions.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.ScriptPath">
            <summary>
            Gets or sets the path to the script file.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.CSSPath">
            <summary>
            Gets or sets the path to the css file.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.ImagePath">
            <summary>
            Gets or sets the image path.
            </summary>
            <value>The image path.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.ProgressUrl">
            <summary>
            Gets or sets the progress page.
            </summary>
            <value>The URL of the progress page.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.ShowCancelButton">
            <summary>
            Gets or sets a value indicating whether the cancel button should be shown.
            </summary>
            <value><c>true</c> if the cancel button should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.ShowProgressBar">
            <summary>
            Gets or sets a value indicating whether the progress bar should be shown.
            </summary>
            <value><c>true</c> if the progress bar should be shown; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadConfigurationSection.EnableManualProcessing">
            <summary>
            Gets or sets a value indicating whether manual processing should be allowed if the
            upload module is not installed.
            </summary>
            <value><c>true</c> if manual processing is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadedFile">
            <summary>
            Contains identifying information about an uploaded file.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadedFile.#ctor(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.UploadedFile"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="identifier">The identifier.</param>
            <param name="headerItems">The header items.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadedFile.#ctor(System.String,System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.UploadedFile"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="identifier">The identifier.</param>
            <param name="headerItems">The header items.</param>
            <param name="ex">The exception that was raised.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadedFile.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadedFile.Identifier">
            <summary>
            Gets the container identifier returned from the processor.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadedFile.HeaderItems">
            <summary>
            Gets a dictionary of all items in the header.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadedFile.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FileProcessorInitEventArgs">
            <summary>
            Event arguments for the ProcessorInit event.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.FileProcessorInitEventArgs.#ctor(darrenjohnstone.net.FileUpload.IFileProcessor)">
            <summary>
            Constructor.
            </summary>
            <param name="processor">File processor instance.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.FileProcessorInitEventArgs.Processor">
            <summary>
            Gets the file processor.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.FileProcessorInitEventHandler">
            <summary>
            Delegate for the ProcessorInit event.
            </summary>
            <param name="sender">Sender.</param>
            <param name="args">Event args.</param>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadManager">
            <summary>
            Manages uploads and acts as a factory class for file processors.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.UploadManager.STATUS_KEY">
            <summary> Constant status key used in the generated HTML </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:darrenjohnstone.net.FileUpload.UploadManager"/> class.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.#cctor">
            <summary>
            Initializes the <see cref="T:darrenjohnstone.net.FileUpload.UploadManager"/> class.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.OnProcessorInit(darrenjohnstone.net.FileUpload.IFileProcessor)">
            <summary>
            Fires the ProcessorInit event.
            </summary>
            <param name="processor">File processor.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.SetStatus(darrenjohnstone.net.FileUpload.UploadStatus,System.String)">
            <summary>
            Sets the upload status.
            </summary>
            <param name="status">Status to set.</param>
            <param name="key">Upload key.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.GetProcessor">
            <summary>
            Factory method creates a new instance of IFileProcessor.
            </summary>
            <returns>The created file processor.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.SerializeProcessor(darrenjohnstone.net.FileUpload.IFileProcessor)">
            <summary>
            Serializes a processor to a string. The string is encrypted and validated.
            Thanks to Dean Brettle for help with this http://www.brettle.com.
            </summary>
            <param name="processor">Processor to serialize.</param>
            <returns>The serialized processor.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadManager.DeserializeProcessor(System.String)">
            <summary>
            Deserializes a processor from an encrypted string. The string is encrypted and validated.
            Thanks to Dean Brettle for help with this http://www.brettle.com.
            </summary>
            <param name="input">The encrypted and signed input string.</param>
            <returns>The deserialized processor.</returns>
        </member>
        <member name="E:darrenjohnstone.net.FileUpload.UploadManager.ProcessorInit">
            <summary>
            Fired when a processor is initialised but before it is used.
            Set processor properties here.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadManager.ModuleInstalled">
            <summary>
            Gets/sets a boolean value indicating if the HTTP module is installed.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadManager.Status">
            <summary>
            Gets the current upload status.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadManager.BufferSize">
            <summary>
            Gets/sets the buffer size for reading from the request stream.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadManager.Instance">
            <summary>
            Gets the singleton instance in a thread safe manner.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadManager.ProcessorType">
            <summary>
            Gets/sets the processor type (must implement IFileProcessor).
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadModule">
            <summary>
            Http handler which can process very large file uploads
            by passing the request stream to a FormStream instance
            for persistance by an IFileProcessor implementation.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.Init(System.Web.HttpApplication)">
            <summary>
            Initialises the module.
            </summary>
            <param name="context">Application context.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.Dispose">
            <summary>
            Disposes of the module.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.Context_AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Called when a new request commences (but after authentication).
            Preloads the request header and initialises the form stream.
            
            We do this after authentication so that the file processor will
            have access to the security context if it is required.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.fs_FileStarted(System.Object,System.String,System.Object)">
            <summary>
            Updates the currently processed file when the file stream indicates
            it has started processing a new file.
            </summary>
            <param name="sender">Sender.</param>
            <param name="fileName">File name.</param>
            <param name="identifier">Container identifier.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.fs_FileCompletedError(System.Object,System.String,System.Object,System.Exception)">
            <summary>
            Adds a file to the error collection of the status when
            the form stream indicates that a file has completed in error.
            </summary>
            <param name="sender">Sender</param>
            <param name="fileName">File name</param>
            <param name="identifier">Container identifier.</param>
            <param name="ex">The exception that was raised.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.fs_FileCompleted(System.Object,System.String,System.Object)">
            <summary>
            Adds a file to the completed collection of the status when
            the form stream indicates that a file has completed.
            </summary>
            <param name="sender">Sender</param>
            <param name="fileName">File name</param>
            <param name="identifier">Container identifier.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.GetWorkerRequest(System.Web.HttpContext)">
            <summary>
            Gets the Http worker request.
            </summary>
            <param name="context">Http context.</param>
            <returns>Worker request.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.GetProcessor">
            <summary>
            Gets a new file processor from the upload manager.
            </summary>
            <returns>A file processor.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.InitStatus(System.Int64)">
            <summary>
            Initialises the upload status which is held as an application
            variable using a unique key.
            </summary>
            <param name="length">The content length.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.PersistStatus(System.String,System.Int64,System.Web.HttpApplication,System.Web.HttpWorkerRequest)">
            <summary>
            Perists the status.
            </summary>
            <param name="key">The status key.</param>
            <param name="length">The total request length.</param>
            <param name="app">The application.</param>
            <param name="worker">The HTTP worker request.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.GetMaxRequestLength(System.Web.HttpContext)">
            <summary>
            Gets the maximum request length from the configuration settings.
            </summary>
            <param name="context">Http context.</param>
            <returns>The maximum request length (in kb).</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadModule.EndRequestOnRequestLengthExceeded(System.Web.HttpResponse,System.Web.HttpWorkerRequest,System.Web.HttpContext,System.Boolean)">
            <summary>
            Ends the request if the maximum request length is exceeded.
            </summary>
            <param name="response">The HTTP response.</param>
            <param name="isIIS7">Is this IIS 7?</param>
            <param name="context"> HttpContext </param>
            <param name="worker"> HttpWorkerRequest </param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadModule.Status">
            <summary>
            Gets the current upload status.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadModule.LengthExceededHttpCode">
            <summary>
            Gets the HTTP code to return if the maximum length is exceeded.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadProgressHandler">
            <summary>
            An HTTP handler used to get progress information on a file upload.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadProgressHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Processes a request.
            </summary>
            <param name="context">HTTP context.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadProgressHandler.IsReusable">
            <summary>
            Return false to indicate that the handler is not reusable.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadStatus">
            <summary>
            Contains the status information for an upload request and
            allows serialization as as XML message for passing to the
            client.
            </summary>
        </member>
        <member name="F:darrenjohnstone.net.FileUpload.UploadStatus.EMPTY_STATUS">
            <summary> Empty status string for the generated HTML </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadStatus.UpdateFile(System.String,System.Object)">
            <summary>
            Updates the file being processed.
            </summary>
            <param name="fileName">File name.</param>
            <param name="identifier">Container identifier.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadStatus.UpdateBytes(System.Int64,System.String,System.Object)">
            <summary>
            Updates the byte count.
            </summary>
            <param name="bytes">New byte count.</param>
            <param name="fileName">The name of the current file.</param>
            <param name="identifier">The container ID.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadStatus.AddAttribute(System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an attribute to an XML node.
            </summary>
            <param name="doc">XML document.</param>
            <param name="node">Node to add to.</param>
            <param name="name">Attribute name.</param>
            <param name="value">Attribute value.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadStatus.Serialize">
            <summary>
            Serializes key properties of the object into an XML document.
            </summary>
            <returns>The serialized XML document.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadStatus.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="requestSize">The size of the request.</param>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.UploadedFiles">
            <summary>
            Gets/sets the list of uploaded files.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.ErrorFiles">
            <summary>
            Gets/sets the list of files which could not be uploaded due to an error.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.LengthExceeded">
            <summary>
            Gets/sets a boolean value indicating if the content length was exceeded.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.ProgressPercent">
            <summary>
            Gets the progress percentage.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.CurrentFile">
            <summary>
            Gets the file that is currently being transferred.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.CurrentFileIdentifier">
            <summary>
            Gets the container identifier of the current file.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.TotalSize">
            <summary>
            Gets the total transfer size.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.BytesSoFar">
            <summary>
            Gets the total bytes transferred so far.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.TimeInSeconds">
            <summary>
            Gets the time in seconds.
            </summary>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadStatus.StartTime">
            <summary>
            Gets the time the upload started.
            </summary>
        </member>
        <member name="T:darrenjohnstone.net.FileUpload.UploadWorkerRequest">
            <summary>
            Implements an internal HTTPWorkerRequest which is replaced in the request
            and allows the upload module to spoof the preloaded content. This method is also
            acceptable for IIS 7 integrated mode.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.#ctor(System.Web.HttpWorkerRequest,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="request">The original worker request.</param>
            <param name="buffer">The content minus the uploaded files.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.ReadEntityBody(System.Byte[],System.Int32)">
            <summary>
            Reads request data from the client (when not preloaded).
            </summary>
            <param name="buffer">The byte array to read data into.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetTotalEntityBodyLength">
            <summary>
            Gets the length of the entire HTTP request body.
            </summary>
            <returns>
            An integer containing the length of the entire HTTP request body.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetPreloadedEntityBody(System.Byte[],System.Int32)">
            <summary>
            Gets the portion of the HTTP request body that has currently been read by using the specified buffer data and byte offset.
            </summary>
            <param name="buffer">The data to read.</param>
            <param name="offset">The byte offset at which to begin reading.</param>
            <returns>
            The portion of the HTTP request body that has been read.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetPreloadedEntityBody">
            <summary>
            Returns the portion of the HTTP request body that has already been read.
            </summary>
            <returns>
            The portion of the HTTP request body that has been read.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetPreloadedEntityBodyLength">
            <summary>
            Gets the length of the portion of the HTTP request body that has currently been read.
            </summary>
            <returns>
            An integer containing the length of the currently read HTTP request body.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.ReadEntityBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads request data from the client (when not preloaded) by using the specified buffer to read from, byte offset, and maximum bytes.
            </summary>
            <param name="buffer">The byte array to read data into.</param>
            <param name="offset">The byte offset at which to begin reading.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetKnownRequestHeader(System.Int32)">
            <summary>
            Returns the standard HTTP request header that corresponds to the specified index.
            </summary>
            <param name="index">The index of the header. For example, the <see cref="F:System.Web.HttpWorkerRequest.HeaderAllow"/> field.</param>
            <returns>The HTTP request header.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.IsEntireEntityBodyIsPreloaded">
            <summary>
            Returns a value indicating whether all request data is available and no further reads from the client are required.
            </summary>
            <returns>
            true if all request data is available; otherwise, false.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.CloseConnection">
            <summary>
            Terminates the connection with the client.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.EndOfRequest">
            <summary>
            Used by the runtime to notify the <see cref="T:System.Web.HttpWorkerRequest"/> that request processing for the current request is complete.
            </summary>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.FlushResponse(System.Boolean)">
            <summary>
            Sends all pending response data to the client.
            </summary>
            <param name="finalFlush">true if this is the last time response data will be flushed; otherwise, false.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetAppPath">
            <summary>
            Returns the virtual path to the currently executing server application.
            </summary>
            <returns>
            The virtual path of the current application.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetAppPathTranslated">
            <summary>
            Returns the physical path to the currently executing server application.
            </summary>
            <returns>
            The physical path of the current application.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetAppPoolID">
            <summary>
            When overridden in a derived class, returns the application pool ID for the current URL.
            </summary>
            <returns>Always returns null.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetBytesRead">
            <summary>
            Gets the number of bytes read in from the client.
            </summary>
            <returns>
            A Long containing the number of bytes read.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetClientCertificate">
            <summary>
            When overridden in a derived class, gets the certification fields (specified in the X.509 standard) from a request issued by the client.
            </summary>
            <returns>
            A byte array containing the stream of the entire certificate content.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetClientCertificateBinaryIssuer">
            <summary>
            Gets the certificate issuer, in binary format.
            </summary>
            <returns>
            A byte array containing the certificate issuer expressed in binary format.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetClientCertificateEncoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> object in which the client certificate was encoded.
            </summary>
            <returns>
            The certificate encoding, expressed as an integer.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetClientCertificatePublicKey">
            <summary>
            When overridden in a derived class, gets a PublicKey object associated with the client certificate.
            </summary>
            <returns>A PublicKey object.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetClientCertificateValidFrom">
            <summary>
            When overridden in a derived class, gets the date when the certificate becomes valid. The date varies with international settings.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> object representing when the certificate becomes valid.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetClientCertificateValidUntil">
            <summary>
            Gets the certificate expiration date.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> object representing the date that the certificate expires.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetConnectionID">
            <summary>
            When overridden in a derived class, returns the ID of the current connection.
            </summary>
            <returns>Always returns 0.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetFilePath">
            <summary>
            When overridden in a derived class, returns the virtual path to the requested URI.
            </summary>
            <returns>The path to the requested URI.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetFilePathTranslated">
            <summary>
            Returns the physical file path to the requested URI (and translates it from virtual path to physical path: for example, "/proj1/page.aspx" to "c:\dir\page.aspx")
            </summary>
            <returns>
            The translated physical file path to the requested URI.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetHttpVerbName">
            <summary>
            Returns the specified member of the request header.
            </summary>
            <returns>
            The HTTP verb returned in the request header.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetHttpVersion">
            <summary>
            Provides access to the HTTP version of the request (for example, "HTTP/1.1").
            </summary>
            <returns>
            The HTTP version returned in the request header.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetLocalAddress">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The server IP address returned in the request header.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetLocalPort">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>
            The server port number returned in the request header.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetPathInfo">
            <summary>
            Returns additional path information for a resource with a URL extension. That is, for the path /virdir/page.html/tail, the GetPathInfo value is /tail.
            </summary>
            <returns>
            Additional path information for a resource.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetProtocol">
            <summary>
            When overridden in a derived class, returns the HTTP protocol (HTTP or HTTPS).
            </summary>
            <returns>
            HTTPS if the <see cref="M:System.Web.HttpWorkerRequest.IsSecure"/> method is true, otherwise HTTP.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetQueryString">
            <summary>
            Returns the query string specified in the request URL.
            </summary>
            <returns>The request query string.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetQueryStringRawBytes">
            <summary>
            When overridden in a derived class, returns the response query string as an array of bytes.
            </summary>
            <returns>
            An array of bytes containing the response.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetRawUrl">
            <summary>
            Returns the URL path contained in the request header with the query string appended.
            </summary>
            <returns>The raw URL path of the request header.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetRemoteAddress">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>The client's IP address.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetRemoteName">
            <summary>
            When overridden in a derived class, returns the name of the client computer.
            </summary>
            <returns>The name of the client computer.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetRemotePort">
            <summary>
            Provides access to the specified member of the request header.
            </summary>
            <returns>The client's HTTP port number.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetRequestReason">
            <summary>
            When overridden in a derived class, returns the reason for the request.
            </summary>
            <returns>
            Reason code. The default is ReasonResponseCacheMiss.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetServerName">
            <summary>
            When overridden in a derived class, returns the name of the local server.
            </summary>
            <returns>The name of the local server.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetServerVariable(System.String)">
            <summary>
            Returns a single server variable from a dictionary of server variables associated with the request.
            </summary>
            <param name="name">The name of the requested server variable.</param>
            <returns>The requested server variable.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetUnknownRequestHeader(System.String)">
            <summary>
            Returns a nonstandard HTTP request header value.
            </summary>
            <param name="name">The header name.</param>
            <returns>The header value.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetUnknownRequestHeaders">
            <summary>
            Get all nonstandard HTTP header name-value pairs.
            </summary>
            <returns>An array of header name-value pairs.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetUriPath">
            <summary>
            Returns the virtual path to the requested URI.
            </summary>
            <returns>The path to the requested URI.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetUrlContextID">
            <summary>
            When overridden in a derived class, returns the context ID of the current connection.
            </summary>
            <returns>Always returns 0.</returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetUserToken">
            <summary>
            When overridden in a derived class, returns the client's impersonation token.
            </summary>
            <returns>
            A value representing the client's impersonation token. The default is 0.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.GetVirtualPathToken">
            <summary>
            Gets the impersonation token for the request virtual path.
            </summary>
            <returns>
            An unmanaged memory pointer for the token for the request virtual path.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.HeadersSent">
            <summary>
            Returns a value indicating whether HTTP response headers have been sent to the client for the current request.
            </summary>
            <returns>
            true if HTTP response headers have been sent to the client; otherwise, false.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.IsClientConnected">
            <summary>
            Returns a value indicating whether the client connection is still active.
            </summary>
            <returns>
            true if the client connection is still active; otherwise, false.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.IsSecure">
            <summary>
            Returns a value indicating whether the connection uses SSL.
            </summary>
            <returns>
            true if the connection is an SSL connection; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.MapPath(System.String)">
            <summary>
            Returns the physical path corresponding to the specified virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns>
            The physical path that corresponds to the virtual path specified in the <paramref name="virtualPath"/> parameter.
            </returns>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendCalculatedContentLength(System.Int32)">
            <summary>
            Adds a Content-Length HTTP header to the response for message bodies that are less than or equal to 2 GB.
            </summary>
            <param name="contentLength">The length of the response, in bytes.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendCalculatedContentLength(System.Int64)">
            <summary>
            Adds a Content-Length HTTP header to the response for message bodies that are greater than 2 GB.
            </summary>
            <param name="contentLength">The length of the response, in bytes.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendKnownResponseHeader(System.Int32,System.String)">
            <summary>
            Adds a standard HTTP header to the response.
            </summary>
            <param name="index">The header index. For example, <see cref="F:System.Web.HttpWorkerRequest.HeaderContentLength"/>.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendResponseFromFile(System.IntPtr,System.Int64,System.Int64)">
            <summary>
            Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.
            </summary>
            <param name="handle">The handle of the file to send.</param>
            <param name="offset">The starting position in the file.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendResponseFromFile(System.String,System.Int64,System.Int64)">
            <summary>
            Adds the contents of the specified file to the response and specifies the starting position in the file and the number of bytes to send.
            </summary>
            <param name="filename">The name of the file to send.</param>
            <param name="offset">The starting position in the file.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendResponseFromMemory(System.IntPtr,System.Int32)">
            <summary>
            Adds the specified number of bytes from a block of memory to the response.
            </summary>
            <param name="data">An unmanaged pointer to the block of memory.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendStatus(System.Int32,System.String)">
            <summary>
            Specifies the HTTP status code and status description of the response, such as SendStatus(200, "Ok").
            </summary>
            <param name="statusCode">The status code to send</param>
            <param name="statusDescription">The status description to send.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SendUnknownResponseHeader(System.String,System.String)">
            <summary>
            Adds a nonstandard HTTP header to the response.
            </summary>
            <param name="name">The name of the header to send.</param>
            <param name="value">The value of the header.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.SetEndOfSendNotification(System.Web.HttpWorkerRequest.EndOfSendNotification,System.Object)">
            <summary>
            Registers for an optional notification when all the response data is sent.
            </summary>
            <param name="callback">The notification callback that is called when all data is sent (out-of-band).</param>
            <param name="extraData">An additional parameter to the callback.</param>
        </member>
        <member name="M:darrenjohnstone.net.FileUpload.UploadWorkerRequest.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadWorkerRequest.MachineConfigPath">
            <summary>
            Gets the full physical path to the Machine.config file.
            </summary>
            <value></value>
            <returns>The physical path to the Machine.config file.</returns>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadWorkerRequest.MachineInstallDirectory">
            <summary>
            Gets the physical path to the directory where the ASP.NET binaries are installed.
            </summary>
            <value></value>
            <returns>The physical directory to the ASP.NET binary files.</returns>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadWorkerRequest.RequestTraceIdentifier">
            <summary>
            Gets the corresponding Event Tracking for Windows trace ID for the current request.
            </summary>
            <value></value>
            <returns>A trace ID for the current ASP.NET request.</returns>
        </member>
        <member name="P:darrenjohnstone.net.FileUpload.UploadWorkerRequest.RootWebConfigPath">
            <summary>
            Gets the full physical path to the root Web.config file.
            </summary>
            <value></value>
            <returns>The physical path to the root Web.config file.</returns>
        </member>
    </members>
</doc>
