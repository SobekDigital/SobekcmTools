//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 

#region Using directives

using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Runtime.Serialization;
using System.Xml;
using System.Xml.Schema;

#endregion

#pragma warning disable 1591

namespace SobekCM.Engine_Library.Items.Authority
{
    [Serializable()]
    [DesignerCategory("code")]
    [DebuggerStepThrough()]
    [ToolboxItem(true)]
    public class Map_Features_DataSet : DataSet {
        
        private FeaturesDataTable tableFeatures;
        
        private TypesDataTable tableTypes;
        
        public Map_Features_DataSet() {
            InitClass();
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Map_Features_DataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new StringReader(strSchema)));
                if ((ds.Tables["Features"] != null)) {
                    Tables.Add(new FeaturesDataTable(ds.Tables["Features"]));
                }
                if ((ds.Tables["Types"] != null)) {
                    Tables.Add(new TypesDataTable(ds.Tables["Types"]));
                }
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else {
                InitClass();
            }
            GetSerializationData(info, context);
            CollectionChangeEventHandler schemaChangedHandler = new CollectionChangeEventHandler(SchemaChanged);
            Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public FeaturesDataTable Features {
            get {
                return tableFeatures;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public TypesDataTable Types {
            get {
                return tableTypes;
            }
        }
        
        public override DataSet Clone() {
            Map_Features_DataSet cln = ((Map_Features_DataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Features"] != null)) {
                Tables.Add(new FeaturesDataTable(ds.Tables["Features"]));
            }
            if ((ds.Tables["Types"] != null)) {
                Tables.Add(new TypesDataTable(ds.Tables["Types"]));
            }
            DataSetName = ds.DataSetName;
            Prefix = ds.Prefix;
            Namespace = ds.Namespace;
            Locale = ds.Locale;
            CaseSensitive = ds.CaseSensitive;
            EnforceConstraints = ds.EnforceConstraints;
            Merge(ds, false, MissingSchemaAction.Add);
            InitVars();
        }
        
        protected override XmlSchema GetSchemaSerializable() {
            MemoryStream stream = new MemoryStream();
            WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            tableFeatures = ((FeaturesDataTable)(Tables["Features"]));
            if ((tableFeatures != null)) {
                tableFeatures.InitVars();
            }
            tableTypes = ((TypesDataTable)(Tables["Types"]));
            if ((tableTypes != null)) {
                tableTypes.InitVars();
            }
        }
        
        private void InitClass() {
            DataSetName = "Map_Features_DataSet";
            Prefix = "";
            Namespace = "";
            Locale = new CultureInfo("en-US");
            CaseSensitive = false;
            EnforceConstraints = true;
            tableFeatures = new FeaturesDataTable();
            Tables.Add(tableFeatures);
            tableTypes = new TypesDataTable();
            Tables.Add(tableTypes);
        }
        
        private bool ShouldSerializeFeatures() {
            return false;
        }
        
        private bool ShouldSerializeTypes() {
            return false;
        }
        
        private void SchemaChanged(object sender, CollectionChangeEventArgs e) {
            if ((e.Action == CollectionChangeAction.Remove)) {
                InitVars();
            }
        }
        
        public delegate void FeaturesRowChangeEventHandler(object sender, FeaturesRowChangeEvent e);
        
        public delegate void TypesRowChangeEventHandler(object sender, TypesRowChangeEvent e);
        
        [DebuggerStepThrough()]
        public class FeaturesDataTable : DataTable, IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnFeatureName;
            
            private DataColumn columnLocationDesc;
            
            private DataColumn columnAA_Indicated;
            
            private DataColumn columnCorporateName;
            
            private DataColumn columnCorporateID;
            
            private DataColumn columnPageName;
            
            private DataColumn columnsorter;
            
            public FeaturesDataTable() : 
                    base("Features") {
                InitClass();
            }
            
            public FeaturesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }
            
            [Browsable(false)]
            public int Count {
                get {
                    return Rows.Count;
                }
            }
            
            public DataColumn FeatureIDColumn {
                get {
                    return columnFeatureID;
                }
            }
            
            public DataColumn FeatureNameColumn {
                get {
                    return columnFeatureName;
                }
            }
            
            public DataColumn LocationDescColumn {
                get {
                    return columnLocationDesc;
                }
            }
            
            public DataColumn AA_IndicatedColumn {
                get {
                    return columnAA_Indicated;
                }
            }
            
            public DataColumn CorporateNameColumn {
                get {
                    return columnCorporateName;
                }
            }
            
            public DataColumn CorporateIDColumn {
                get {
                    return columnCorporateID;
                }
            }
            
            public DataColumn PageNameColumn {
                get {
                    return columnPageName;
                }
            }
            
            public DataColumn sorterColumn {
                get {
                    return columnsorter;
                }
            }
            
            public FeaturesRow this[int index] {
                get {
                    return ((FeaturesRow)(Rows[index]));
                }
            }
            
            public event FeaturesRowChangeEventHandler FeaturesRowChanged;
            
            public event FeaturesRowChangeEventHandler FeaturesRowChanging;
            
            public event FeaturesRowChangeEventHandler FeaturesRowDeleted;
            
            public event FeaturesRowChangeEventHandler FeaturesRowDeleting;
            
            public void AddFeaturesRow(FeaturesRow row) {
                Rows.Add(row);
            }
            
            public FeaturesRow AddFeaturesRow(int FeatureID, string FeatureName, string LocationDesc, bool AA_Indicated, string CorporateName, int CorporateID, string PageName, string sorter) {
                FeaturesRow rowFeaturesRow = ((FeaturesRow)(NewRow()));
                rowFeaturesRow.ItemArray = new object[] {
                        FeatureID,
                        FeatureName,
                        LocationDesc,
                        AA_Indicated,
                        CorporateName,
                        CorporateID,
                        PageName,
                        sorter};
                Rows.Add(rowFeaturesRow);
                return rowFeaturesRow;
            }
            
            public IEnumerator GetEnumerator() {
                return Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FeaturesDataTable cln = ((FeaturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FeaturesDataTable();
            }
            
            public void InitVars() {
                columnFeatureID = Columns["FeatureID"];
                columnFeatureName = Columns["FeatureName"];
                columnLocationDesc = Columns["LocationDesc"];
                columnAA_Indicated = Columns["AA_Indicated"];
                columnCorporateName = Columns["CorporateName"];
                columnCorporateID = Columns["CorporateID"];
                columnPageName = Columns["PageName"];
                columnsorter = Columns["sorter"];
            }
            
            private void InitClass() {
                columnFeatureID = new DataColumn("FeatureID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFeatureID);
                columnFeatureName = new DataColumn("FeatureName", typeof(string), null, MappingType.Element);
                Columns.Add(columnFeatureName);
                columnLocationDesc = new DataColumn("LocationDesc", typeof(string), null, MappingType.Element);
                Columns.Add(columnLocationDesc);
                columnAA_Indicated = new DataColumn("AA_Indicated", typeof(bool), null, MappingType.Element);
                Columns.Add(columnAA_Indicated);
                columnCorporateName = new DataColumn("CorporateName", typeof(string), null, MappingType.Element);
                Columns.Add(columnCorporateName);
                columnCorporateID = new DataColumn("CorporateID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCorporateID);
                columnPageName = new DataColumn("PageName", typeof(string), null, MappingType.Element);
                Columns.Add(columnPageName);
                columnsorter = new DataColumn("sorter", typeof(string), null, MappingType.Element);
                Columns.Add(columnsorter);
            }
            
            public FeaturesRow NewFeaturesRow() {
                return ((FeaturesRow)(NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FeaturesRow(builder);
            }
            
            protected override Type GetRowType() {
                return typeof(FeaturesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((FeaturesRowChanged != null)) {
                    FeaturesRowChanged(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((FeaturesRowChanging != null)) {
                    FeaturesRowChanging(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((FeaturesRowDeleted != null)) {
                    FeaturesRowDeleted(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((FeaturesRowDeleting != null)) {
                    FeaturesRowDeleting(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFeaturesRow(FeaturesRow row) {
                Rows.Remove(row);
            }
        }
        
        [DebuggerStepThrough()]
        public class FeaturesRow : DataRow {
            
            private FeaturesDataTable tableFeatures;
            
            public FeaturesRow(DataRowBuilder rb) : 
                    base(rb) {
                tableFeatures = ((FeaturesDataTable)(Table));
            }
            
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[tableFeatures.FeatureIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.FeatureIDColumn] = value;
                }
            }
            
            public string FeatureName {
                get {
                    try {
                        return ((string)(this[tableFeatures.FeatureNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.FeatureNameColumn] = value;
                }
            }
            
            public string LocationDesc {
                get {
                    try {
                        return ((string)(this[tableFeatures.LocationDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.LocationDescColumn] = value;
                }
            }
            
            public bool AA_Indicated {
                get {
                    try {
                        return ((bool)(this[tableFeatures.AA_IndicatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.AA_IndicatedColumn] = value;
                }
            }
            
            public string CorporateName {
                get {
                    try {
                        return ((string)(this[tableFeatures.CorporateNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.CorporateNameColumn] = value;
                }
            }
            
            public int CorporateID {
                get {
                    try {
                        return ((int)(this[tableFeatures.CorporateIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.CorporateIDColumn] = value;
                }
            }
            
            public string PageName {
                get {
                    try {
                        return ((string)(this[tableFeatures.PageNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.PageNameColumn] = value;
                }
            }
            
            public string sorter {
                get {
                    try {
                        return ((string)(this[tableFeatures.sorterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableFeatures.sorterColumn] = value;
                }
            }
            
            public bool IsFeatureIDNull() {
                return IsNull(tableFeatures.FeatureIDColumn);
            }
            
            public void SetFeatureIDNull() {
                this[tableFeatures.FeatureIDColumn] = Convert.DBNull;
            }
            
            public bool IsFeatureNameNull() {
                return IsNull(tableFeatures.FeatureNameColumn);
            }
            
            public void SetFeatureNameNull() {
                this[tableFeatures.FeatureNameColumn] = Convert.DBNull;
            }
            
            public bool IsLocationDescNull() {
                return IsNull(tableFeatures.LocationDescColumn);
            }
            
            public void SetLocationDescNull() {
                this[tableFeatures.LocationDescColumn] = Convert.DBNull;
            }
            
            public bool IsAA_IndicatedNull() {
                return IsNull(tableFeatures.AA_IndicatedColumn);
            }
            
            public void SetAA_IndicatedNull() {
                this[tableFeatures.AA_IndicatedColumn] = Convert.DBNull;
            }
            
            public bool IsCorporateNameNull() {
                return IsNull(tableFeatures.CorporateNameColumn);
            }
            
            public void SetCorporateNameNull() {
                this[tableFeatures.CorporateNameColumn] = Convert.DBNull;
            }
            
            public bool IsCorporateIDNull() {
                return IsNull(tableFeatures.CorporateIDColumn);
            }
            
            public void SetCorporateIDNull() {
                this[tableFeatures.CorporateIDColumn] = Convert.DBNull;
            }
            
            public bool IsPageNameNull() {
                return IsNull(tableFeatures.PageNameColumn);
            }
            
            public void SetPageNameNull() {
                this[tableFeatures.PageNameColumn] = Convert.DBNull;
            }
            
            public bool IssorterNull() {
                return IsNull(tableFeatures.sorterColumn);
            }
            
            public void SetsorterNull() {
                this[tableFeatures.sorterColumn] = Convert.DBNull;
            }
        }
        
        [DebuggerStepThrough()]
        public class FeaturesRowChangeEvent : EventArgs {
            
            private FeaturesRow eventRow;
            
            private DataRowAction eventAction;
            
            public FeaturesRowChangeEvent(FeaturesRow row, DataRowAction action) {
                eventRow = row;
                eventAction = action;
            }
            
            public FeaturesRow Row {
                get {
                    return eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return eventAction;
                }
            }
        }
        
        [DebuggerStepThrough()]
        public class TypesDataTable : DataTable, IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnFeatureTypeName;
            
            private DataColumn columnFeatureTypeID;
            
            private DataColumn columnParentFeatureTypeID;
            
            public TypesDataTable() : 
                    base("Types") {
                InitClass();
            }
            
            public TypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    Namespace = table.Namespace;
                }
                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
                DisplayExpression = table.DisplayExpression;
            }
            
            [Browsable(false)]
            public int Count {
                get {
                    return Rows.Count;
                }
            }
            
            public DataColumn FeatureIDColumn {
                get {
                    return columnFeatureID;
                }
            }
            
            public DataColumn FeatureTypeNameColumn {
                get {
                    return columnFeatureTypeName;
                }
            }
            
            public DataColumn FeatureTypeIDColumn {
                get {
                    return columnFeatureTypeID;
                }
            }
            
            public DataColumn ParentFeatureTypeIDColumn {
                get {
                    return columnParentFeatureTypeID;
                }
            }
            
            public TypesRow this[int index] {
                get {
                    return ((TypesRow)(Rows[index]));
                }
            }
            
            public event TypesRowChangeEventHandler TypesRowChanged;
            
            public event TypesRowChangeEventHandler TypesRowChanging;
            
            public event TypesRowChangeEventHandler TypesRowDeleted;
            
            public event TypesRowChangeEventHandler TypesRowDeleting;
            
            public void AddTypesRow(TypesRow row) {
                Rows.Add(row);
            }
            
            public TypesRow AddTypesRow(int FeatureID, string FeatureTypeName, int FeatureTypeID, int ParentFeatureTypeID) {
                TypesRow rowTypesRow = ((TypesRow)(NewRow()));
                rowTypesRow.ItemArray = new object[] {
                        FeatureID,
                        FeatureTypeName,
                        FeatureTypeID,
                        ParentFeatureTypeID};
                Rows.Add(rowTypesRow);
                return rowTypesRow;
            }
            
            public IEnumerator GetEnumerator() {
                return Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TypesDataTable cln = ((TypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TypesDataTable();
            }
            
            public void InitVars() {
                columnFeatureID = Columns["FeatureID"];
                columnFeatureTypeName = Columns["FeatureTypeName"];
                columnFeatureTypeID = Columns["FeatureTypeID"];
                columnParentFeatureTypeID = Columns["ParentFeatureTypeID"];
            }
            
            private void InitClass() {
                columnFeatureID = new DataColumn("FeatureID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFeatureID);
                columnFeatureTypeName = new DataColumn("FeatureTypeName", typeof(string), null, MappingType.Element);
                Columns.Add(columnFeatureTypeName);
                columnFeatureTypeID = new DataColumn("FeatureTypeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnFeatureTypeID);
                columnParentFeatureTypeID = new DataColumn("ParentFeatureTypeID", typeof(int), null, MappingType.Element);
                Columns.Add(columnParentFeatureTypeID);
            }
            
            public TypesRow NewTypesRow() {
                return ((TypesRow)(NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TypesRow(builder);
            }
            
            protected override Type GetRowType() {
                return typeof(TypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((TypesRowChanged != null)) {
                    TypesRowChanged(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((TypesRowChanging != null)) {
                    TypesRowChanging(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((TypesRowDeleted != null)) {
                    TypesRowDeleted(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((TypesRowDeleting != null)) {
                    TypesRowDeleting(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTypesRow(TypesRow row) {
                Rows.Remove(row);
            }
        }
        
        [DebuggerStepThrough()]
        public class TypesRow : DataRow {
            
            private TypesDataTable tableTypes;
            
            public TypesRow(DataRowBuilder rb) : 
                    base(rb) {
                tableTypes = ((TypesDataTable)(Table));
            }
            
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[tableTypes.FeatureIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableTypes.FeatureIDColumn] = value;
                }
            }
            
            public string FeatureTypeName {
                get {
                    try {
                        return ((string)(this[tableTypes.FeatureTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableTypes.FeatureTypeNameColumn] = value;
                }
            }
            
            public int FeatureTypeID {
                get {
                    try {
                        return ((int)(this[tableTypes.FeatureTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableTypes.FeatureTypeIDColumn] = value;
                }
            }
            
            public int ParentFeatureTypeID {
                get {
                    try {
                        return ((int)(this[tableTypes.ParentFeatureTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[tableTypes.ParentFeatureTypeIDColumn] = value;
                }
            }
            
            public bool IsFeatureIDNull() {
                return IsNull(tableTypes.FeatureIDColumn);
            }
            
            public void SetFeatureIDNull() {
                this[tableTypes.FeatureIDColumn] = Convert.DBNull;
            }
            
            public bool IsFeatureTypeNameNull() {
                return IsNull(tableTypes.FeatureTypeNameColumn);
            }
            
            public void SetFeatureTypeNameNull() {
                this[tableTypes.FeatureTypeNameColumn] = Convert.DBNull;
            }
            
            public bool IsFeatureTypeIDNull() {
                return IsNull(tableTypes.FeatureTypeIDColumn);
            }
            
            public void SetFeatureTypeIDNull() {
                this[tableTypes.FeatureTypeIDColumn] = Convert.DBNull;
            }
            
            public bool IsParentFeatureTypeIDNull() {
                return IsNull(tableTypes.ParentFeatureTypeIDColumn);
            }
            
            public void SetParentFeatureTypeIDNull() {
                this[tableTypes.ParentFeatureTypeIDColumn] = Convert.DBNull;
            }
        }
        
        [DebuggerStepThrough()]
        public class TypesRowChangeEvent : EventArgs {
            
            private TypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TypesRowChangeEvent(TypesRow row, DataRowAction action) {
                eventRow = row;
                eventAction = action;
            }
            
            public TypesRow Row {
                get {
                    return eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591