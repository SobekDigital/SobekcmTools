#region Using directives

using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Web.UI.WebControls;
using SobekCM.Resource_Object;
using SobekCM.Resource_Object.Divisions;
using SobekCM.Library.Aggregations;
using SobekCM.Library.Database;
using SobekCM.Library.Navigation;
using SobekCM.Library.Results;
using SobekCM.Library.WebContent;

#endregion

namespace SobekCM.Library.MainWriters
{
    /// <summary> Main writer writes search results and item browses as plain text. </summary>
    /// <remarks> This class extends the abstract class <see cref="abstractMainWriter"/>. </remarks>
    public class Text_MainWriter : abstractMainWriter
    {
        /// <summary> Constructor for a new instance of the Text_MainWriter class </summary>
        /// <param name="Current_Mode"> Mode / navigation information for the current request</param>
        /// <param name="Hierarchy_Object"> Current item aggregation object to display </param>
        /// <param name="Results_Statistics"> Information about the entire set of results for a search or browse </param>
        /// <param name="Paged_Results"> Single page of results for a search or browse, within the entire set </param>
        /// <param name="Browse_Object"> Object contains all the basic information about any browse or info display </param>
        /// <param name="Current_Item"> Current item to display </param>
        /// <param name="Current_Page"> Current page within the item</param>
        /// <param name="Static_Web_Content"> HTML content-based browse, info, or imple CMS-style web content objects.  These are objects which are read from a static HTML file and much of the head information must be maintained </param>
        public Text_MainWriter(SobekCM_Navigation_Object Current_Mode,
             Item_Aggregation Hierarchy_Object,
            Search_Results_Statistics Results_Statistics,
            List<iSearch_Title_Result> Paged_Results,
            Item_Aggregation_Browse_Info Browse_Object,
            SobekCM_Item Current_Item,
            Page_TreeNode Current_Page,
            HTML_Based_Content Static_Web_Content)
            : base(Current_Mode, Hierarchy_Object, Results_Statistics, Paged_Results, Browse_Object, Current_Item, Current_Page, Static_Web_Content)
        {
            // All work done in base class
        }

        /// <summary> Gets the enumeration of the type of main writer </summary>
        /// <value> This property always returns the enumerational value <see cref="SobekCM.Library.Navigation.Writer_Type_Enum.Text"/>. </value>
        public override Writer_Type_Enum Writer_Type { get { return Writer_Type_Enum.Text; } }

        /// <summary> Perform all the work of adding text directly to the response stream back to the web user </summary>
        /// <param name="Output"> Stream to which to write the text for this main writer </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        public override void Add_Text_To_Page(TextWriter Output, Custom_Tracer Tracer)
        {
            Output.WriteLine("<!DOCTYPE html PUBLIC \"-//W3C//Dtd XHTML 1.0 Transitional//EN\" \"http://www.w3.org/tr/xhtml1/Dtd/xhtml1-transitional.dtd\">");
            Output.WriteLine("<html xmlns=\"http://www.w3.org/1999/xhtml\" >");
            Output.WriteLine("<head>");
            Output.WriteLine("  <title>" + currentMode.SobekCM_Instance_Abbreviation + " - Text Writer</title>");
            Output.WriteLine();
            Output.WriteLine("  <!-- " + currentMode.SobekCM_Instance_Name + " -->");
            Output.WriteLine("  <!-- HTML generated by ASP.net application written by Mark Sullivan -->");
            Output.WriteLine("  <meta content=\"Microsoft Visual Studio .NET 2005\" name=\"GENERATOR\">");
            Output.WriteLine("  <meta content=\"C#\" name=\"CODE_LANGUAGE\">");
            Output.WriteLine("  <meta content=\"JavaScript\" name=\"vs_defaultClientScript\">");
            Output.WriteLine("  <meta content=\"http://schemas.microsoft.com/intellisense/ie5\" name=\"vs_targetSchema\">");
            Output.WriteLine("  <style type=\"text/css\">");
            Output.WriteLine("    table { border-width: 1px; border: single black; border-collapse: collapse  }");
            Output.WriteLine("    td    { border: single black; padding: 3px; }");
            Output.WriteLine("    th    { border: single black; padding: 3px; } ");
            Output.WriteLine("  </style>");
            Output.WriteLine("</head>");
            Output.WriteLine("<body>");


            switch (currentMode.Mode)
            {
                case Display_Mode_Enum.Item_Display:
                    if (currentItem != null)
                    {
                        display_item(Output);
                        break;
                    }
                    Output.WriteLine("<b>INVALID ITEM INDICATED</b>");
                    break;
                case Display_Mode_Enum.Results:
                case Display_Mode_Enum.Aggregation_Browse_Info:
                    if (paged_results != null)
                        display_search_results(Output);
                    break;
                default:
                    Output.Write("<b>TEXT WRITER - UNKNOWN MODE</b>");
                    break;
            }

            Output.WriteLine("</body>");
            Output.WriteLine("</html>");
        }

        /// <summary> Perform all the work of adding to the response stream back to the web user </summary>
        /// <param name="Navigation_Place_Holder"> Place holder is used to add more complex server-side objects during execution</param>
        /// <param name="TOC_Place_Holder"> Place holder is used to add more complex server-side objects during execution</param>
        /// <param name="Main_Place_Holder"> Place holder is used to add more complex server-side objects during execution</param>
        /// <param name="myUfdcUploadPlaceHolder"> Place holder is used to add more complex server-side objects during execution </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering</param>
        /// <remarks> Since this class writes all the output directly to the response stream, this method simply returns, without doing anything</remarks>
        public override void Add_Controls(PlaceHolder Navigation_Place_Holder,
            PlaceHolder TOC_Place_Holder,
            PlaceHolder Main_Place_Holder,
            PlaceHolder myUfdcUploadPlaceHolder,
            Custom_Tracer Tracer)
        {
            return;
        }

        /// <summary> Displays search results in plain text  </summary>
        /// <param name="Output"> Stream to which to write the text for this main writer </param>
        protected internal void display_search_results(TextWriter Output)
        {

            //// Show the source
            //if ((search_url != null) && (search_url.Length > 0))
            //{
            //    Output.WriteLine("<a href=\'" + search_url + "\'>Greenstone source</a>");
            //    Output.WriteLine("<br /><br /><br />");
            //}

            //// Start the results table 
            //Output.Write("<a name=\"results_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>TITLE RESULTS table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\" width=\"1800\" >" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //foreach (DataColumn thisColumn in search_results.Item_Table.Table.Columns)
            //{
            //    Output.Write("      <th>" + thisColumn.ColumnName + "</th>" + Environment.NewLine );
            //}
            //Output.Write("   </tr>" + Environment.NewLine );

            //// Now, step through each row
            //int column_count = search_results.Item_Table.Table.Columns.Count;
            //foreach (DataRow thisRow in search_results.Item_Table.Table.Rows)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    for (int i = 0; i < column_count; i++)
            //    {
            //        if (thisRow[i] == DBNull.Value)
            //            Output.Write("      <td><i>NULL</i></td>" + Environment.NewLine );
            //        else
            //            Output.Write("      <td>" + thisRow[i].ToString() + "</td>" + Environment.NewLine );
            //    }
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}

            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Start the item table 
            //Output.Write("<a name=\"results_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>ITEM RESULTS table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\" width=\"2200\" >" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //foreach (DataColumn thisColumn in search_results.Item_Group_Table.Table.Columns)
            //{
            //    Output.Write("      <th>" + thisColumn.ColumnName + "</th>" + Environment.NewLine );
            //}
            //Output.Write("   </tr>" + Environment.NewLine );

            //// Now, step through each row
            //column_count = search_results.Item_Group_Table.Table.Columns.Count;
            //foreach (DataRow thisRow in search_results.Item_Group_Table.Table.Rows)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    for (int i = 0; i < column_count; i++)
            //    {
            //        if (thisRow[i] == DBNull.Value)
            //            Output.Write("      <td><i>NULL</i></td>" + Environment.NewLine );
            //        else
            //            Output.Write("      <td>" + thisRow[i].ToString() + "</td>" + Environment.NewLine );
            //    }
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}

            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );
        }

        /// <summary> Displays item group information in plain text </summary>
        /// <param name="Output"> Stream to which to write the text for this main writer </param>
        protected internal void display_group(TextWriter Output)
        {
            // Go back to the database and get the datatable
            DataSet thisItem = SobekCM_Database.Get_Item_Group_Details(currentMode.BibID, null);

            // If null returned, write that and end
            if (thisItem == null)
            {
                Output.Write("<b>Invalid Group</b>");
                return;
            }

            // Add the links first
            Output.Write("<a href=\"?b=" + currentMode.BibID + "\" target=\"_BLANK\" >View Group</a>" + Environment.NewLine );
            Output.Write("<br /><br />" + Environment.NewLine );

            Output.WriteLine("<font size=-1>" + Environment.NewLine );
            Output.Write("   <a href=\"#group_table\" >Group</a> | " + Environment.NewLine );
            Output.Write("   <a href=\"#item_table\" >Items</a> | " + Environment.NewLine );
            Output.Write("   <a href=\"#icon_table\" >Icons</a> | " + Environment.NewLine );
            Output.Write("   <a href=\"#interface_table\" >Interfaces</a> " + Environment.NewLine );
            Output.Write("</font>" + Environment.NewLine );
            Output.Write("<br /><br />" + Environment.NewLine );

            // Display the item information table from this dataset
            Output.Write("<a name=\"group_table\"></a>" + Environment.NewLine );
            Output.Write("<b>GROUP table</b>" + Environment.NewLine );
            Output.Write("<table border=\"1\" >" + Environment.NewLine );
            Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            Output.Write("      <th>GroupTitle</th>" + Environment.NewLine );
            Output.Write("      <th>BibID</th>" + Environment.NewLine );
            Output.Write("      <th>Type</th>" + Environment.NewLine );
            Output.Write("      <th>Default_Collection</th>" + Environment.NewLine );
            Output.Write("      <th>File_Root</th>" + Environment.NewLine );
            Output.Write("      <th>Greenstone_Code</th>" + Environment.NewLine );
            Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.DataSets.Group_Information.GroupRow itemRow in thisItem.Group)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.GroupTitle + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.BibID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Type + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Default_Collection + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.File_Location + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Greenstone_Cde + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            Output.Write("</table>" + Environment.NewLine );
            Output.Write("<br /><br />" + Environment.NewLine );


            // Display the item information table from this dataset
            Output.Write("<a name=\"item_table\"></a>" + Environment.NewLine );
            Output.Write("<b>ITEM table</b>" + Environment.NewLine );
            Output.Write("<table border=\"1\" width=\"2000\" >" + Environment.NewLine );
            Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            Output.Write("      <th>ItemID</th>" + Environment.NewLine );
            Output.Write("      <th>Title</th>" + Environment.NewLine );
            Output.Write("      <th>Level1_Text</th>" + Environment.NewLine );
            Output.Write("      <th>Level1_Index</th>" + Environment.NewLine );
            Output.Write("      <th>Level2_Text</th>" + Environment.NewLine );
            Output.Write("      <th>Level2_Index</th>" + Environment.NewLine );
            Output.Write("      <th>Level3_Text</th>" + Environment.NewLine );
            Output.Write("      <th>Level3_Index</th>" + Environment.NewLine );
            Output.Write("      <th>Level4_Text</th>" + Environment.NewLine );
            Output.Write("      <th>Level4_Index</th>" + Environment.NewLine );
            Output.Write("      <th>Level5_Text</th>" + Environment.NewLine );
            Output.Write("      <th>Level5_Text</th>" + Environment.NewLine );
            Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.DataSets.Group_Information._ItemRow itemRow in thisItem._Item)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td><a href=\"?i=" + itemRow.ItemID + "\">" + itemRow.ItemID + "</a></td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Title + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level1_Index + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level1_Text + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level2_Index + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level2_Text + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level3_Index + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level3_Text + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level4_Index + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level4_Text + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level5_Index + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Level5_Text + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            Output.Write("</table>" + Environment.NewLine );
            Output.Write("<br /><br />" + Environment.NewLine );

            // Display the icon table from this dataset
            Output.Write("<a name=\"icon_table\"></a>" + Environment.NewLine );
            Output.Write("<b>ICON table</b>" + Environment.NewLine );
            Output.Write("<table border=\"1\">" + Environment.NewLine );
            Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            Output.Write("      <th>Icon_URL</th>" + Environment.NewLine );
            Output.Write("      <th>Link</th>" + Environment.NewLine );
            Output.Write("      <th>Icon_Name</th>" + Environment.NewLine );
            Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.DataSets.Group_Information.IconRow iconRow in thisItem.Icon)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + iconRow.Icon_URL + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + iconRow.Link + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + iconRow.Icon_Name + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            Output.Write("</table>" + Environment.NewLine );
            Output.Write("<br /><br />" + Environment.NewLine );

            // Display the interface table from this dataset
            Output.Write("<a name=\"interface_table\"></a>" + Environment.NewLine );
            Output.Write("<b>INTERFACE table</b>" + Environment.NewLine );
            Output.Write("<br /><br />" + Environment.NewLine );
        }

        /// <summary> Displays item information in plain text </summary>
        /// <param name="Output"> Stream to which to write the text for this main writer </param>
        protected internal void display_item(TextWriter Output)
        {
            //// Go back to the database and get the datatable
            //Database.Item_Information thisItem = Database.SobekCM_Database.Get_Full_By_ItemID(currentMode.ItemID, currentMode.Collection);

            //// If null returned, write that and end
            //if (thisItem == null)
            //{
            //    Output.Write("<b>Invalid Item<b>");
            //    return;
            //}

            //// Add the links first
            //Output.Write("<a href=\"?i=" + currentMode.ItemID + "\" target=\"_BLANK\" >View Item</a>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //Output.WriteLine("<font size=-1>" + Environment.NewLine );
            //Output.Write("   <a href=\"#item_table\" >Item</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#division_table\" >Divisions</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#page_table\" >Pages</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#file_table\" >Files</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#item_download_table\" >Item Downloads</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#page_download_table\" >Page Downloads</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#icon_table\" >Icons</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#interface_table\" >Interfaces</a> | " + Environment.NewLine );
            //Output.Write("   <a href=\"#view_table\" >Views</a>" + Environment.NewLine );
            //Output.Write("</font>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );


            //// Display the item information table from this dataset
            //Output.Write("<a name=\"item_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>ITEM table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\" width=\"2000\" >" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>ItemID</th>" + Environment.NewLine );
            //Output.Write("      <th>BibID</th>" + Environment.NewLine );
            //Output.Write("      <th>VID</th>" + Environment.NewLine );
            //Output.Write("      <th>Default_Collection</th>" + Environment.NewLine );
            //Output.Write("      <th>PageCount</th>" + Environment.NewLine );
            //Output.Write("      <th>TextSearchable</th>" + Environment.NewLine );
            //Output.Write("      <th>AssocFilePath</th>" + Environment.NewLine );
            //Output.Write("      <th width=\"300\">GroupTitle</th>" + Environment.NewLine );
            //Output.Write("      <th>Type</th>" + Environment.NewLine );
            //Output.Write("      <th width=\"300\">Title</th>" + Environment.NewLine );
            //Output.Write("      <th>AccessMethod</th>" + Environment.NewLine );
            //Output.Write("      <th>Link</th>" + Environment.NewLine );
            //Output.Write("      <th>File_Root</th>" + Environment.NewLine );
            //Output.Write("      <th>Greenstone_Code</th>" + Environment.NewLine );
            //Output.Write("      <th>Sibling_Count</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.Single_ItemRow itemRow in thisItem.Single_Item)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.ItemID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.BibID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.VID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Default_Collection + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.PageCount + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.TextSearchable + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.AssocFilePath + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.GroupTitle + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Type + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Title + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.AccessMethod + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Link + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.File_Root + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Greenstone_Code + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + itemRow.Sibling_Count + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Display the division table from this dataset
            //Output.Write("<a name=\"division_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>DIVISION table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>DivisionID</th>" + Environment.NewLine );
            //Output.Write("      <th>ShortName</th>" + Environment.NewLine );
            //Output.Write("      <th>LongName</th>" + Environment.NewLine );
            //Output.Write("      <th>DivSequence</th>" + Environment.NewLine );
            //Output.Write("      <th>ParentDivisionID</th>" + Environment.NewLine );
            //Output.Write("      <th>Link_PageSequence</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.DivisionRow divRow in thisItem.Division)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + divRow.divisionid + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + divRow.shortname + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + divRow.longname + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + divRow.divsequence + "</td>" + Environment.NewLine );
            //    if (divRow.IsparentdivisionidNull())
            //        Output.Write("      <td><i>NULL</i></td>" + Environment.NewLine );
            //    else
            //        Output.Write("      <td>" + divRow.parentdivisionid + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + divRow.link_pagesequence + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Display the page table from this dataset
            //Output.Write("<a name=\"page_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>PAGE table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>PageID</th>" + Environment.NewLine );
            //Output.Write("      <th>PageSequence</th>" + Environment.NewLine );
            //Output.Write("      <th>PageName</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.PageRow pageRow in thisItem.Page)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + pageRow.PageID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + pageRow.PageSequence + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + pageRow.PageName + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Display the file table from this dataset
            //Output.Write("<a name=\"file_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>FILE table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>PageID</th>" + Environment.NewLine );
            //Output.Write("      <th>FileID</th>" + Environment.NewLine );
            //Output.Write("      <th>FileName</th>" + Environment.NewLine );
            //Output.Write("      <th>DisplayOrder</th>" + Environment.NewLine );
            //Output.Write("      <th>FileType</th>" + Environment.NewLine );
            //Output.Write("      <th>DisplayDesc</th>" + Environment.NewLine );
            //Output.Write("      <th>Attributes</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.FileRow fileRow in thisItem.File)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.PageID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.FileID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.FileName + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.DisplayOrder + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.FileType + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.DisplayDesc + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + fileRow.Attributes + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );


            //// Display the item download table from this dataset
            //Output.Write("<a name=\"item_download_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>ITEM DOWNLOAD table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>FileFormatCode</th>" + Environment.NewLine );
            //Output.Write("      <th>Download_URL</th>" + Environment.NewLine );
            //Output.Write("      <th>Size_MB</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.Item_DownloadRow downloadRow in thisItem.Item_Download)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.FileFormatCode + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.Download_URL + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.Size_MB + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );


            //// Display the page download table from this dataset
            //Output.Write("<a name=\"page_download_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>PAGE DOWNLOAD table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>PageID</th>" + Environment.NewLine );
            //Output.Write("      <th>PageSequence</th>" + Environment.NewLine );
            //Output.Write("      <th>FileFormatCode</th>" + Environment.NewLine );
            //Output.Write("      <th>Download_URL</th>" + Environment.NewLine );
            //Output.Write("      <th>Size_MB</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.Page_DownloadRow downloadRow in thisItem.Page_Download)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.PageID + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.PageSequence + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.FileFormatCode + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.Download_URL + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + downloadRow.Size_MB + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Display the icon table from this dataset
            //Output.Write("<a name=\"icon_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>ICON table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>Icon_URL</th>" + Environment.NewLine );
            //Output.Write("      <th>Link</th>" + Environment.NewLine );
            //Output.Write("      <th>Icon_Name</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.IconRow iconRow in thisItem.Icon)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + iconRow.Icon_URL + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + iconRow.Link + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + iconRow.Icon_Name + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Display the interface table from this dataset
            //Output.Write("<a name=\"interface_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>INTERFACE table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>InterfaceCode</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.InterfaceRow interfaceRow in thisItem.Interface)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + interfaceRow.InterfaceCode + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

            //// Display the item views table from this dataset
            //Output.Write("<a name=\"view_table\"></a>" + Environment.NewLine );
            //Output.Write("<b>ITEM VIEWS table</b>" + Environment.NewLine );
            //Output.Write("<table border=\"1\">" + Environment.NewLine );
            //Output.Write("   <tr bgcolor=\"#EEEEEE\">" + Environment.NewLine );
            //Output.Write("      <th>DefaultView</th>" + Environment.NewLine );
            //Output.Write("      <th>isRelatedLink</th>" + Environment.NewLine );
            //Output.Write("      <th>Link</th>" + Environment.NewLine );
            //Output.Write("      <th>CustomViewType</th>" + Environment.NewLine );
            //Output.Write("      <th>DisplayText</th>" + Environment.NewLine );
            //Output.Write("      <th>Attributes</th>" + Environment.NewLine );
            //Output.Write("   </tr>" + Environment.NewLine );
            //foreach ( Database.Item_Information.ViewsRow viewRow in thisItem.Views)
            //{
            //    Output.Write("   <tr>" + Environment.NewLine );
            //    Output.Write("      <td>" + viewRow.DefaultView + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + viewRow.isRelatedLink + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + viewRow.Link + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + viewRow.CustomViewType + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + viewRow.DisplayText + "</td>" + Environment.NewLine );
            //    Output.Write("      <td>" + viewRow.Attributes + "</td>" + Environment.NewLine );
            //    Output.Write("   </tr>" + Environment.NewLine );
            //}
            //Output.Write("</table>" + Environment.NewLine );
            //Output.Write("<br /><br />" + Environment.NewLine );

        }
    }
}
