#region Using directives

using System.IO;

#endregion

namespace SobekCM.Library.HTML
{
    /// <summary> Error html subwriter writes an error message to the user when an exception is caught or the request is invalid for some reason </summary>
    /// <remarks> This class extends the <see cref="abstractHtmlSubwriter"/> abstract class. </remarks>
    public class Error_HtmlSubwriter : abstractHtmlSubwriter
    {
        private readonly bool invalidItem;

        /// <summary> Constructor for a new instance of the Error_HtmlSubwriter class </summary>
        /// <param name="Invalid_Item"> Flag indicates if this is because an invalid item was requested </param>
        public Error_HtmlSubwriter( bool Invalid_Item )
        {
            invalidItem = Invalid_Item;
        }
        
        /// <summary> Writes the HTML generated by this error html subwriter directly to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        /// <returns> TRUE -- Value indicating if html writer should finish the page immediately after this, or if there are other controls or routines which need to be called first </returns>
        public override bool Write_HTML(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Error_HtmlSubwriter.Write_HTML", "Rendering HTML");

            string url_options = currentMode.URL_Options();
            if (url_options.Length > 0)
                url_options = "?" + url_options;

            if (invalidItem)
            {
                Output.WriteLine("<span class=\"UfdcGeneralError\">");
                Output.WriteLine("  <br /><br />");
                Output.WriteLine("  The item indicated was not valid.");
                Output.WriteLine("  <br /><br />");

                Output.WriteLine("  Click <a href=\"" + currentMode.Base_URL + "contact\">here</a> to report an error.");
                Output.WriteLine("  <br /><br /><br /><br />");
                Output.WriteLine("</span>");
                Output.WriteLine();
            }
            else
            {
                Output.WriteLine("<br />");
                Output.WriteLine("<div class=\"SobekHomeText\">");
                Output.WriteLine("<table width=\"700\" border=\"0\" align=\"center\">");
                Output.WriteLine("  <tr>");
                Output.WriteLine("    <td align=\"center\" >");
                string error_message = "Unknown error occurred";
                if ((currentMode != null) && (currentMode.Error_Message.Length > 0))
                {
                    error_message = currentMode.Error_Message;
                }

                Output.WriteLine("      <b><h4>" + error_message + "</h4></b>");
                Output.WriteLine("      <h5>We apologize for the inconvenience.</h5>");
                Output.WriteLine("      <h5>Click <a href=\"" + currentMode.Base_URL + url_options + "\">here</a> to return to the library.</h5>");
                string returnurl = currentMode.Base_URL + "contact?em=" + error_message.Replace(" ", "%20") + currentMode.URL_Options();
                Output.WriteLine("      <h5>Click <a href=\"" + returnurl + "\">here</a> to report the problem.</h5>");
                Output.WriteLine("    </td>");
                Output.WriteLine("  </tr>");
                Output.WriteLine("</table>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("</div>");
            }

            return true;
        }
    }
}
