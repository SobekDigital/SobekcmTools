#region Using directives

using System;
using System.Data;
using System.IO;
using SobekCM.Library.Aggregations;
using SobekCM.Library.Application_State;
using SobekCM.Library.Configuration;
using SobekCM.Library.Database;
using SobekCM.Library.Navigation;

#endregion

namespace SobekCM.Library.HTML
{
    /// <summary> Statistics html subwriter renders all the basic statistics pages, such as the number of items per
    /// aggregation, usage statistics, and recent searches. </summary>
    /// <remarks> This class extends the <see cref="abstractHtmlSubwriter"/> abstract class. </remarks>
    public class Statistics_HtmlSubwriter : abstractHtmlSubwriter
    {
        private readonly Aggregation_Code_Manager codeManager;
        private readonly object searches;
        private readonly Statistics_Dates statsDates;

        /// <summary> Constructor for a new instance of the Statistics_HtmlSubwriter class </summary>
        /// <param name="Search_History"> List of recent searches performed against this digital library </param>
        /// <param name="Code_Manager"> List of valid collection codes, including mapping from the Sobek collections to Greenstone collections</param>
        /// <param name="Stats_Date_Range"> Object contains the start and end dates for the statistical data in the database </param>
        /// <remarks> The search history is passed in as an object to avoid the cost of casting to the correct object given that this may be
        /// a standard stats call and not require using the search history object </remarks>
        public Statistics_HtmlSubwriter(object Search_History, Aggregation_Code_Manager Code_Manager, Statistics_Dates Stats_Date_Range)
        {
            searches = Search_History;
            statsDates = Stats_Date_Range;
            codeManager = Code_Manager;
        }

        /// <summary> Writes the HTML generated by this statistical html subwriter directly to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        /// <returns> TRUE -- Value indicating if html writer should finish the page immediately after this, or if there are other controls or routines which need to be called first </returns>
        public override bool Write_HTML(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.Write_HTML", "Rendering HTML");

            // If this is a robot request, deny certain options
            Statistics_Type_Enum type = currentMode.Statistics_Type;
            if (currentMode.Is_Robot)
            {
                if ((type == Statistics_Type_Enum.Usage_Item_Views_By_Date) || (type == Statistics_Type_Enum.Usage_Collection_History) ||
                    (type == Statistics_Type_Enum.Usage_Collections_By_Date) || (type == Statistics_Type_Enum.Usage_Collection_History_Text) ||
                    (type == Statistics_Type_Enum.Usage_By_Date_Text) || (type == Statistics_Type_Enum.Usage_Items_By_Collection))
                {
                    currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Overall;
                    type = Statistics_Type_Enum.Usage_Overall;
                }
            }

            string title = currentMode.SobekCM_Instance_Abbreviation.ToUpper() + " HOME";
            string item_count = "ITEM COUNT";
            const string usage = "USAGE STATISTICS";
            string item_count_title = "Resource Count in " + currentMode.SobekCM_Instance_Abbreviation;
            string recent_searches = "RECENT SEARCHES";
            string recent_searches_title = "Recent Searches in " + currentMode.SobekCM_Instance_Abbreviation;
            string usage_title = "Usage Statistics for " + currentMode.SobekCM_Instance_Abbreviation;

            if (currentMode.Language == Web_Language_Enum.Spanish)
            {
                title = "INICIO";
                item_count = "NUMERO DE OBJETOS";
                item_count_title = "Numero de Recursos en " + currentMode.SobekCM_Instance_Abbreviation;
                recent_searches = "BÚSQUEDAS RECIENTES";
                recent_searches_title = "Búsquedas Recientes en " + currentMode.SobekCM_Instance_Abbreviation;
            }

            if (currentMode.Language == Web_Language_Enum.French)
            {
                title = "PAGE D'ACCUEIL";
                item_count = "NOMBRE DE DOCUMENTS";
                item_count_title = "Nombre de Ressources en " + currentMode.SobekCM_Instance_Abbreviation;
                recent_searches = "RECHERCHES RÉCENTES";
                recent_searches_title = "Recherches Récentes en " + currentMode.SobekCM_Instance_Abbreviation;
            }

            // Save the current type
            Output.WriteLine("<div class=\"ViewsBrowsesRow\">");

            currentMode.Mode = Display_Mode_Enum.Aggregation_Home;
            Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + title + Unselected_Tab_End + "</a>");
            currentMode.Mode = Display_Mode_Enum.Statistics;

            string stat_title = String.Empty;
            if ((type == Statistics_Type_Enum.Item_Count_Standard_View) || (type == Statistics_Type_Enum.Item_Count_Growth_View) || ( type == Statistics_Type_Enum.Item_Count_Text ) || ( type == Statistics_Type_Enum.Item_Count_Arbitrary_View ))
            {
                Output.WriteLine("  " + Selected_Tab_Start + item_count + Selected_Tab_End );
                stat_title = item_count_title;
            }
            else
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Item_Count_Standard_View;
                Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + item_count + Unselected_Tab_End + "</a>");     
            }

            if ((type == Statistics_Type_Enum.Usage_Item_Views_By_Date) || (type == Statistics_Type_Enum.Usage_Overall) ||
                (type == Statistics_Type_Enum.Usage_Collection_History ) || ( type == Statistics_Type_Enum.Usage_Collections_By_Date ) ||
                ( type == Statistics_Type_Enum.Usage_Definitions ) || ( type == Statistics_Type_Enum.Usage_Collection_History_Text ) ||
                ( type == Statistics_Type_Enum.Usage_By_Date_Text ) || ( type == Statistics_Type_Enum.Usage_Items_By_Collection ))
            {
                Output.WriteLine("  " + Selected_Tab_Start + usage + Selected_Tab_End);
                stat_title = usage_title;
            }
            else
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Overall;
                Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + usage + Unselected_Tab_End + "</a>");
            }

            // Robots do not get to index the recent searches
            if (!currentMode.Is_Robot)
            {
                if (type == Statistics_Type_Enum.Recent_Searches)
                {
                    Output.WriteLine("  " + Selected_Tab_Start + recent_searches + Selected_Tab_End);
                    stat_title = recent_searches_title;
                }
                else
                {
                    currentMode.Statistics_Type = Statistics_Type_Enum.Recent_Searches;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + recent_searches + Unselected_Tab_End + "</a>");
                }
            }
            currentMode.Statistics_Type = type;
            Output.WriteLine("</div>");  
            Output.WriteLine();

            Output.WriteLine("<div class=\"SobekSearchPanel\">");
            Output.WriteLine("  <h1>" + stat_title + "</h1>");
            Output.WriteLine("</div>");



            // Add the sub options for item count
            if ((type == Statistics_Type_Enum.Item_Count_Standard_View) || (type == Statistics_Type_Enum.Item_Count_Growth_View) ||
                ( type == Statistics_Type_Enum.Item_Count_Text ) || ( type == Statistics_Type_Enum.Item_Count_Arbitrary_View ))
            {
                // Create the strings for the sub views
                const string standardView = "STANDARD VIEW";
                const string fytdView = "FYTD GROWTH VIEW";
                const string arbitraryView = "ARBITRARY DATES";

                Output.WriteLine("<div class=\"ShowSelectRow\">");
                if (type == Statistics_Type_Enum.Item_Count_Standard_View)
                {
                    Output.WriteLine(Down_Selected_Tab_Start + standardView + Down_Selected_Tab_End );
                }
                else
                {
                    currentMode.Statistics_Type = Statistics_Type_Enum.Item_Count_Standard_View;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + standardView + Down_Tab_End + "</a>");
                    currentMode.Statistics_Type = type;
                }

                if (type == Statistics_Type_Enum.Item_Count_Growth_View)
                {
                    Output.WriteLine(Down_Selected_Tab_Start + fytdView + Down_Selected_Tab_End);
                }
                else
                {
                    currentMode.Statistics_Type = Statistics_Type_Enum.Item_Count_Growth_View;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + fytdView + Down_Tab_End + "</a>");
                    currentMode.Statistics_Type = type;
                }

                if (currentMode.Internal_User)
                {
                    if (type == Statistics_Type_Enum.Item_Count_Arbitrary_View)
                    {
                        Output.WriteLine(Down_Selected_Tab_Start + arbitraryView + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Statistics_Type = Statistics_Type_Enum.Item_Count_Arbitrary_View;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + arbitraryView + Down_Tab_End + "</a>");
                        currentMode.Statistics_Type = type;
                    }
                }
                Output.WriteLine("</div>");
            }

            // Add the sub options for usage
            if ((type == Statistics_Type_Enum.Usage_Item_Views_By_Date) || (type == Statistics_Type_Enum.Usage_Overall) ||
                (type == Statistics_Type_Enum.Usage_Collection_History) || (type == Statistics_Type_Enum.Usage_Collections_By_Date) ||
                (type == Statistics_Type_Enum.Usage_Definitions) || ( type == Statistics_Type_Enum.Usage_By_Date_Text ) ||
                ( type == Statistics_Type_Enum.Usage_Collection_History_Text ) || ( type == Statistics_Type_Enum.Usage_Items_By_Collection ) ||
                ( type == Statistics_Type_Enum.Usage_Titles_By_Collection ))
            {
                // Create the strings for the sub views
                const string overall = "OVERALL STATS";
                const string collectionsDate = "COLLECTIONS BY DATE";
                const string itemsDate = "ITEM VIEWS BY DATE";
                const string collectionHistory = "COLLECTION HISTORY";
                const string itemsByCollection = "TOP TITLES";
                const string definitions = "DEFINITIONS";

                Output.WriteLine("<div class=\"ShowSelectRow\">");
                if (type == Statistics_Type_Enum.Usage_Overall)
                {
                    Output.WriteLine(Down_Selected_Tab_Start + overall + Down_Selected_Tab_End);
                }
                else
                {
                    currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Overall;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + overall + Down_Tab_End + "</a>");
                    currentMode.Statistics_Type = type;
                }

                // Robots do not get the next four options
                if (!currentMode.Is_Robot)
                {
                    if (type == Statistics_Type_Enum.Usage_Collections_By_Date)
                    {
                        Output.WriteLine(Down_Selected_Tab_Start + collectionsDate + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collections_By_Date;
                        if ((currentMode.Info_Browse_Mode.Length == 12) && (type == Statistics_Type_Enum.Usage_Item_Views_By_Date))
                        {
                            Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + collectionsDate + Down_Tab_End + "</a>");
                        }
                        else
                        {
                            Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + collectionsDate + Down_Tab_End + "</a>");
                        }
                        currentMode.Statistics_Type = type;
                    }

                    if (type == Statistics_Type_Enum.Usage_Item_Views_By_Date)
                    {
                        Output.WriteLine(Down_Selected_Tab_Start + itemsDate + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Item_Views_By_Date;
                        if ((currentMode.Info_Browse_Mode.Length == 12) && (type == Statistics_Type_Enum.Usage_Collections_By_Date))
                        {
                            Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + itemsDate + Down_Tab_End + "</a>");
                        }
                        else
                        {
                            Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + itemsDate + Down_Tab_End + "</a>");
                        }

                        currentMode.Statistics_Type = type;
                    }

                    if (type == Statistics_Type_Enum.Usage_Collection_History)
                    {
                        Output.WriteLine(Down_Selected_Tab_Start + collectionHistory + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collection_History;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + collectionHistory + Down_Tab_End + "</a>");
                        currentMode.Statistics_Type = type;
                    }

                    if ((type == Statistics_Type_Enum.Usage_Items_By_Collection) || ( type == Statistics_Type_Enum.Usage_Titles_By_Collection ))
                    {
                        Output.WriteLine(Down_Selected_Tab_Start + itemsByCollection + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Titles_By_Collection;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + itemsByCollection + Down_Tab_End + "</a>");
                        currentMode.Statistics_Type = type;
                    }
                }

                if (type == Statistics_Type_Enum.Usage_Definitions)
                {
                    Output.WriteLine(Down_Selected_Tab_Start + definitions + Down_Selected_Tab_End);
                }
                else
                {
                    currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Definitions;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + definitions + Down_Tab_End + "</a>");
                    currentMode.Statistics_Type = type;
                }

                Output.WriteLine("</div>");
            }
            currentMode.Statistics_Type = type;

            Output.WriteLine("<br />");
            Output.WriteLine("");

            int start_month = statsDates.Earliest_Month;
            int start_year = statsDates.Earliest_Year;
            int end_month = statsDates.Latest_Month;
            int end_year = statsDates.Latest_Year;
            if ((type == Statistics_Type_Enum.Usage_Collections_By_Date) || (type == Statistics_Type_Enum.Usage_Item_Views_By_Date) || (type == Statistics_Type_Enum.Usage_By_Date_Text))
            {
                if (currentMode.Info_Browse_Mode.Length == 12)
                {
                    Int32.TryParse(currentMode.Info_Browse_Mode.Substring(0, 4), out start_year);
                    Int32.TryParse(currentMode.Info_Browse_Mode.Substring(4, 2), out start_month);
                    Int32.TryParse(currentMode.Info_Browse_Mode.Substring(6, 4), out end_year);
                    Int32.TryParse(currentMode.Info_Browse_Mode.Substring(10, 2), out end_month);

                    if (start_year > end_year)
                    {
                        int save_year = start_year;
                        int save_month = start_month;
                        start_year = end_year;
                        start_month = end_month;
                        end_year = save_year;
                        end_month = save_month;
                    }

                    if ((start_year == end_year) && (end_month < start_month))
                    {
                        int save_month2 = start_month;
                        start_month = end_month;
                        end_month = save_month2;
                    }
                }
            }



            switch (type)
            {

                case Statistics_Type_Enum.Usage_Definitions:
                    add_usage_definitions(Output, Tracer);
                    break;

                case Statistics_Type_Enum.Item_Count_Standard_View:
                    add_item_count_html(Output, false, Tracer);
                    break;

                case Statistics_Type_Enum.Item_Count_Growth_View:
                    add_item_count_html(Output, true, Tracer);
                    break;

                case Statistics_Type_Enum.Item_Count_Arbitrary_View:
                    add_item_count_arbitrary_html(Output, Tracer);
                    break;

                case Statistics_Type_Enum.Item_Count_Text:
                    add_item_count_textual(Output, true, Tracer);
                    break;

                case Statistics_Type_Enum.Recent_Searches:
                    if (searches != null)
                    {
                        Output.WriteLine(((Recent_Searches)searches).ToHTML( currentMode.Language));
                    }
                    Output.WriteLine("<br />");
                    Output.WriteLine();
                    break;

                case Statistics_Type_Enum.Usage_Overall:
                    add_overall_usage(Output, Tracer);
                    break;

                case Statistics_Type_Enum.Usage_Collection_History:
                    string collection = currentMode.Info_Browse_Mode.ToUpper();
                    if ((collection.Length == 0) || (!codeManager.isValidCode(collection)))
                        collection = "AFRICA1";
                    add_collection_history(Output, collection, SobekCM_Database.Get_Aggregation_Statistics_History(collection, Tracer), Tracer);
                    break;

                case Statistics_Type_Enum.Usage_Items_By_Collection:
                    string collection2 = currentMode.Info_Browse_Mode.ToUpper();
                    if ((collection2.Length == 0) || (!codeManager.isValidCode(collection2)))
                        collection2 = "AFRICA1";
                    add_items_by_collection(Output, collection2, Tracer);
                    break;

                case Statistics_Type_Enum.Usage_Titles_By_Collection:
                    string collection5 = currentMode.Info_Browse_Mode.ToUpper();
                    if ((collection5.Length == 0) || (!codeManager.isValidCode(collection5)))
                        collection5 = "AFRICA1";
                    add_titles_by_collection(Output, collection5, Tracer);
                    break;

                case Statistics_Type_Enum.Usage_Collection_History_Text:
                    string collection_text = currentMode.Info_Browse_Mode.ToUpper();
                    if (((collection_text.Length == 0) || (!codeManager.isValidCode(collection_text))) && (collection_text.ToUpper() != "ALL"))
                        collection_text = "AFRICA1";
                    add_collection_history_text(Output, collection_text, SobekCM_Database.Get_Aggregation_Statistics_History(collection_text, Tracer), Tracer);
                    break;

               case Statistics_Type_Enum.Usage_Collections_By_Date:
                    DataTable by_date = SobekCM_Database.Statistics_By_Date_Range(start_year, start_month, end_year, end_month, Tracer);
                    add_collections_by_date(Output, by_date, start_month, start_year, end_month, end_year, Tracer);
                    break;

               case Statistics_Type_Enum.Usage_Item_Views_By_Date:
                    DataTable by_date2 = SobekCM_Database.Statistics_By_Date_Range(start_year, start_month, end_year, end_month, Tracer);
                    add_item_views_by_date(Output, by_date2, start_month, start_year, end_month, end_year, Tracer);
                    break;

                case Statistics_Type_Enum.Usage_By_Date_Text:
                    DataTable by_date3 = SobekCM_Database.Statistics_By_Date_Range(start_year, start_month, end_year, end_month, Tracer);
                    add_usage_by_date_text(Output, by_date3, start_month, start_year, end_month, end_year, Tracer);
                    break;
            }

            return true;
        }

        private static string Month_From_Int(int Month_Int)
        {
            string monthString1 = "Invalid";
            switch (Month_Int)
            {
                case 1:
                    monthString1 = "January";
                    break;

                case 2:
                    monthString1 = "February";
                    break;

                case 3:
                    monthString1 = "March";
                    break;

                case 4:
                    monthString1 = "April";
                    break;

                case 5:
                    monthString1 = "May";
                    break;

                case 6:
                    monthString1 = "June";
                    break;

                case 7:
                    monthString1 = "July";
                    break;

                case 8:
                    monthString1 = "August";
                    break;

                case 9:
                    monthString1 = "September";
                    break;

                case 10:
                    monthString1 = "October";
                    break;

                case 11:
                    monthString1 = "November";
                    break;

                case 12:
                    monthString1 = "December";
                    break;
            }
            return monthString1;
        }

        #region Method to add the list of most used items by collection

        private void add_items_by_collection(TextWriter Output, string Collection, Custom_Tracer Tracer)
        {
            DataSet itemsListSet;
            if (codeManager.isValidCode(Collection))
            {
                itemsListSet = SobekCM_Database.Statistics_Aggregation_Titles(Collection, Tracer);
            }
            else
            {
                Collection = codeManager.All_Aggregations[0].Code;
                itemsListSet = SobekCM_Database.Statistics_Aggregation_Titles(Collection, Tracer);
            }
            DataTable itemsList = itemsListSet.Tables[0];

            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;

            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_items_by_collection", "Rendering HTML");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>The most commonly accessed items by collection appear below.</p>");

            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Definitions;
            Output.WriteLine("<p>The <a href=\"" + currentMode.Redirect_URL() + "\">Definitions page</a> provides more details about the statistics and words used below.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Items_By_Collection;
            Output.WriteLine();
            Output.WriteLine("<h2>Selected Collection</h2>");
            Output.WriteLine("<p>The most commonly accessed items below are displayed is for the following collection:</p>");
            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:collection_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"collection_selector\" class=\"SobekStatsCollectionSelector\">");

            string collection_lower = Collection.ToLower();
            foreach (Item_Aggregation_Related_Aggregations thisAggr in codeManager.All_Aggregations)
            {
                if (thisAggr.Code == collection_lower)
                {
                    Output.WriteLine("      <option value=\"" + thisAggr.Code + "\" selected=\"selected\" >" + thisAggr.ShortName.Replace("&", "&amp;").Replace("\"", "&quot;") + " ( " + thisAggr.Code + " ) </option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + thisAggr.Code + "\">" + thisAggr.ShortName.Replace("&", "&amp;").Replace("\"", "&quot;") + " ( " + thisAggr.Code + " ) </option>");
                }
            }
            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Range\" class=\"go_button\" onclick=\"collection_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the collection shown, choose the collection above and hit the GO button.</p>");
            Output.WriteLine();
            Output.WriteLine("<h2>Most Accessed Items</h2>");
            Output.WriteLine("<p>The data below shows the most commonly accessed items within the collection above.</p>");

            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Titles_By_Collection;
            Output.WriteLine("<p><a href=\"" + currentMode.Redirect_URL() + "\">Click here to view the most commonly accessed TITLES</a>.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Items_By_Collection;


            Output.WriteLine("<center>");
            Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th width=\"90px\"><span style=\"color: White\">BIBID</span></th>");
            Output.WriteLine("    <th width=\"50px\"><span style=\"color: White\">VID</span></th>");
            Output.WriteLine("    <th width=\"430px\"><span style=\"color: White\">TITLE</span></th>");
            Output.WriteLine("    <th width=\"90px\" align=\"right\"><span style=\"color: White\">VIEWS</span></th>");
            Output.WriteLine("  </tr>");

            if (itemsList != null)
            {
                int itemCount = 0;
                foreach (DataRow thisRow in itemsList.Rows)
                {
                    if (itemCount == 100)
                        break;

                    Output.WriteLine("  <tr align=\"left\" >");
                    Output.WriteLine("    <td>" + thisRow[0] + "</td>");
                    Output.WriteLine("    <td>" + thisRow[1] + "</td>");
                    Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[0] + "/" + thisRow[1] + "\">" + thisRow[2].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                    Output.WriteLine("    <td align=\"right\">" + thisRow[3] + "</td>");
                    Output.WriteLine("  </tr>");
                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"4\"></td></tr>");
                    itemCount++;
                }
            }

            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<br /> <br />");
            Output.WriteLine("</div>");
        }
        

        #endregion

        #region Method to add the list of most used titles by collection

        private void add_titles_by_collection(TextWriter Output, string Collection, Custom_Tracer Tracer)
        {
            DataSet itemsListSet;
            if (codeManager.isValidCode(Collection))
            {
                itemsListSet = SobekCM_Database.Statistics_Aggregation_Titles(Collection, Tracer);
            }
            else
            {
                Collection = codeManager.All_Aggregations[0].Code;
                itemsListSet = SobekCM_Database.Statistics_Aggregation_Titles(Collection, Tracer);
            }
            DataTable titleList = itemsListSet.Tables[1];

            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;

            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_titles_by_collection", "Rendering HTML");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>The most commonly utilized titles by collection appear below.</p>");

            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Definitions;
            Output.WriteLine("<p>The <a href=\"" + currentMode.Redirect_URL() + "\">Definitions page</a> provides more details about the statistics and words used below.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Items_By_Collection;
            Output.WriteLine();
            Output.WriteLine("<h2>Selected Collection</h2>");
            Output.WriteLine("<p>The most commonly accessed titles below are displayed is for the following collection:</p>");
            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:collection_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"collection_selector\" class=\"SobekStatsCollectionSelector\">");

            string collection_lower = Collection.ToLower();
            foreach (Item_Aggregation_Related_Aggregations thisAggr in codeManager.All_Aggregations)
            {
                if (thisAggr.Code == collection_lower)
                {
                    Output.WriteLine("      <option value=\"" + thisAggr.Code + "\" selected=\"selected\" >" + thisAggr.ShortName.Replace("&", "&amp;").Replace("\"", "&quot;") + " ( " + thisAggr.Code + " ) </option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + thisAggr.Code + "\">" + thisAggr.ShortName.Replace("&", "&amp;").Replace("\"", "&quot;") + " ( " + thisAggr.Code + " ) </option>");
                }
            }
            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Range\" class=\"go_button\" onclick=\"collection_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the collection shown, choose the collection above and hit the GO button.</p>");
            Output.WriteLine();
            Output.WriteLine("<h2>Most Accessed Titles</h2>");
            Output.WriteLine("<p>The data below shows the most commonly accessed titles within the collection above.</p>");

            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Items_By_Collection;
            Output.WriteLine("<p><a href=\"" + currentMode.Redirect_URL() + "\">Click here to view the most commonly accessed ITEMS</a>.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Titles_By_Collection;


            Output.WriteLine("<center>");
            Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th width=\"90px\"><span style=\"color: White\">BIBID</span></th>");
            Output.WriteLine("    <th width=\"480px\"><span style=\"color: White\">TITLE</span></th>");
            Output.WriteLine("    <th width=\"90px\" align=\"right\"><span style=\"color: White\">VIEWS</span></th>");
            Output.WriteLine("  </tr>");

            if (titleList != null)
            {
                int itemCount = 0;
                foreach (DataRow thisRow in titleList.Rows)
                {
                    if (itemCount == 100)
                        break;

                    Output.WriteLine("  <tr align=\"left\" >");
                    Output.WriteLine("    <td>" + thisRow[0] + "</td>");
                    Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[0] + "\">" + thisRow[1].ToString().Replace("&", "&amp;").Replace("\"","&quot;") + "</a></td>");
                    Output.WriteLine("    <td align=\"right\">" + thisRow[2] + "</td>");
                    Output.WriteLine("  </tr>");
                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"3\"></td></tr>");
                    itemCount++;
                }
            }

            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<br /> <br />");
            Output.WriteLine("</div>");
        }


        #endregion

        #region Method to add the usage defintions

        private void add_usage_definitions(TextWriter Output, Custom_Tracer Tracer)
        {
            // See if the FAQ is present for this collection
            string directory = SobekCM_Library_Settings.Base_Design_Location + "\\extra\\stats";
            string usage_definitions = String.Empty;
            if (Directory.Exists(directory))
            {
                if (File.Exists(directory + "\\stats_usage_definitions.txt"))
                {
                    Tracer.Add_Trace("Statistics_HtmlSubwriter.add_usage_definitions", "Loading usage definitions");

                    try
                    {
                        StreamReader faq_reader = new StreamReader(directory + "\\stats_usage_definitions.txt");
                        usage_definitions = faq_reader.ReadToEnd();
                        faq_reader.Close();
                    }
                    catch(Exception)
                    {
                        // Do nothing here since the default usage will be used if this fails.
                    }
                }
            }

            if (usage_definitions.Length > 0)
            {
                string urloptions = currentMode.URL_Options();
                if (urloptions.Length > 0)
                    urloptions = "?" + urloptions;
                
                Tracer.Add_Trace("Statistics_HtmlSubwriter.add_usage_definitions", "Rendering HTML read from source file");
                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine(usage_definitions.Replace("<%BASEURL%>", currentMode.Base_URL).Replace("<%?URLOPTS%>", urloptions));
                Output.WriteLine("</div>");

            }
            else
            {
                Tracer.Add_Trace("Statistics_HtmlSubwriter.add_usage_definitions", "Rendering Default HTML");
                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine("<p>The following terms are defined below:</p>");

                Output.WriteLine("<table width=\"600px\" border=\"0\" align=\"center\">");
                Output.WriteLine("  <tr>");
                Output.WriteLine("    <td><a href=\"#Collection_Hierarchy\">Collection Hierarchy</a></td>");
                Output.WriteLine("    <td><a href=\"#Collection_Groups\">Collection Groups</a></td>");
                Output.WriteLine("    <td><a href=\"#Collections\">Collections</a></td>");
                Output.WriteLine("  </tr>");
                Output.WriteLine("  <tr>");
                Output.WriteLine("    <td><a href=\"#SubCollections\">SubCollections</a></td>");
                Output.WriteLine("    <td><a href=\"#Views\">Views</a></td>");
                Output.WriteLine("    <td><a href=\"#Visits\">Visits</a></td>");
                Output.WriteLine("  </tr>");
                Output.WriteLine("  <tr>");
                Output.WriteLine("    <td><a href=\"#Main_Pages\">Main Pages</a></td>");
                Output.WriteLine("    <td><a href=\"#Browses\">Browses</a></td>");
                Output.WriteLine("    <td><a href=\"#Titles_Items\">Titles and Items</a></td>");
                Output.WriteLine("  </tr>");
                Output.WriteLine("  <tr>");
                Output.WriteLine("    <td><a href=\"#Title_Views\">Title Views</a></td>");
                Output.WriteLine("    <td><a href=\"#Item_Views\">Item Views</a></td>");
                Output.WriteLine("    <td><a href=\"#Citation_Views\">Citation Views</a></td>");
                Output.WriteLine("  </tr>");
                Output.WriteLine("  <tr>");
                Output.WriteLine("    <td><a href=\"#Text_Searches\">Text Searches</a></td>");
                Output.WriteLine("    <td><a href=\"#Static_Views\">Static Views</a></td>");
                Output.WriteLine("    <td>&nbsp;</td>");
                Output.WriteLine("  </tr>");
                Output.WriteLine("</table>");

                Output.WriteLine("<h2>Defined Terms</h2>");
                Output.WriteLine();

                Output.WriteLine("<a name=\"Collection_Hierarchy\" ></a>");
                Output.WriteLine("<h3>COLLECTION HIERARCHY</h3>");
                Output.WriteLine("<p>Collections are organized by Collection Groups, which contain Collections and Collections contain Subcollections. This hierarchical organization allows for general searches and browses at the Collection Group level and for granular searches at the Collection level for optimum usability for multiple user needs. <br /><br />");
                Output.WriteLine("In reading the statistics by Collection, views and searches done from the main page and the Collection Group pages are not within collections and so are not included in the Collection statistics.</p>");

                Output.WriteLine("<a name=\"Collection_Groups\" ></a>");
                Output.WriteLine("<h3>COLLECTION GROUPS</h3>");
                Output.WriteLine("<p>Collection groups are aggregations of collections in this library. The Collection Groups simplify searching across multiple Collections simultaneously. Collection Groups also connect less tightly related materials to increase the likelihood for serendipity, where users may be searching for one topic and may easily stumble across something related and critically useful that they had not considered. Thus, Collection Groups are usually constructed topically. <br /><br />");
                Output.WriteLine("As an aggregate, views at the Collection Group level do not count toward any particular Collection and are not included in the Collection based statistics.</p>");

                Output.WriteLine("<a name=\"Collections\" ></a>");
                Output.WriteLine("<h3>COLLECTIONS</h3>");
                Output.WriteLine("<p>Collections are the main method for defining and collecting related materials and are the most familiar hierarchical structures for subject specialists, partners, and other internal users. A single Collection can exist in several Collection Groups, and a single Collection can have many subcollections.  <br /><br />");
                Output.WriteLine("A single item may be in several Collections, but one Collection is always selected as primary so all item views will be within a single Collection. </p>");

                Output.WriteLine("<a name=\"SubCollections\" ></a>");
                Output.WriteLine("<h3>SUBCOLLECTIONS</h3>");
                Output.WriteLine("<p>The smallest collected unit is the Subcollection. A single item can belong to several Subcollections under the same collection, or to multiple Collections and to Subcollections within each Collection. <br /><br />");
                Output.WriteLine("Because all Subcollection items will have a primary Collection, the usage statistics for Subcollections are also included in the Collection usage statistics. </p>");

                Output.WriteLine("<a name=\"Views\" ></a>");
                Output.WriteLine("<h3>VIEWS</h3>");
                Output.WriteLine("<p>Views are the actual page hits. Each time a person goes to " + currentMode.SobekCM_Instance_Abbreviation + " it counts as a view. The " + currentMode.SobekCM_Instance_Abbreviation + " statistics are cleaned so that views from robots, which search engines use to index websites, are removed. If they were not removed, the views on all collections and items would be much higher. Web usage statistics are always somewhat fallible, and this is one of the means for ensuring better quality usage statistics. <br /><br />");
                Output.WriteLine("Some web statistics count &quot;page item downloads&quot; as views, which is highly inaccurate because each page has multiple items on it. For instance, the digital library main page, " + currentMode.SobekCM_Instance_Abbreviation + ", includes the page HTML and all of the images. If the statistics counted each page item download as a hit, each single view to the main page would be counted as over 30 page item downloads. To make matters more confusing, some digital repositories only offer PDF downloads for users to view items. Those digital repositories track &quot;item downloads&quot; and those are most equivalent to our statistics for usage by &quot;item.&quot; </p>");

                Output.WriteLine("<a name=\"Visits\" ></a>");
                Output.WriteLine("<h3>VISITS</h3>");
                Output.WriteLine("<p>Each time a person goes to this digital library it counts as a view, but that means a single user going to the site repeatedly can log a large number of views. Visits provide a better statistic for how many different unique users are using the site. Visits include all views from a particular IP address (the users computer web address when connected) as recorded in the web log file within an hour.  <br /><br />");
                Output.WriteLine("This is also a fallible statistic since users IP addresses are frequently reused on networks.  Connecting to free wireless means that network gives your computer an IP address, and then when you disconnect that IP address will be given to the next user who needs it. For a campus based resource with so many on campus users connecting through the VPN or from on campus, the margin for error increases for visit-based statistics. </p>");

                Output.WriteLine("<a name=\"Main_Pages\" ></a>");
                Output.WriteLine("<h3>MAIN PAGES</h3>");
                Output.WriteLine("<p>For each of the elements in the Collection Hierarchy, the main pages are the home or landing pages, the search pages, the contact pages, and any other supplemental pages.  <br /><br />");
                Output.WriteLine("When users conduct a search through the Collection pages and view the results, those search result pages are also included in the main pages. Once a user clicks on one of the items in the search results, that item is not one of the main pages. The views for search results by thumbnail, table, and brief modes are all included in the main pages for the Collection.</p>");

                Output.WriteLine("<a name=\"Browses\" ></a>");
                Output.WriteLine("<h3>BROWSES</h3>");
                Output.WriteLine("<p>Browses include views against standard browses, such as <i>All Items</i> and <i>New Items</i> (when available).  It also includes all views of non-standard browses.</p>");

                Output.WriteLine("<a name=\"Search_Results\" ></a>");
                Output.WriteLine("<h3>SEARCH RESULTS</h3>");
                Output.WriteLine("<p>Search result views includes every view of a section of search results, and includes searches which returned zero results.</p>");

                Output.WriteLine("<a name=\"Titles_Items\" ></a>");
                Output.WriteLine("<h3>TITLES & ITEMS</h3>");
                Output.WriteLine("<p>Titles are for single bibliographic units, like a book or a newspaper. Items are the volumes within titles. Thus, one book may have one title and one item where one newspaper may have one title and thousands of items.  <br /><br />");
                Output.WriteLine("Titles with only one item (or volume) appear functionally equivalent to users. However for items like newspapers, a single title may correspond to thousands of items. <br /><br />");
                Output.WriteLine("Readers of the technical documentation and internal users know titles by their bibliographic identifier (BIBID) and items within each title by the BIBID plus the volume identifier (VID).</p>");

                Output.WriteLine("<a name=\"Title_Views\" ></a>");
                Output.WriteLine("<h3>TITLE VIEWS</h3>");
                Output.WriteLine("<p>Title views include all views at the title level.</p>");

                Output.WriteLine("<a name=\"Item_Views\" ></a>");
                Output.WriteLine("<h3>ITEM VIEWS</h3>");
                Output.WriteLine("<p>Item views include views at the item level only.</p>");

                Output.WriteLine("<a name=\"Citation_Views\" ></a>");
                Output.WriteLine("<h3>CITATION VIEWS</h3>");
                Output.WriteLine("<p>For each item, the default view is set to the page item (zoomable or static based on user selection and the availability of each of the views for that item). All items also include a Citation View that is not selected by default. The Citation Views counts the number of times a user chooses the Citation View for an item.</p>");

                Output.WriteLine("<a name=\"Text_Searches\" ></a>");
                Output.WriteLine("<h3>TEXT SEARCHES</h3>");
                Output.WriteLine("<p>Text searches are item-level searches within the text of a single document.  This returns the pages upon which the term or terms appear.</p>");

                Output.WriteLine("<a name=\"Static_Views\" ></a>");
                Output.WriteLine("<h3>STATIC VIEWS</h3>");
                Output.WriteLine("<p>For each item in this library, a static page is generated for search engines to index.  When an item appears in the search results in a standard search engine, the link forwards the user to the static page.  Any additional navigation moves the user into the dynamically generated pages within this library.  Attempts have been made to remove all the search engine indexing views from these numbers.  These numbers represent the number of users that entered this library from a search engine.</p>");
                Output.WriteLine("</div>");
            }
        }

        #endregion

        #region Method to add the by date range data as text

        private void add_usage_by_date_text(TextWriter Output, DataTable stats, int first_month, int first_year, int second_month, int second_year, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_usage_by_date_text", "Rendering HTML");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>Below is the collection and item-level details for your provided date range in comma-seperated value form.  To use the data below, cut and paste it into a CSV or text file.  The resulting file can be opened in a variety of applications, including OpenOffice and Microsoft Excel.</p>");
            Output.WriteLine("</div>");
            Output.WriteLine("<pre>");
            Output.WriteLine();
            Output.WriteLine("START DATE, END DATE, GROUP CODE, COLLECTION CODE, SUBCOLLECTION CODE, NAME, TOTAL VIEWS, VISITS, MAIN PAGES, BROWSES, SEARCH RESUTLS, TITLE VIEWS, ITEM VIEWS, JPEG VIEWS, ZOOMABLE VIEWS, CITATION VIEWS, THUMBNAIL VIEWS, TEXT SEARCHES, FLASH VIEWS, MAP VIEWS, DOWNLOAD VIEWS, STATIC VIEWS");

            if (stats != null)
            {
                // Get a couple totals
                int main_page_total = 0;
                int browses_total = 0;
                int search_results_total = 0;
                DataRow[] totalRows = stats.Select("Row_Type='z' and Item_Hits='0'");
                foreach (DataRow thisRow in totalRows)
                {
                    main_page_total += Convert.ToInt32(thisRow[7]) + Convert.ToInt32(thisRow[9]);
                    browses_total += Convert.ToInt32(thisRow[8]);
                    search_results_total += Convert.ToInt32(thisRow[10]);
                }

                // Now, add each line
                foreach (DataRow thisRow in stats.Rows)
                {
                    int main_pages = Convert.ToInt32(thisRow[7]) + Convert.ToInt32(thisRow[9]);


                    switch (thisRow[0].ToString())
                    {
                        case "g":
                            Output.Write(Month_From_Int(first_month) + " " + first_year + "," + Month_From_Int(second_month) + " " + second_year + ",");
                            Output.WriteLine(thisRow[1] + ",,," + thisRow[4].ToString().Replace("'", "").Replace("\"", "").Replace(",", "") + "," + thisRow[5] + "," + thisRow[6] + "," + main_pages + "," + thisRow[8] + "," + thisRow[10] + ",,,,,,,,,,,");
                            break;

                        case "c":
                            Output.Write(Month_From_Int(first_month) + " " + first_year + "," + Month_From_Int(second_month) + " " + second_year + ",");
                            Output.WriteLine(thisRow[1] + "," + thisRow[2] + ",," + thisRow[4].ToString().Replace("'", "").Replace("\"", "").Replace(",", "") + "," + thisRow[5] + "," + thisRow[6] + "," + main_pages + "," + thisRow[8] + "," + thisRow[10] + "," + thisRow[11] + "," + thisRow[12] + "," + thisRow[13] + "," + thisRow[14] + "," + thisRow[15] + "," + thisRow[16] + "," + thisRow[17] + "," + thisRow[18] + "," + thisRow[19] + "," + thisRow[20] + "," + thisRow[21]);
                            break;

                        case "s":
                            Output.Write(Month_From_Int(first_month) + " " + first_year + "," + Month_From_Int(second_month) + " " + second_year + ",");
                            Output.WriteLine(thisRow[1] + "," + thisRow[2] + "," + thisRow[3] + "," + thisRow[4].ToString().Replace("'", "").Replace("\"", "").Replace(",", "") + "," + thisRow[5] + "," + thisRow[6] + "," + main_pages + "," + thisRow[8] + "," + thisRow[10] + "," + thisRow[11] + "," + thisRow[12] + "," + thisRow[13] + "," + thisRow[14] + "," + thisRow[15] + "," + thisRow[16] + "," + thisRow[17] + "," + thisRow[18] + "," + thisRow[19] + "," + thisRow[20] + "," + thisRow[21]);
                            break;

                        case "z":
                            if (Convert.ToInt32(thisRow[11]) > 0)
                            {
                                Output.Write(Month_From_Int(first_month) + " " + first_year + "," + Month_From_Int(second_month) + " " + second_year + ",");
                                Output.WriteLine(currentMode.SobekCM_Instance_Abbreviation + ",,," + currentMode.SobekCM_Instance_Name + "," + thisRow[5] + "," + thisRow[6] + "," + main_page_total + "," + browses_total + "," + search_results_total + "," + thisRow[11] + "," + thisRow[12] + "," + thisRow[13] + "," + thisRow[14] + "," + thisRow[15] + "," + thisRow[16] + "," + thisRow[17] + "," + thisRow[18] + "," + thisRow[19] + "," + thisRow[20] + "," + thisRow[21]);
                            }
                            break;
                    }
                }
            }
            else
            {
                Output.WriteLine("NO STATISTICS FOUND FOR THAT DATE RANGE");
            }

            // Close out this text
            Output.WriteLine();
            Output.WriteLine("</pre>");
            Output.WriteLine("</td></tr></table>");
            Output.WriteLine("<br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to add items by date information

        private void add_item_views_by_date(TextWriter Output, DataTable stats, int first_month, int first_year, int second_month, int second_year, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_views_by_date", "Rendering HTML");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>Below are the details about the specialized views for items aggregated at the collection levels.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collections_By_Date;
            string range_string = first_year.ToString() + first_month.ToString().PadLeft(2, '0') + second_year.ToString() + second_month.ToString().PadLeft(2, '0');
            Output.WriteLine("<p>For the number of times collections were viewed or searched, see <a href=\"" + currentMode.Redirect_URL() + range_string + "\">Collections by Date</a>.");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Definitions;
            Output.WriteLine("The <a href=\"" + currentMode.Redirect_URL() + "\">Definitions page</a> provides more details about the statistics and words used below.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Item_Views_By_Date;
            Output.WriteLine();
            Output.WriteLine("<h2>Selected Date Range</h2>");
            Output.WriteLine();

            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;
            Output.WriteLine("<p>The usage for all items appears below for the following date range:</p>");

            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:date_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"date1_selector\" class=\"SobekStatsDateSelector\">");

            int select_month = statsDates.Earliest_Month;
            int select_year = statsDates.Earliest_Year;
            while ((select_month != statsDates.Latest_Month) || (select_year != statsDates.Latest_Year))
            {
                if ((first_month == select_month) && (first_year == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((first_month == select_month) && (first_year == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    To: <select name=\"date2_selector\" class=\"SobekStatsDateSelector\" >");

            select_month = statsDates.Earliest_Month;
            select_year = statsDates.Earliest_Year;
            while ((select_month != statsDates.Latest_Month) || (select_year != statsDates.Latest_Year))
            {
                if ((second_month == select_month) && (second_year == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((second_month == select_month) && (second_year == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }

            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Range\" class=\"go_button\" onclick=\"date_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the date shown, choose your dates above and hit the GO button.</p>");
            Output.WriteLine();
            Output.WriteLine("<h2>Summary by Collection</h2>");

            if ((stats != null) && (stats.Rows.Count > 0))
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_By_Date_Text;
                Output.WriteLine("<a href=\"" + currentMode.Redirect_URL() + range_string + "\"><i>Export as CSV</i></a>");
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Item_Views_By_Date;
            }

            if (stats == null)
            {
                Output.WriteLine("<center>");
                Output.WriteLine("<b>NO USAGE STATISTICS EXIST FOR YOUR SELECTION</b>");
                Output.WriteLine("</center>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("</div>");
                return;
            }

            Output.WriteLine("</div>");
            Output.WriteLine("</div> <!-- ends PageContainer div momentarily for this extra wide table -->");
            Output.WriteLine();

            Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" width=\"1215px\" class=\"statsTable2\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th width=\"70\"><span style=\"color: White\">GROUP<br />CODE</span></th>");
            Output.WriteLine("    <th width=\"70\"><span style=\"color: White\">COLL<br />CODE</span></th>");
            Output.WriteLine("    <th width=\"70\"><span style=\"color: White\">SUB<br />CODE</span></th>");
            Output.WriteLine("    <th width=\"280\"><span style=\"color: White\">NAME</span></th>");
            Output.WriteLine("    <th width=\"70px\" align=\"right\"><span style=\"color: White\">JPEG<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"90px\" align=\"right\"><span style=\"color: White\">ZOOMABLE<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"80px\" align=\"right\"><span style=\"color: White\">CITATION<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"90px\" align=\"right\"><span style=\"color: White\">THUMBNAIL<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"90px\" align=\"right\"><span style=\"color: White\">TEXT<br />SEARCHES</span></th>");
            Output.WriteLine("    <th width=\"70px\" align=\"right\"><span style=\"color: White\">FLASH<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"70px\" align=\"right\"><span style=\"color: White\">MAP<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"90px\" align=\"right\"><span style=\"color: White\">DOWNLOAD<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"75px\" align=\"right\"><span style=\"color: White\">STATIC<br />VIEWS</span></th>");
            Output.WriteLine("  </tr>");
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"13\"></td></tr>");

            // Now, add each line
            const int rule = 13;
            foreach (DataRow thisRow in stats.Rows)
            {
                if (Convert.ToBoolean(thisRow[5]))
                {
                    switch (thisRow[0].ToString())
                    {
                        case "g":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</span></td>");
                            Output.WriteLine("    <td align=\"right\" colspan=\"" + ( rule - 4 ) + "\">&nbsp;</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "c":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2] + "\">" + thisRow[2] + "</a></td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2] + "\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[13] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[14] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[15] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[16] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[17] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[18] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[19] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[20] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[21] + "</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "s":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[2] + "</span></td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3] + "\">" + thisRow[3] + "</a></td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3] + "\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[13] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[14] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[15] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[16] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[17] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[18] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[19] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[20] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[21] + "</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "z":
                            if (Convert.ToInt32(thisRow[7]) == 0)
                            {
                                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                                Output.WriteLine("    <td colspan=\"4\"><span style=\"color: White\">ALL ITEMS IN " + currentMode.SobekCM_Instance_Abbreviation + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[13] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[14] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[15] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[16] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[17] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[18] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[19] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[20] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[21] + "</span></td>");
                                Output.WriteLine("  </tr>");
                            }
                            break;
                    }
                }
            }

            Output.WriteLine("</table>");
            Output.WriteLine("<br /><br />");
            Output.WriteLine("<div id=\"pagecontainer_resumed\">");
        }

        #endregion

        #region Method to add collections by date information

        private void add_collections_by_date(TextWriter Output, DataTable stats, int first_month, int first_year, int second_month, int second_year, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_collections_by_date", "Rendering HTML");

            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>The data below shows details for the views that occurred at each level of the collection hierarchy (Collection Groups, Collections, SubCollections).</p>");
            Output.WriteLine("<p>These statistics show the number of times users:</p>");
            Output.WriteLine("<ul>");
            Output.WriteLine("  <li>navigated to the collection main pages</li>");
            Output.WriteLine("  <li>browsed the items or information about the collection</li>");

            Output.WriteLine("  <li>performed searches against the items contained in the collection</li>");
            Output.WriteLine("  <li>viewed titles and items contained within the collection</li>");
            Output.WriteLine("</ul>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Item_Views_By_Date;
            string range_string = first_year.ToString() + first_month.ToString().PadLeft(2, '0') + second_year.ToString() + second_month.ToString().PadLeft(2, '0');
            Output.WriteLine("<p>For the specialized item-level view details, see <a href=\"" + currentMode.Redirect_URL() + range_string + "\">Item Views by Date</a>.");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Definitions;
            Output.WriteLine("The <a href=\"" + currentMode.Redirect_URL() + "\">Definitions page</a> provides more details about the statistics and words used below.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collections_By_Date;
            Output.WriteLine();
            Output.WriteLine("<h2>Selected Date Range</h2>");
            Output.WriteLine("<p>The usage for all the collections appears below for the following data range:</p>");

            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:date_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"date1_selector\" class=\"SobekStatsDateSelector\" >");

            int select_month = statsDates.Earliest_Month;
            int select_year = statsDates.Earliest_Year;
            while ((select_month != statsDates.Latest_Month) || (select_year != statsDates.Latest_Year))
            {
                if ((first_month == select_month) && (first_year == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((first_month == select_month) && (first_year == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    To: <select name=\"date2_selector\" class=\"SobekStatsDateSelector\" >");

            select_month = statsDates.Earliest_Month;
            select_year = statsDates.Earliest_Year;
            while ((select_month != statsDates.Latest_Month) || (select_year != statsDates.Latest_Year))
            {
                if (( second_month == select_month) && (second_year == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((second_month == select_month) && (second_year == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }

            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Range\" class=\"go_button\" onclick=\"date_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the date shown, choose your dates above and hit the GO button.</p>");
            Output.WriteLine();
            Output.WriteLine("<h2>Summary by Collection</h2>");

            if ((stats != null) && (stats.Rows.Count > 0))
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_By_Date_Text;
                Output.WriteLine("<a href=\"" + currentMode.Redirect_URL() + range_string + "\"><i>Export as CSV</i></a>>");
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collections_By_Date;
            }
            Output.WriteLine("<br />");
            Output.WriteLine();

            if (stats == null)
            {
                Output.WriteLine("<center>");
                Output.WriteLine("<b>NO USAGE STATISTICS EXIST FOR YOUR SELECTION</b>");
                Output.WriteLine("</center>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("</div>");
                return;
            }

            Output.WriteLine("</div>");
            Output.WriteLine("</div> <!-- ends PageContainer div momentarily for this extra wide table -->");
            Output.WriteLine();

            Output.WriteLine("<center>");
            Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" width=\"1040px\" class=\"statsTable2\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th width=\"70\"><span style=\"color: White\">GROUP<br />CODE</span></th>");
            Output.WriteLine("    <th width=\"70\"><span style=\"color: White\">COLL<br />CODE</span></th>");
            Output.WriteLine("    <th width=\"70\"><span style=\"color: White\">SUB<br />CODE</span></th>");
            Output.WriteLine("    <th width=\"280\"><span style=\"color: White\">NAME</span></th>");
            Output.WriteLine("    <th width=\"70\" align=\"right\"><span style=\"color: White\">TOTAL<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">VISITS</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">MAIN<br />PAGES</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">BROWSES</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">SEARCH<br />RESULTS</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">TITLE<br />VIEWS</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">ITEM<br />VIEWS</span></th>");
            Output.WriteLine("  </tr>");
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"11\"></td></tr>");

            // Get the total number of item and title views
            DataRow[] total_rows = stats.Select("Row_Type='z'");
            int total_hits = 0;
            int total_sessions = 0;
            int title_hits = 0;
            int item_hits = 0;
            foreach (DataRow totalRow in total_rows)
            {
                if (Convert.ToInt32(totalRow[7]) == 0)
                {
                    total_hits = Convert.ToInt32(totalRow[5]);
                    total_sessions = Convert.ToInt32(totalRow[6]);
                    title_hits = Convert.ToInt32(totalRow[11]);
                    item_hits = Convert.ToInt32(totalRow[12]);
                }
            }


            // Now, add each line
            const int rule = 11;
            string last_group = String.Empty;
            foreach (DataRow thisRow in stats.Rows)
            {
                if (Convert.ToBoolean(thisRow[5]))
                {
                    int main_pages = Convert.ToInt32(thisRow[7]) + Convert.ToInt32(thisRow[9]);
                    switch (thisRow[0].ToString())
                    {
                        case "g":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[1] + "</span></td>");
                            last_group = thisRow[1].ToString();
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"","&quot;") + "</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[5] + "</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[6] + "</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + main_pages + "</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[8] + "</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[10] + "</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                            Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "c":
                            // Was there a group change (which occurs if the new group has no stats)
                            if (thisRow[1].ToString() != last_group)
                            {
                                // Insert a group row now
                                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                                Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[1] + "</span></td>");
                                last_group = thisRow[1].ToString();
                                Output.WriteLine("    <td>&nbsp;</td>");
                                Output.WriteLine("    <td>&nbsp;</td>");
                                Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[1] + " Collections</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">&nbsp;</span></td>");
                                Output.WriteLine("  </tr>");
                            }
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL  + thisRow[2] + "\">" + thisRow[2] + "</a></td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2] + "\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[5] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[6] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + main_pages + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[8] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[10] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[11] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[12] + "</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "s":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[2] + "</span></td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3] + "\">" + thisRow[3] + "</a></td>");
                            Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3] + "\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[5] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[6] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + main_pages + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[8] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[10] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[11] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[12] + "</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "z":
                            if (main_pages > 0)
                            {
                                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                                Output.WriteLine("    <td colspan=\"4\"><span style=\"color: White\">ALL COLLECTION GROUPS</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + total_hits + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + total_sessions + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + main_pages + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[8] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + thisRow[10] + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + title_hits + "</span></td>");
                                Output.WriteLine("    <td align=\"right\"><span style=\"color: White\">" + item_hits + "</span></td>");
                                Output.WriteLine("  </tr>");
                            }
                            break;
                    }
                }
            }

            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<br /><br />");
            Output.WriteLine("<div id=\"pagecontainer_resumed\">");

        }

        #endregion

        #region Method to add collection history as html

        private void add_collection_history(TextWriter Output, string Collection, DataTable statsCount, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_collection_history", "Rendering HTML");

            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>Usage history for a single collection is displayed below. This history includes views of the collection and views of the items within the collections.</p>");

            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Definitions;
            Output.WriteLine("<p>The <a href=\"" + currentMode.Redirect_URL() + "\">Definitions page</a> provides more details about the statistics and words used below.</p>");
            currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collection_History;
            Output.WriteLine("<h2>Selected Collection</h2>");
            Output.WriteLine("<p>The usage displayed is for the following collection:</p>");
            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:collection_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"collection_selector\" class=\"SobekStatsCollectionSelector\" >");

            string collection_lower = Collection.ToLower();
            foreach (Item_Aggregation_Related_Aggregations thisAggr in codeManager.All_Aggregations)
            {
                if (thisAggr.Code == collection_lower)
                {
                    Output.WriteLine("      <option value=\"" + thisAggr.Code + "\" selected=\"selected\" >" + thisAggr.ShortName.Replace("&", "&amp;").Replace("\"", "&quot;") + " ( " + thisAggr.Code + " ) </option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + thisAggr.Code + "\">" + thisAggr.ShortName.Replace("&","&amp;").Replace("\"","&quot;") + " ( " + thisAggr.Code + " ) </option>");
                }
            }

            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Collection\" class=\"go_button\" onclick=\"collection_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the collection shown, choose the collection above and hit the GO button.</p>");


            Output.WriteLine();
            Output.WriteLine("<h2>Collection Work_History</h2>");

            if ((statsCount != null) && (statsCount.Rows.Count > 0))
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collection_History_Text;
                Output.WriteLine("<a href=\"" + currentMode.Redirect_URL() + Collection + "\"><i>Export as CSV</i></a>");
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collection_History;
            }
            Output.WriteLine("<p>The data below shows the collection history for the selected collection.  The first table shows the summary of all views of this collection and items contained in the collection.  The second table includes the details for specialized item-level views.</p>");
            Output.WriteLine("</div>");
            Output.WriteLine("<center>");

            Output.WriteLine("  <table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("    <tr align=\"right\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("      <th width=\"120px\" align=\"left\"><span style=\"color: White\">DATE</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">TOTAL<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">VISITS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">MAIN <br />PAGES</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">BROWSES</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">SEARCH<br />RESULTS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">TITLE<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">ITEM<br />VIEWS</span></th>");
            Output.WriteLine("    </tr>");

            int columns = 8;
            string last_year = String.Empty;
            int hits = 0;
            int sessions = 0;
            int main_pages = 0;
            int browses = 0;
            int search_results = 0;
            int title_hits = 0;
            int item_hits = 0;
            int jpeg_views = 0;
            int zoom_views = 0;
            int thumb_views = 0;
            int flash_views = 0;
            int google_map_views = 0;
            int download_views = 0;
            int citation_views = 0;
            int text_search_views = 0;
            int static_views = 0;

            // Add the collection level information
            if (statsCount != null)
            {
                foreach (DataRow thisRow in statsCount.Rows)
                {
                    if (thisRow[0].ToString() != last_year)
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#7d90d5\" colspan=\"" + columns + "\"><span style=\"color: White\"><b> " + thisRow[0] + " STATISTICS</b></span></td></tr>");
                        last_year = thisRow[0].ToString();
                    }
                    else
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    }
                    Output.WriteLine("    <tr align=\"right\" >");
                    Output.WriteLine("      <td align=\"left\">" + Month_From_Int( Convert.ToInt32( thisRow[1] )) + " " + thisRow[0] + "</td>");

                    hits += Convert.ToInt32(thisRow[2]);
                    Output.WriteLine("      <td>" + thisRow[2] + "</td>");

                    sessions += Convert.ToInt32(thisRow[3]);
                    Output.WriteLine("      <td>" + thisRow[3] + "</td>");

                    int thisRowMainPage = Convert.ToInt32(thisRow[4]) + Convert.ToInt32(thisRow[6]);
                    main_pages += thisRowMainPage;
                    Output.WriteLine("      <td>" + thisRowMainPage + "</td>");

                    browses += Convert.ToInt32(thisRow[5]);
                    Output.WriteLine("      <td>" + thisRow[5] + "</td>");

                    search_results += Convert.ToInt32(thisRow[7]);
                    Output.WriteLine("      <td>" + thisRow[7] + "</td>");

                    if (thisRow[8] != DBNull.Value)
                    {
                        title_hits += Convert.ToInt32(thisRow[8]);
                        Output.WriteLine("      <td>" + thisRow[8] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[9] != DBNull.Value)
                    {
                        item_hits += Convert.ToInt32(thisRow[9]);
                        Output.WriteLine("      <td>" + thisRow[9] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }

                    Output.WriteLine("    </tr>");
                }
                Output.WriteLine("    <tr><td bgcolor=\"Black\" colspan=\"" + columns + "\"></td></tr>");
                Output.WriteLine("    <tr align=\"right\" style=\"font-weight:bold\" >");
                Output.WriteLine("      <td align=\"left\"><b>TOTAL</b></td>");
                Output.WriteLine("      <td>" + hits + "</td>");
                Output.WriteLine("      <td>" + sessions + "</td>");
                Output.WriteLine("      <td>" + main_pages + "</td>");
                Output.WriteLine("      <td>" + browses + "</td>");
                Output.WriteLine("      <td>" + search_results + "</td>");
                Output.WriteLine("      <td>" + title_hits + "</td>");
                Output.WriteLine("      <td>" + item_hits + "</td>");
                Output.WriteLine("    </tr>");
                Output.WriteLine("  </table>");
            }

            Output.WriteLine("<br /><br />");

            Output.WriteLine("  <table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("    <tr align=\"right\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("      <th width=\"120px\" align=\"left\"><span style=\"color: White\">DATE</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">JPEG<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">ZOOMABLE<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">CITATION<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">THUMBNAIL<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">TEXT<br />SEARCHES</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">FLASH<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">MAP<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">DOWNLOAD<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">STATIC<br />VIEWS</span></th>");
            Output.WriteLine("    </tr>");

            columns = 10;
            last_year = String.Empty;
            if (statsCount != null)
            {
                foreach (DataRow thisRow in statsCount.Rows)
                {
                    if (thisRow[0].ToString() != last_year)
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#7d90d5\" colspan=\"" + columns + "\"><span style=\"color: White\"><b> " + thisRow[0] + " STATISTICS</b></span></td></tr>");
                        last_year = thisRow[0].ToString();
                    }
                    else
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    }
                    Output.WriteLine("    <tr align=\"right\" >");
                    Output.WriteLine("      <td align=\"left\">" + Month_From_Int( Convert.ToInt32( thisRow[1] )) + " " + thisRow[0] + "</td>");

                    if (thisRow[10] != DBNull.Value)
                    {
                        jpeg_views += Convert.ToInt32(thisRow[10]);
                        Output.WriteLine("      <td>" + thisRow[10] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[11] != DBNull.Value)
                    {
                        zoom_views += Convert.ToInt32(thisRow[11]);
                        Output.WriteLine("      <td>" + thisRow[11] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[12] != DBNull.Value)
                    {
                        citation_views += Convert.ToInt32(thisRow[12]);
                        Output.WriteLine("      <td>" + thisRow[12] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[13] != DBNull.Value)
                    {
                        thumb_views += Convert.ToInt32(thisRow[13]);
                        Output.WriteLine("      <td>" + thisRow[13] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[14] != DBNull.Value)
                    {
                        text_search_views += Convert.ToInt32(thisRow[14]);
                        Output.WriteLine("      <td>" + thisRow[14] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[15] != DBNull.Value)
                    {
                        flash_views += Convert.ToInt32(thisRow[15]);
                        Output.WriteLine("      <td>" + thisRow[15] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[16] != DBNull.Value)
                    {
                        google_map_views += Convert.ToInt32(thisRow[16]);
                        Output.WriteLine("      <td>" + thisRow[16] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[17] != DBNull.Value)
                    {
                        download_views += Convert.ToInt32(thisRow[17]);
                        Output.WriteLine("      <td>" + thisRow[17] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[18] != DBNull.Value)
                    {
                        static_views += Convert.ToInt32(thisRow[18]);
                        Output.WriteLine("      <td>" + thisRow[18] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    Output.WriteLine("    </tr>");
                }

                Output.WriteLine("    <tr><td bgcolor=\"Black\" colspan=\"" + columns + "\"></td></tr>");
                Output.WriteLine("    <tr align=\"right\" style=\"font-weight:bold\" >");
                Output.WriteLine("      <td align=\"left\"><b>TOTAL</b></td>");
                Output.WriteLine("      <td>" + jpeg_views + "</td>");
                Output.WriteLine("      <td>" + zoom_views + "</td>");
                Output.WriteLine("      <td>" + citation_views + "</td>");
                Output.WriteLine("      <td>" + thumb_views + "</td>");
                Output.WriteLine("      <td>" + text_search_views + "</td>");
                Output.WriteLine("      <td>" + flash_views + "</td>");
                Output.WriteLine("      <td>" + google_map_views + "</td>");
                Output.WriteLine("      <td>" + download_views + "</td>");
                Output.WriteLine("      <td>" + static_views + "</td>");
                Output.WriteLine("    </tr>");
                Output.WriteLine("  </table>");
            }
            Output.WriteLine("  <br /> <br />");
            Output.WriteLine("</center>");
        }

        #endregion

        #region Method to add collection history as text

        private void add_collection_history_text(TextWriter Output, string Collection, DataTable statsCount, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_collection_history_text", "Rendering HTML");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>Below is the history collection information included in comma-seperated value form.  To use the data below, cut and paste it into a CSV or text file.  The resulting file can be opened in a variety of applications, including OpenOffice and Microsoft Excel.</p>");
            Output.WriteLine("</div>");

            Output.WriteLine("<pre>");
            Output.WriteLine();
            Output.WriteLine("CODE, MONTH, TOTAL VIEWS, VISITS, MAIN PAGES, BROWSES, SEARCH RESULTS, TITLE VIEWS, ITEM VIEWS, JPEG VIEWS, ZOOMABLE VIEWS, CITATION VIEWS, THUMBNAIL VIEWS, TEXT SEARCHES, FLASH VIEWS, MAP VIEWS, DOWNLOAD VIEWS, STATIC VIEWS");

            // Add the collection level information
            if (statsCount != null)
            {
                foreach (DataRow thisRow in statsCount.Rows)
                {
                    string month = Month_From_Int( Convert.ToInt32(thisRow[1]) );
                    Output.Write(Collection + "," + month + " " + thisRow[0] + ",");

                    int thisRowMainPage = Convert.ToInt32(thisRow[4]) + Convert.ToInt32(thisRow[6]);
                    Output.Write(thisRow[2] + "," + thisRow[3] + "," + thisRowMainPage + "," + thisRow[5] + "," + thisRow[7] + ",");

                    if (thisRow[8] != DBNull.Value)
                    {
                        Output.Write(thisRow[8] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }
                    if (thisRow[9] != DBNull.Value)
                    {
                        Output.Write(thisRow[9] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[10] != DBNull.Value)
                    {
                        Output.Write( thisRow[10] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[11] != DBNull.Value)
                    {
                        Output.Write( thisRow[11] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[12] != DBNull.Value)
                    {
                        Output.Write( thisRow[12] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[13] != DBNull.Value)
                    {
                        Output.Write( thisRow[13] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[14] != DBNull.Value)
                    {
                        Output.Write(thisRow[14] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[15] != DBNull.Value)
                    {
                        Output.Write(thisRow[15] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[16] != DBNull.Value)
                    {
                        Output.Write( thisRow[16] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[17] != DBNull.Value)
                    {
                        Output.Write( thisRow[17] + ",");
                    }
                    else
                    {
                        Output.Write(",");
                    }

                    if (thisRow[18] != DBNull.Value)
                    {
                        Output.Write(thisRow[18].ToString());
                    }
                    Output.WriteLine();
                }
            }
            // Close out this text
            Output.WriteLine();
            Output.WriteLine("</pre>");
            Output.WriteLine("<br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to add the the overall usage

        private void add_overall_usage(TextWriter Output, Custom_Tracer Tracer)
        {
            // Pull the data, first looking in the temp folder
            DataTable statsCount = null;
            string possible_source_file = SobekCM_Library_Settings.Base_Temporary_Directory + "overall_usage.xml";
            if (SobekCM_Library_Settings.Statistics_Caching_Enabled)
            {
                try
                {
                    if (File.Exists(possible_source_file))
                    {
                        FileInfo sourceFileInfo = new FileInfo(possible_source_file);
                        TimeSpan fileAge = DateTime.Now.Subtract(sourceFileInfo.LastWriteTime);
                        if (fileAge.TotalHours < 24)
                        {
                            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_overall_usage", "Pulling usage from <a href=\"" + currentMode.Base_URL + "temp/overall_usage.xml\">recent cached data file</a> in temporary folder");
                            statsCount = new DataTable();
                            statsCount.ReadXml(possible_source_file);
                        }
                    }
                }
                catch
                {
                    Tracer.Add_Trace("Statistics_HtmlSubwriter.add_overall_usage", "Error reading the cached overall_usage.xml file", Custom_Trace_Type_Enum.Error);
                }
            }

            // If no data pulled get it from the database
            if (statsCount == null)
            {
                // Pull from database 
                statsCount = SobekCM_Database.Get_Aggregation_Statistics_History("ALL", Tracer);

                // Save as XML in the temporary folder
                if ((statsCount != null) && (SobekCM_Library_Settings.Statistics_Caching_Enabled))
                {
                    statsCount.WriteXml(possible_source_file, XmlWriteMode.WriteSchema);
                }
            }

            // See if the FAQ is present for this collection
            string directory = SobekCM_Library_Settings.Base_Design_Location + "\\extra\\stats";
            string overall_stats_header = String.Empty;
            if (Directory.Exists(directory))
            {
                if (File.Exists(directory + "\\overall_stats_header.txt"))
                {
                    Tracer.Add_Trace("Statistics_HtmlSubwriter.add_overall_usage", "Loading stats header html");

                    try
                    {
                        StreamReader faq_reader = new StreamReader(directory + "\\overall_stats_header.txt");
                        overall_stats_header = faq_reader.ReadToEnd();
                        faq_reader.Close();
                    }
                    catch(Exception)
                    {
                        // Do nothing here since the default overall stats header wil be used if this read fails
                    }
                }
            }

            Output.WriteLine("<div class=\"SobekText\">");
            if (overall_stats_header.Length > 0)
            {
                Tracer.Add_Trace("Statistics_HtmlSubwriter.add_overall_usage", "Rendering HTML read from source file");
                Output.WriteLine(overall_stats_header);
            }
            else
            {

                Tracer.Add_Trace("Statistics_HtmlSubwriter.add_overall_usage", "Rendering HTML");


                Output.WriteLine("<p>Below are the overall statistics.  Additionally, the tabs above show statistics for:</p>");
                Output.WriteLine("<ul>");
                Output.WriteLine("  <li><b>Collections by date</b> provides the usage reports at the collection group, collection, and subcollection level for a provided date range.  This records views on the collection main pages, searches, and browses.  Total number of title and item views are also displayed by collection.</li>");
                Output.WriteLine("  <li><b>Item Views by date</b> provides the usage reports on the specialized item-level views for all items in " + currentMode.SobekCM_Instance_Abbreviation + ".  The item statistics are aggregated at the collection level for easy analysis.</li>");
                Output.WriteLine("  <li><b>Collection history</b> displays information about a single collection or subcollection over time.</li>");
                Output.WriteLine("</ul>");
                Output.WriteLine("<p>These statistics are generally updated monthly.</p>");
                Output.WriteLine();
            }

            Output.WriteLine("<h2>Total Hit Counts (data)</h2>");

            if ((statsCount != null) && (statsCount.Rows.Count > 0))
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Collection_History_Text;
                Output.WriteLine("<a href=\"" + currentMode.Redirect_URL() + "all\"><i>Export as CSV</i></a>");
                currentMode.Statistics_Type = Statistics_Type_Enum.Usage_Overall;
            }
            
            Output.WriteLine();
            Output.WriteLine("<p>Below are the most up to date numbers for overall utilization of " + currentMode.SobekCM_Instance_Abbreviation + ".  The first table shows the summary of views against all collections.  The second table includes the details for specialized item-level views.</p>");
            Output.WriteLine("</div>");
            Output.WriteLine("<center>");

            Output.WriteLine("  <table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("    <tr align=\"right\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("      <th width=\"120px\" align=\"left\"><span style=\"color: White\">DATE</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">TOTAL<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">VISITS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">MAIN <br />PAGES</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">BROWSES</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">SEARCH<br />RESULTS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">TITLE<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">ITEM<br />VIEWS</span></th>");
            Output.WriteLine("    </tr>");

            int columns = 8;
            string last_year = String.Empty;
            int hits = 0;
            int sessions = 0;
            int main_pages = 0;
            int browses = 0;
            int search_results = 0;
            int title_hits = 0;
            int item_hits = 0;
            int jpeg_views = 0;
            int zoom_views = 0;
            int thumb_views = 0;
            int flash_views = 0;
            int google_map_views = 0;
            int download_views = 0;
            int citation_views = 0;
            int text_search_views = 0;
            int static_views = 0;

            // Add the collection level information
            if (statsCount != null)
            {
                foreach (DataRow thisRow in statsCount.Rows)
                {
                    if (thisRow[0].ToString() != last_year)
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#7d90d5\" colspan=\"" + columns + "\"><span style=\"color: White\"><b> " + thisRow[0] + " STATISTICS</b></span></td></tr>");
                        last_year = thisRow[0].ToString();
                    }
                    else
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    }
                    Output.WriteLine("    <tr align=\"right\" >");
                    Output.WriteLine("      <td align=\"left\">" + Month_From_Int(Convert.ToInt32(thisRow[1].ToString())) + " " + thisRow[0] + "</td>");
                   
                    hits += Convert.ToInt32(thisRow[2]);
                    Output.WriteLine("      <td>" + thisRow[2] + "</td>");

                    sessions += Convert.ToInt32(thisRow[3]);
                    Output.WriteLine("      <td>" + thisRow[3] + "</td>");

                    int thisRowMainPage = Convert.ToInt32(thisRow[4]) + Convert.ToInt32(thisRow[6]);
                    main_pages += thisRowMainPage;
                    Output.WriteLine("      <td>" + thisRowMainPage + "</td>");

                    browses += Convert.ToInt32(thisRow[5]);
                    Output.WriteLine("      <td>" + thisRow[5] + "</td>");

                    search_results += Convert.ToInt32(thisRow[7]);
                    Output.WriteLine("      <td>" + thisRow[7] + "</td>");

                    if (thisRow[8] != DBNull.Value)
                    {
                        title_hits += Convert.ToInt32(thisRow[8]);
                        Output.WriteLine("      <td>" + thisRow[8] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[9] != DBNull.Value)
                    {
                        item_hits += Convert.ToInt32(thisRow[9]);
                        Output.WriteLine("      <td>" + thisRow[9] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }

                    Output.WriteLine("    </tr>");
                }
                Output.WriteLine("    <tr><td bgcolor=\"Black\" colspan=\"" + columns + "\"></td></tr>");
                Output.WriteLine("    <tr align=\"right\" style=\"font-weight:bold\" >");
                Output.WriteLine("      <td align=\"left\"><b>TOTAL</b></td>");
                Output.WriteLine("      <td>" + hits + "</td>");
                Output.WriteLine("      <td>" + sessions + "</td>");
                Output.WriteLine("      <td>" + main_pages + "</td>");
                Output.WriteLine("      <td>" + browses + "</td>");
                Output.WriteLine("      <td>" + search_results + "</td>");
                Output.WriteLine("      <td>" + title_hits + "</td>");
                Output.WriteLine("      <td>" + item_hits + "</td>");
                Output.WriteLine("    </tr>");
                Output.WriteLine("  </table>");
            }

            Output.WriteLine("<br /><br />");

            Output.WriteLine("  <table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("    <tr align=\"right\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("      <th width=\"120px\" align=\"left\"><span style=\"color: White\">DATE</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">JPEG<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">ZOOMABLE<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">CITATION<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">THUMBNAIL<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">TEXT<br />SEARCHES</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">FLASH<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">MAP<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">DOWNLOAD<br />VIEWS</span></th>");
            Output.WriteLine("      <th width=\"90px\"><span style=\"color: White\">STATIC<br />VIEWS</span></th>");
            Output.WriteLine("    </tr>");

            columns = 10;
            last_year = String.Empty;
            if (statsCount != null)
            {
                foreach (DataRow thisRow in statsCount.Rows)
                {
                    if (thisRow[0].ToString() != last_year)
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#7d90d5\" colspan=\"" + columns + "\"><span style=\"color: White\"><b> " + thisRow[0] + " STATISTICS</b></span></td></tr>");
                        last_year = thisRow[0].ToString();
                    }
                    else
                    {
                        Output.WriteLine("    <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    }
                    Output.WriteLine("    <tr align=\"right\" >");
                    Output.WriteLine("      <td align=\"left\">" + Month_From_Int(Convert.ToInt32(thisRow[1].ToString())) + " " + thisRow[0] + "</td>");

                    if (thisRow[10] != DBNull.Value)
                    {
                        jpeg_views += Convert.ToInt32(thisRow[10]);
                        Output.WriteLine("      <td>" + thisRow[10] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[11] != DBNull.Value)
                    {
                        zoom_views += Convert.ToInt32(thisRow[11]);
                        Output.WriteLine("      <td>" + thisRow[11] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[12] != DBNull.Value)
                    {
                        citation_views += Convert.ToInt32(thisRow[12]);
                        Output.WriteLine("      <td>" + thisRow[12] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[13] != DBNull.Value)
                    {
                        thumb_views += Convert.ToInt32(thisRow[13]);
                        Output.WriteLine("      <td>" + thisRow[13] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[14] != DBNull.Value)
                    {
                        text_search_views += Convert.ToInt32(thisRow[14]);
                        Output.WriteLine("      <td>" + thisRow[14] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[15] != DBNull.Value)
                    {
                        flash_views += Convert.ToInt32(thisRow[15]);
                        Output.WriteLine("      <td>" + thisRow[15] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[16] != DBNull.Value)
                    {
                        google_map_views += Convert.ToInt32(thisRow[16]);
                        Output.WriteLine("      <td>" + thisRow[16] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[17] != DBNull.Value)
                    {
                        download_views += Convert.ToInt32(thisRow[17]);
                        Output.WriteLine("      <td>" + thisRow[17] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    if (thisRow[18] != DBNull.Value)
                    {
                        static_views += Convert.ToInt32(thisRow[18]);
                        Output.WriteLine("      <td>" + thisRow[18] + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("      <td>0</td>");
                    }
                    Output.WriteLine("    </tr>");
                }

                Output.WriteLine("    <tr><td bgcolor=\"Black\" colspan=\"" + columns + "\"></td></tr>");
                Output.WriteLine("    <tr align=\"right\" style=\"font-weight:bold\" >");
                Output.WriteLine("      <td align=\"left\"><b>TOTAL</b></td>");
                Output.WriteLine("      <td>" + jpeg_views + "</td>");
                Output.WriteLine("      <td>" + zoom_views + "</td>");
                Output.WriteLine("      <td>" + citation_views + "</td>");
                Output.WriteLine("      <td>" + thumb_views + "</td>");
                Output.WriteLine("      <td>" + text_search_views + "</td>");
                Output.WriteLine("      <td>" + flash_views + "</td>");
                Output.WriteLine("      <td>" + google_map_views + "</td>");
                Output.WriteLine("      <td>" + download_views + "</td>");
                Output.WriteLine("      <td>" + static_views + "</td>");
                Output.WriteLine("    </tr>");
                Output.WriteLine("  </table>");
            }
            Output.WriteLine("  <br /> <br />");
            Output.WriteLine("</center>");
        }

        #endregion

        #region Method to add the item count information as HTML

        private void add_item_count_html(TextWriter Output, bool includesFYTD, Custom_Tracer Tracer )
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_html", "Rendering HTML");

            // Determine the date
            DataTable itemCount = null;
            string possible_source_file = SobekCM_Library_Settings.Base_Temporary_Directory + "item_count.xml";
            string possible_source_url = currentMode.Base_URL + "temp/item_count.xml";
            if (includesFYTD)
            {
                possible_source_file = SobekCM_Library_Settings.Base_Temporary_Directory + "item_count_growth.xml";
                possible_source_url = currentMode.Base_URL + "temp/item_count_growth.xml";
            }

            try
            {
                if ((SobekCM_Library_Settings.Statistics_Caching_Enabled) && (File.Exists(possible_source_file)))
                {
                    FileInfo sourceFileInfo = new FileInfo(possible_source_file);
                    TimeSpan fileAge = DateTime.Now.Subtract(sourceFileInfo.LastWriteTime);
                    if (fileAge.TotalMinutes < 120)
                    {
                        Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_html", "Pulling item count from <a href=\"" + possible_source_url + "\">recent cached data file</a> in temporary folder");
                        itemCount = new DataTable();
                        itemCount.ReadXml(possible_source_file);
                    }
                }
            }
            catch
            {
                Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_html", "Error reading the cached file", Custom_Trace_Type_Enum.Error);
            }

            // If no data pulled get it from the database
            if (itemCount == null)
            {
                // Pull from database 
                if (includesFYTD)
                {
                    DateTime fiscalStart = new DateTime(DateTime.Now.Year, 7, 1);
                    if (DateTime.Compare(DateTime.Now, fiscalStart) < 0)
                    {
                        fiscalStart = new DateTime(DateTime.Now.Year - 1, 7, 1);
                    }
                    itemCount = SobekCM_Database.Get_Item_Aggregation_Count( fiscalStart, Tracer);
                }
                else
                {
                    itemCount = SobekCM_Database.Get_Item_Aggregation_Count(Tracer);
                }

                // Save as XML in the temporary folder
                if ((itemCount != null) && (SobekCM_Library_Settings.Statistics_Caching_Enabled))
                {
                    itemCount.WriteXml(possible_source_file, XmlWriteMode.WriteSchema);
                }
            }

            // If there was no count, or no rows returned, say something
            if ((itemCount == null) || (itemCount.Rows.Count == 0))
            {
                Output.WriteLine("<b>NO ITEM COUNT AVAILABLE</b>");
                return;
            }

            // Declare these vairables, although we may not use them
            int ytd_titles = 0;
            int ytd_items = 0;
            int ytd_pages = 0;

            // Add the text first
            DataRow[] total_row = itemCount.Select("Row_Type='z'");
            if (total_row.Length > 0)
            {
                int titles = Convert.ToInt32(total_row[0][7]);
                int items = Convert.ToInt32(total_row[0][8]);
                int pages = Convert.ToInt32(total_row[0][9]);

                int million_pages = (pages / 1000000);
                string page_string = million_pages.ToString();
                switch( million_pages )
                {
                    case 1:
                        page_string = "one";
                        break;

                    case 2:
                        page_string = "two";
                        break;

                    case 3:
                        page_string = "three";
                        break;

                    case 4:
                        page_string = "four";
                        break;

                    case 5:
                        page_string = "five";
                        break;

                    case 6:
                        page_string = "six";
                        break;

                    case 7:
                        page_string = "seven";
                        break;

                    case 8:
                        page_string = "eight";
                        break;

                    case 9:
                        page_string = "nine";
                        break;

                    case 10:
                        page_string = "ten";
                        break;
                }

                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine("<p>The " + currentMode.SobekCM_Instance_Name + " ( " + currentMode.SobekCM_Instance_Abbreviation + " ) is comprised of collections, organized into collection groups and subdivided into subcollections.  Currently, there are " + items + " total items in " + currentMode.SobekCM_Instance_Abbreviation + ", which make up " + titles + " different titles.   In all, there are over " + page_string + " million pages in " + currentMode.SobekCM_Instance_Abbreviation + ".</p>");

                if (includesFYTD)
                {
                    ytd_titles = titles - Convert.ToInt32(total_row[0][10]);
                    ytd_items = items - Convert.ToInt32(total_row[0][11]);
                    ytd_pages = pages - Convert.ToInt32(total_row[0][12]);

                    Output.WriteLine("<p>During the current fiscal year (which starts on July 1st), " + ytd_items + " items in " + ytd_titles + " titles have been added to " + currentMode.SobekCM_Instance_Abbreviation + ".  This has added " + ytd_pages + " pages to this digital collection.</p>");
                }

                Output.WriteLine("<p>Below are the number of items in each collection and subcollection.</p>");
                Output.WriteLine("</div>");
            }

            // Add the header information
            if (includesFYTD)
            {
                Output.WriteLine("</div> <!-- ends PageContainer div momentarily for this extra wide table -->");
                Output.WriteLine("<center>");
                Output.WriteLine("<table width=\"1000px\" border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            }
            else
            {
                Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            }

            int rule = 7;
            if (includesFYTD)
                rule = 10;

            if (itemCount.Rows.Count > 0)
            {
                currentMode.Statistics_Type = Statistics_Type_Enum.Item_Count_Text;
                Output.WriteLine("  <tr align=\"right\"><td align=\"right\" colspan=\"" + rule + "\"><a href=\"" + currentMode.Redirect_URL() + "\"><i>Export as CSV</i></a>&nbsp; </td></tr>");
            }

            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th><span style=\"color: White\">GROUP CODE</span></th>");
            Output.WriteLine("    <th><span style=\"color: White\">COLL CODE</span></th>");
            Output.WriteLine("    <th><span style=\"color: White\">SUB CODE</span></th>");
            Output.WriteLine("    <th width=\"250\"><span style=\"color: White\">NAME</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White; text-align: right\">TITLES</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White; text-align: right\">ITEMS</span></th>");
            Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White; text-align: right\">PAGES</span></th>");


            if (includesFYTD)
            {
                Output.WriteLine("    <th align=\"right\"><span style=\"color: White; text-align: right\">FYTD TITLES</span></th>");
                Output.WriteLine("    <th align=\"right\"><span style=\"color: White; text-align: right\">FYTD ITEMS</span></th>");
                Output.WriteLine("    <th align=\"right\"><span style=\"color: White; text-align: right\">FYTD PAGES</span></th>");
            }
            Output.WriteLine("  </tr>");

            // Now, add each line
            foreach (DataRow thisRow in itemCount.Rows)
            {
                if (includesFYTD)
                {
                    ytd_titles = Convert.ToInt32(thisRow[7]) - Convert.ToInt32(thisRow[10]);
                    ytd_items = Convert.ToInt32(thisRow[8]) - Convert.ToInt32(thisRow[11]);
                    ytd_pages = Convert.ToInt32(thisRow[9]) - Convert.ToInt32(thisRow[12]);
                }

                bool active = false;
                if (Convert.ToBoolean(thisRow[5]))
                    active = true;
                if (( includesFYTD ) || (active))
                {
                    switch (thisRow[0].ToString())
                    {
                        case "g":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</span></td>");
                            Output.WriteLine("    <td colspan=\"" + ( rule - 4 ) + "\" >&nbsp;</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "c":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            if (active)
                            {
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "\">" + thisRow[2] + "</a></td>");
                                Output.WriteLine("    <td>&nbsp;</td>");
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "/all\">" + thisRow[7] + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "/all\">" + thisRow[8] + "</a></td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                                Output.WriteLine("    <td>&nbsp;</td>");
                                Output.WriteLine("    <td>" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[7] + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[8] + "</td>");
                            }
                            Output.WriteLine("    <td align=\"right\">" + thisRow[9] + "</td>");
                            if (includesFYTD)
                            {
                                Output.WriteLine("    <td align=\"right\">" + ytd_titles + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + ytd_items + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + ytd_pages + "</td>");
                            }

                            Output.WriteLine("  </tr>");
                            break;

                        case "s":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[2] + "</span></td>");
                            if (active)
                            {
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "\">" + thisRow[3] + "</a></td>");
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "\">" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "/all\">" + thisRow[7] + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "/all\">" + thisRow[8] + "</a></td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>" + thisRow[3] + "</td>");
                                Output.WriteLine("    <td>" + thisRow[4].ToString().Replace("&", "&amp;").Replace("\"", "&quot;") + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[7] + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[8] + "</td>");
                            }
                            Output.WriteLine("    <td align=\"right\">" + thisRow[9] + "</td>");
                            if (includesFYTD)
                            {
                                Output.WriteLine("    <td align=\"right\">" + ytd_titles + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + ytd_items + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + ytd_pages + "</td>");
                            }
                            Output.WriteLine("  </tr>");
                            break;

                        case "z":
                            Output.WriteLine("  <tr><td bgcolor=\"Black\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td colspan=\"4\"><b>" + SobekCM_Library_Settings.System_Name.ToUpper().Replace("&","&amp;").Replace("\"","&quot;") + "</b></td>");
                            Output.WriteLine("    <td align=\"right\"><b>" + thisRow[7] + "</b></td>");
                            Output.WriteLine("    <td align=\"right\"><b>" + thisRow[8] + "</b></td>");
                            Output.WriteLine("    <td align=\"right\"><b>" + thisRow[9] + "</b></td>");

                            if (includesFYTD)
                            {
                                Output.WriteLine("    <td align=\"right\">" + ytd_titles + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + ytd_items + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + ytd_pages + "</td>");
                            }

                            Output.WriteLine("  </tr>");
                            break;
                    }
                }
            }

            // Close out this table
            Output.WriteLine("</table>");
            if (includesFYTD)
            {
                Output.WriteLine("</center>");
                Output.WriteLine("<div id=\"pagecontainer_resumed\">");
            }

            Output.WriteLine("<br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to add the item count information as TEXT

        private void add_item_count_textual(TextWriter Output, bool includesFYTD, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_textual", "Rendering HTML");

            // Determine the date
            DataTable itemCount = null;
            string possible_source_file = SobekCM_Library_Settings.Base_Temporary_Directory + "item_count.xml";
            string possible_source_url = currentMode.Base_URL + "temp/item_count.xml";
            if (includesFYTD)
            {
                possible_source_file = SobekCM_Library_Settings.Base_Temporary_Directory + "item_count_growth.xml";
                possible_source_url = currentMode.Base_URL + "temp/item_count_growth.xml";
            }

            try
            {
                if ((SobekCM_Library_Settings.Statistics_Caching_Enabled) && (File.Exists(possible_source_file)))
                {
                    FileInfo sourceFileInfo = new FileInfo(possible_source_file);
                    TimeSpan fileAge = DateTime.Now.Subtract(sourceFileInfo.LastWriteTime);
                    if (fileAge.TotalMinutes < 120)
                    {
                        Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_html", "Pulling item count from <a href=\"" + possible_source_url + "\">recent cached data file</a> in temporary folder");
                        itemCount = new DataTable();
                        itemCount.ReadXml(possible_source_file);
                    }
                }
            }
            catch 
            {
                Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_html", "Error reading the cached file", Custom_Trace_Type_Enum.Error);
            }

            // If no data pulled get it from the database
            if (itemCount == null)
            {
                // Pull from database 
                if (includesFYTD)
                {
                    DateTime fiscalStart = new DateTime(DateTime.Now.Year, 7, 1);
                    if (DateTime.Compare(DateTime.Now, fiscalStart) < 0)
                    {
                        fiscalStart = new DateTime(DateTime.Now.Year - 1, 7, 1);
                    }
                    itemCount = SobekCM_Database.Get_Item_Aggregation_Count(fiscalStart, Tracer);
                }
                else
                {
                    itemCount = SobekCM_Database.Get_Item_Aggregation_Count(Tracer);
                }

                // Save as XML in the temporary folder
                if ((itemCount != null) && (SobekCM_Library_Settings.Statistics_Caching_Enabled))
                {
                    itemCount.WriteXml(possible_source_file, XmlWriteMode.WriteSchema);
                }
            }

            // If there was no count, or no rows returned, say something
            if ((itemCount == null) || (itemCount.Rows.Count == 0))
            {
                Output.WriteLine("<b>NO ITEM COUNT AVAILABLE</b>");
                return;
            }

            // Declare these vairables, although we may not use them

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>Below is the item count with fiscal year to date information included in comma-seperated value form.  To use the data below, cut and paste it into a CSV or text file.  The resulting file can be opened in a variety of applications, including OpenOffice and Microsoft Excel.</p>");
            Output.WriteLine("</div>");

            Output.WriteLine("<table><tr align=\"left\"><td>");
            Output.WriteLine("<pre>");
            Output.WriteLine();
            Output.WriteLine("GROUP CODE, COLL CODE, SUB CODE, NAME, TITLES, ITEMS, PAGES, FYTD TITLES, FYTD ITEMS, FYTD PAGES");

            // Now, add each line
            foreach (DataRow thisRow in itemCount.Rows)
            {
                int ytd_titles = Convert.ToInt32(thisRow[7]) - Convert.ToInt32(thisRow[10]);
                int ytd_items = Convert.ToInt32(thisRow[8]) - Convert.ToInt32(thisRow[11]);
                int ytd_pages = Convert.ToInt32(thisRow[9]) - Convert.ToInt32(thisRow[12]);


                switch (thisRow[0].ToString())
                {
                    case "g":
                        Output.WriteLine(thisRow[1] + ",,," + thisRow[4].ToString().Replace("'", "").Replace("\"", "").Replace(",", "") + ",,,,,,");
                        break;

                    case "c":
                        Output.WriteLine(thisRow[1] + "," + thisRow[2] + ",," + thisRow[4].ToString().Replace("'", "").Replace("\"", "").Replace(",", "") + "," + thisRow[7] + "," + thisRow[8] + "," + thisRow[9] + "," + ytd_titles + "," + ytd_items + "," + ytd_pages);
                        break;

                    case "s":
                        Output.WriteLine(thisRow[1] + "," + thisRow[2] + "," + thisRow[3] + "," + thisRow[4].ToString().Replace("'", "").Replace("\"", "").Replace(",", "") + "," + thisRow[7] + "," + thisRow[8] + "," + thisRow[9] + "," + ytd_titles + "," + ytd_items + "," + ytd_pages);
                        break;

                    case "z":
                        Output.WriteLine(currentMode.SobekCM_Instance_Abbreviation + ",,," + currentMode.SobekCM_Instance_Abbreviation + "," + thisRow[7] + "," + thisRow[8] + "," + thisRow[9] + "," + ytd_titles + "," + ytd_items + "," + ytd_pages);
                        break;
                }
            }

            // Close out this text
            Output.WriteLine();
            Output.WriteLine("</pre>");
            Output.WriteLine("</td></tr></table>");
            Output.WriteLine("<br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to add the item count between two arbitrary dates as HTML

        private void add_item_count_arbitrary_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Statistics_HtmlSubwriter.add_item_count_arbitrary_html", "Rendering HTML");

            //Output.WriteLine("<div id=\"calendardiv\" style=\"position:absolute;visibility:hidden;background-color:white;layer-background-color:white;\"></div>");
            //Output.WriteLine();

            //Output.WriteLine("<SCRIPT LANGUAGE=\"JavaScript\">");
            //Output.WriteLine("  document.write(getCalendarStyles());");
            //Output.WriteLine("  var cal1x = new CalendarPopup(\"calendardiv\");");
            //Output.WriteLine("  var cal2x = new CalendarPopup(\"calendardiv\");");
            //Output.WriteLine("</SCRIPT>");
            Output.WriteLine();

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("  <p>This option allows the complete title count, item count, and page count to be viewed for a previous time and to additionally see the growth between two arbitrary dates.</p>");
            Output.WriteLine();
            Output.WriteLine("  <h2>Selected Date Range</h2>");
            Output.WriteLine();

            // Get the browse info mode, and also the redirect url without the mode information
            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;


            // Get the two dates
            DataTable itemCount = null;
            DateTime? date1 = null;
            DateTime? date2 = null;
            if (currentInfoBrowseMode.Length > 0)
            {
                try
                {
                    string[] splitter = currentInfoBrowseMode.Split("-".ToCharArray());
                    if (splitter.Length == 3)
                    {
                        int year1;
                        Int32.TryParse(splitter[2], out year1);
                        if (year1 < 100)
                            year1 = 2000 + year1;
                        date1 = new DateTime(year1, Convert.ToInt32(splitter[0]), Convert.ToInt32(splitter[1]));
                        itemCount = SobekCM_Database.Get_Item_Aggregation_Count_DateRange(date1.Value, date1.Value, Tracer);
                    }
                    else if (splitter.Length == 6)
                    {
                        int year1;
                        Int32.TryParse(splitter[2], out year1);
                        if (year1 < 100)
                            year1 = 2000 + year1;
                        int year2;
                        Int32.TryParse(splitter[5], out year2);
                        if (year2 < 100)
                            year2 = 2000 + year2;
                        date1 = new DateTime(year1, Convert.ToInt32(splitter[0]), Convert.ToInt32(splitter[1]));
                        date2 = new DateTime(year2, Convert.ToInt32(splitter[3]), Convert.ToInt32(splitter[4]));

                        if (date1.Value.CompareTo(date2.Value) > 0)
                        {
                            DateTime? tempDate = date1;
                            date1 = date2;
                            date2 = tempDate;
                        }

                        DateTime modifiedDate = date2.Value.AddDays(1);
                        itemCount = SobekCM_Database.Get_Item_Aggregation_Count_DateRange(date1.Value, modifiedDate, Tracer);
                    }

                }
                catch(Exception)
                {
                    // If the parsing of the date from the URL fails, no item count information is pulled from the database
                }
            }

           
            Output.WriteLine("  <p>The title count, item count, and page count appear below for the following two arbitrary dates:</p>");

            Output.WriteLine("  <script type=\"text/javascript\">");
            Output.WriteLine("    window.onload = function() { ");
            if (date1.HasValue)
            {
                Output.WriteLine("      new JsDatePick({ useMode:2, target:\"date1input\", target_cssClass:\"smallinput\", launcher:\"calendar1img\", dateFormat: \"%n/%j/%Y\", imgPath: \"" + currentMode.Base_URL + "default/images/datepicker/\", selectedDate:{ year:" + date1.Value.Year + ", month:" + date1.Value.Month + ", day:" + date1.Value.Day + "	} 	});");
            }
            else
            {
                Output.WriteLine("      new JsDatePick({ useMode:2, target:\"date1input\", target_cssClass:\"smallinput\", launcher:\"calendar1img\", dateFormat: \"%n/%j/%Y\", imgPath: \"" + currentMode.Base_URL + "default/images/datepicker/\", selectedDate:{ year:" + DateTime.Now.Year + ", month:" + DateTime.Now.Month + ", day:" + DateTime.Now.Day + "	} 	});");
            }

            if (date2.HasValue)
            {
                Output.WriteLine("      new JsDatePick({ useMode:2, target:\"date2input\", target_cssClass:\"smallinput\", launcher:\"calendar2img\", dateFormat: \"%n/%j/%Y\", imgPath: \"" + currentMode.Base_URL + "default/images/datepicker/\", selectedDate:{ year:" + date2.Value.Year + ", month:" + date2.Value.Month + ", day:" + date2.Value.Day + "	} 	});");
            }
            else
            {
                Output.WriteLine("      new JsDatePick({ useMode:2, target:\"date2input\", target_cssClass:\"smallinput\", launcher:\"calendar2img\", dateFormat: \"%n/%j/%Y\", imgPath: \"" + currentMode.Base_URL + "default/images/datepicker/\", selectedDate:{ year:" + DateTime.Now.Year + ", month:" + DateTime.Now.Month + ", day:" + DateTime.Now.Day + "	} 	});");
            }
            Output.WriteLine("    }; ");
            Output.WriteLine("  </script>");

            Output.WriteLine("  <form name=\"statistics_form\" id=\"addedForm\">");
            Output.WriteLine("    <table>");
            Output.WriteLine("      <tr height=\"45px\" valign=\"middle\">");
            Output.WriteLine("        <td width=\"100px\">&nbsp;</td>");
            Output.WriteLine("        <td>From:</td>");
            if (date1.HasValue)
            {
                Output.WriteLine("        <td><input type=\"text\" name=\"date1input\" id=\"date1input\" class=\"smallinput\" value=\"" + date1.Value.ToShortDateString() + "\" onfocus=\"textbox_enter_default_value(this, 'smallinput');\" onblur=\"textbox_leave_default_value(this, 'smallinput');\" /></td>");
            }
            else
            {
                Output.WriteLine("        <td><input type=\"text\" name=\"date1input\" id=\"date1input\" class=\"smallinput_initial\" value=\"mm/dd/yyyy\" onfocus=\"textbox_enter_default_value(this, 'smallinput');\" onblur=\"textbox_leave_default_value(this, 'smallinput');\" /></td>");
            }
            Output.WriteLine("        <td width=\"50px\"><img src=\"" + currentMode.Base_URL + "default/images/calendar_button.png\" title=\"Show a calendar to select this date\"  onclick=\"return false;\" name=\"calendar1img\" ID=\"calendar1img\" class=\"calendar_button\" /></td>");
            Output.WriteLine("        <td>&nbsp;</td>");
            Output.WriteLine("      </tr>");

            Output.WriteLine("      <tr height=\"45px\" valign=\"middle\">");
            Output.WriteLine("        <td>&nbsp;</td>");
            Output.WriteLine("        <td>To:</td>");
            if (date2.HasValue)
            {
                Output.WriteLine("        <td><input type=\"text\" name=\"date2input\" id=\"date2input\" class=\"smallinput\" value=\"" + date2.Value.ToShortDateString() + "\" onfocus=\"textbox_enter_default_value(this, 'smallinput');\" onblur=\"textbox_leave_default_value(this, 'smallinput');\" /></td>");
            }
            else
            {
                Output.WriteLine("        <td><input type=\"text\" name=\"date2input\" id=\"date2input\" class=\"smallinput_initial\" value=\"mm/dd/yyyy\" onfocus=\"textbox_enter_default_value(this, 'smallinput');\" onblur=\"textbox_leave_default_value(this, 'smallinput');\" /></td>");
            }
            Output.WriteLine("        <td><img src=\"" + currentMode.Base_URL + "default/images/calendar_button.png\" title=\"Show a calendar to select this date\" onclick=\"return false;\" name=\"calendar2img\" ID=\"calendar2img\" class=\"calendar_button\" /></td>");
            Output.WriteLine("        <td>");
            Output.WriteLine("          <button title=\"Select Range\" class=\"go_button\" onclick=\"arbitrary_item_count('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("        <td>");
            Output.WriteLine("      </tr>");
            Output.WriteLine("    </table>");
            Output.WriteLine("  </form>");
            Output.WriteLine("  <p>To change the dates shown, choose your dates above and hit the GO button.</p>");
            Output.WriteLine();

            if (itemCount != null)
            {
                Output.WriteLine("<h2>Item Count and Growth</h2>");
                Output.Write("<p>Below are the number of titles, items, and pages in each collection and subcollection.  The &quot;INITIAL&quot; values are the values that were present at midnight on " + date1.Value.ToShortDateString() + " before any new items were processed that day.");
                if (date2.HasValue)
                {
                    Output.Write(" The &quot;ADDED&quot; values are the number of titles, items, and pages that were added between " + date1.Value.ToShortDateString() + " and " + date2.Value.ToShortDateString() + " inclusive.");
                }
                Output.WriteLine("</p>");
                Output.WriteLine();
                Output.WriteLine("</div>");

                const int rule = 10;
                Output.WriteLine("</div>");
                Output.WriteLine("<center>");
                Output.WriteLine("<table width=\"1000px\" border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
                //   Output.WriteLine("  <tr align=\"right\"><td align=\"right\" colspan=\"" + rule + "\"><a href=\"" + currentMode.Redirect_URL() + "\"><i>Export as CSV</i></a>&nbsp; </td></tr>");

                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
                Output.WriteLine("    <th><span style=\"color: White\">GROUP CODE</span></th>");
                Output.WriteLine("    <th><span style=\"color: White\">COLL CODE</span></th>");
                Output.WriteLine("    <th><span style=\"color: White\">SUB CODE</span></th>");
                Output.WriteLine("    <th width=\"250\"><span style=\"color: White\">NAME</span></th>");
                Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">INITIAL<br />TITLES</span></th>");
                Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">INITIAL<br />ITEMS</span></th>");
                Output.WriteLine("    <th width=\"80\" align=\"right\"><span style=\"color: White\">INITIAL<br />PAGES</span></th>");


                Output.WriteLine("    <th align=\"right\"><span style=\"color: White\">ADDED<br />TITLES</span></th>");
                Output.WriteLine("    <th align=\"right\"><span style=\"color: White\">ADDED<br />ITEMS</span></th>");
                Output.WriteLine("    <th align=\"right\"><span style=\"color: White\">ADDED<br />PAGES</span></th>");
                Output.WriteLine("  </tr>");

                // Now, add each line
                foreach (DataRow thisRow in itemCount.Rows)
                {
                    bool active = false;
                    if (Convert.ToBoolean(thisRow[5]))
                        active = true;

                    switch (thisRow[0].ToString())
                    {
                        case "g":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" >");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td><span style=\"color: White\">" + thisRow[4] + "</span></td>");
                            Output.WriteLine("    <td colspan=\"" + (rule - 4) + "\" >&nbsp;</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "c":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            if (active)
                            {
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "\">" + thisRow[2] + "</a></td>");
                                Output.WriteLine("    <td>&nbsp;</td>");
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "\">" + thisRow[4] + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "/all\">" + thisRow[7] + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[2].ToString().ToLower() + "/all\">" + thisRow[8] + "</a></td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                                Output.WriteLine("    <td>&nbsp;</td>");
                                Output.WriteLine("    <td>" + thisRow[4] + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[7] + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[8] + "</td>");
                            }
                            Output.WriteLine("    <td align=\"right\">" + thisRow[9] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[10] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[11] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[12] + "</td>");

                            Output.WriteLine("  </tr>");
                            break;

                        case "s":
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[1] + "</span></td>");
                            Output.WriteLine("    <td><span style=\"color: #999999\">" + thisRow[2] + "</span></td>");
                            if (active)
                            {
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "\">" + thisRow[3] + "</a></td>");
                                Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "\">" + thisRow[4] + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "/all\">" + thisRow[7] + "</a></td>");
                                Output.WriteLine("    <td align=\"right\"><a href=\"" + currentMode.Base_URL + thisRow[3].ToString().ToLower() + "/all\">" + thisRow[8] + "</a></td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>" + thisRow[3] + "</td>");
                                Output.WriteLine("    <td>" + thisRow[4] + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[7] + "</td>");
                                Output.WriteLine("    <td align=\"right\">" + thisRow[8] + "</td>");
                            }
                            Output.WriteLine("    <td align=\"right\">" + thisRow[9] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[10] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[11] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[12] + "</td>");
                            Output.WriteLine("  </tr>");
                            break;

                        case "z":
                            Output.WriteLine("  <tr><td bgcolor=\"Black\" colspan=\"" + rule + "\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td colspan=\"4\"><b>UNIVERSITY OF FLORIDA DIGITAL COLLECTIONS</b></td>");
                            Output.WriteLine("    <td align=\"right\"><b>" + thisRow[7] + "</b></td>");
                            Output.WriteLine("    <td align=\"right\"><b>" + thisRow[8] + "</b></td>");
                            Output.WriteLine("    <td align=\"right\"><b>" + thisRow[9] + "</b></td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[10] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[11] + "</td>");
                            Output.WriteLine("    <td align=\"right\">" + thisRow[12] + "</td>");
                            Output.WriteLine("  </tr>");
                            break;
                    }
                }

                // Close out this table
                Output.WriteLine("</table>");
                Output.WriteLine("</center>");
                Output.WriteLine("<div id=\"pagecontainer_resumed\">");
            }
            else
            {
                Output.WriteLine("<br /><br />");
                Output.WriteLine("</div>");
            }
        }

        #endregion
    }
}
