#region Using directives

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.IO;
using System.Web;
using System.Web.SessionState;
using SobekCM.Library.Aggregations;
using SobekCM.Library.Application_State;
using SobekCM.Library.Configuration;
using SobekCM.Library.Database;
using SobekCM.Library.MemoryMgmt;
using SobekCM.Library.Navigation;
using SobekCM.Library.Users;

#endregion

namespace SobekCM.Library.HTML
{
    /// <summary> Internal html subwriter renders all of the screens about the collections and items
    /// held within this digital library, the list of items edited or recently added, and the current memory profile </summary>
    /// <remarks> This class extends the <see cref="abstractHtmlSubwriter"/> abstract class. </remarks>
    public class Internal_HtmlSubwriter : abstractHtmlSubwriter
    {
        private readonly Aggregation_Code_Manager codeManager;
        private readonly Dictionary<string, Wordmark_Icon> iconList;
        private readonly User_Object user;

        /// <summary> Constructor for a new instance of the Internal_HtmlSubwriter class </summary>
        /// <param name="Icon_Dictionary"> Dictionary of information about every wordmark/icon in this digital library, used to build the wordmarks subpage </param>
        /// <param name="User"> Currently logged on user, which determines how some screens display (particularly the new items screen)</param>
        /// <param name="Code_Manager"> Code manager has all the aggregation codes and some of the hierarchy for all aggregations in this system </param>
        public Internal_HtmlSubwriter(Dictionary<string, Wordmark_Icon> Icon_Dictionary, User_Object User, Aggregation_Code_Manager Code_Manager )
        {
            iconList = Icon_Dictionary;
            user = User;
            codeManager = Code_Manager;
        }

        /// <summary> Writes the HTML generated by this internal html subwriter directly to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        /// <returns> TRUE -- Value indicating if html writer should finish the page immediately after this, or if there are other controls or routines which need to be called first </returns>
        public override bool Write_HTML(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.Write_HTML", "Rendering HTML");

            string title = Mode.SobekCM_Instance_Abbreviation.ToUpper() + " HOME";
            string collection_details = "COLLECTION HIERARCHY";
            string collection_details_title = "Active and Inactive Collections";
            string new_items = "NEW ITEMS";
            string new_items_title = "Newly Added or Modified Items";
            string memory_mgmt = "MEMORY MANAGEMENT";
            string memory_mgmt_title = "Current Memory Profile";
            string wordmarks = "WORDMARKS";
            string wordmarks_title = "Wordmarks";
            const string buildFailures = "BUILD FAILURES";
            const string buildFailuresTitle = "Build Failure Log";
            const string unauthorizedTitle = "Internal Users Only";
             string my_sobek_home = "my" + currentMode.SobekCM_Instance_Abbreviation.ToUpper() + " HOME";
            const string myLibrary = "MY LIBRARY";
            const string myPreferences = "MY ACCOUNT";
            const string internalTab = "INTERNAL";
            string sobek_admin = "SYSTEM ADMIN";
            if ((user.Is_Portal_Admin) && (!user.Is_System_Admin))
                sobek_admin = "PORTAL ADMIN";

            if (currentMode.Language == Web_Language_Enum.Spanish)
            {
                title = "INICIO";
                collection_details = "DETALLES DE LA COLECCIÓN";
                collection_details_title = "Activos e inactivos colecciones";
                new_items = "NUEVOS ARTÍCULOS";
                new_items_title = "Objetos recien Agregados o Modificados";
                memory_mgmt = "MEMORIA";
                memory_mgmt_title = "Actual del uso de la memoria";
            }

            if (currentMode.Language == Web_Language_Enum.French)
            {
                title = "PAGE D'ACCUEIL";
                collection_details = "DETAILS DE LA COLLECTION";
                collection_details_title = "Actifs et inactifs collections";
                new_items = "LES NOUVEAUX DOCUMENTS";
                new_items_title = "Documents récents ou venant d'être modifié";
                memory_mgmt = "MÉMOIRE";
                memory_mgmt_title = "L'utilisation de la mémoire en cours";
            }

            // Ensure there is a valid user, and the user is internal
            bool isAuthorized = false;
            if ((user != null) && ((user.Is_Internal_User) || ( user.Is_Portal_Admin ) || ( user.Is_System_Admin )))
                isAuthorized = true;

             // Save the current type
            Internal_Type_Enum type = currentMode.Internal_Type;
            Output.WriteLine("<div class=\"ViewsBrowsesRow\">");

            currentMode.Mode = Display_Mode_Enum.Aggregation_Home;
            Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + title + Unselected_Tab_End + "</a>");
            currentMode.Mode = Display_Mode_Enum.Internal;

            if (!isAuthorized)
            {
                Output.WriteLine("</div>");
                Output.WriteLine();

                Output.WriteLine("<div class=\"SobekSearchPanel\">");
                Output.WriteLine("  <h1>" + unauthorizedTitle + "</h1>");
                Output.WriteLine("</div>");

                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("<blockquote>");
                Output.WriteLine("You are not authorized to access this view.");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("<a href=\"" + currentMode.Base_URL + "l\"> Click here to return to the digital library home page. </a>");
                Output.WriteLine("</blockquote>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("</div>");

            }
            else
            {
                // Write the mySobek home tab
                currentMode.Mode = Display_Mode_Enum.My_Sobek;
                currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Home;
                Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + my_sobek_home + Unselected_Tab_End + "</a>");

                // Write the folders tab
                currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Folder_Management;
                Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + myLibrary + Unselected_Tab_End + "</a>");

                // Write the preferences tab
                currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Preferences;
                Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + myPreferences + Unselected_Tab_End + "</a>");

                 // The only time we don't show the standard INTERNAL view selectors is when NEW ITEMS is selected
                // and there are recenly added NEW ITEMS
                DataTable New_Items = null;
                if ( type == Internal_Type_Enum.New_Items )
                    New_Items = SobekCM_Database.Tracking_Update_List(Tracer);

                // If this user is internal, add that

                if (( New_Items != null ) && ( New_Items.Rows.Count > 0 ))
                {
                    currentMode.Mode = Display_Mode_Enum.Internal;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Selected_Tab_Start + internalTab + Selected_Tab_End + "</a>");
                    currentMode.Mode = Display_Mode_Enum.My_Sobek;
                }
                else
                {
                    Output.WriteLine( Selected_Tab_Start + internalTab + Selected_Tab_End);
                }



                // Write the sobek admin tab
                if ((user.Is_System_Admin) || ( user.Is_Portal_Admin ))
                {
                    currentMode.Mode = Display_Mode_Enum.Administrative;
                    currentMode.Admin_Type = Admin_Type_Enum.Home;
                    Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Unselected_Tab_Start + sobek_admin + Unselected_Tab_End + "</a>");
                }
                currentMode.Mode = Display_Mode_Enum.Internal;

                Output.WriteLine("</div>");
                Output.WriteLine();

                // Determine the title
                string stat_title = String.Empty;
                switch( type )
                {
                    case Internal_Type_Enum.Aggregations:
                    case Internal_Type_Enum.Aggregations_List:
                        stat_title = collection_details_title;
                        break;

                    case Internal_Type_Enum.New_Items:
                        stat_title = new_items_title;
                        break;

                    case Internal_Type_Enum.Build_Failures:
                        stat_title = buildFailuresTitle;
                        break;

                    case Internal_Type_Enum.Cache:
                        stat_title = memory_mgmt_title;
                        break;

                    case Internal_Type_Enum.Wordmarks:
                        stat_title = wordmarks_title;
                        break;
                }

                Output.WriteLine("<div class=\"SobekSearchPanel\">");
                Output.WriteLine("  <h1>" + stat_title + "</h1>");
                Output.WriteLine("</div>");



                if ((New_Items == null) || (New_Items.Rows.Count == 0))
                {
                    Output.WriteLine("<div class=\"ShowSelectRow\">");

                    if ((type == Internal_Type_Enum.Aggregations) || (type == Internal_Type_Enum.Aggregations_List))
                    {
                        Output.WriteLine("  " + Down_Selected_Tab_Start + collection_details + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Internal_Type = Internal_Type_Enum.Aggregations_List;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + collection_details + Down_Tab_End + "</a>");
                    }

                    if (type == Internal_Type_Enum.New_Items)
                    {
                        Output.WriteLine("  " + Down_Selected_Tab_Start + new_items + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Internal_Type = Internal_Type_Enum.New_Items;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + new_items + Down_Tab_End + "</a>");
                    }

                    if (type == Internal_Type_Enum.Build_Failures)
                    {
                        Output.WriteLine("  " + Down_Selected_Tab_Start + buildFailures + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Internal_Type = Internal_Type_Enum.Build_Failures;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + buildFailures + Down_Tab_End + "</a>");
                    }

                    if (type == Internal_Type_Enum.Cache)
                    {
                        Output.WriteLine("  " + Down_Selected_Tab_Start + memory_mgmt + Down_Selected_Tab_End);

                    }
                    else
                    {
                        currentMode.Internal_Type = Internal_Type_Enum.Cache;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + memory_mgmt + Down_Tab_End + "</a>");
                    }

                    if (type == Internal_Type_Enum.Wordmarks)
                    {
                        Output.WriteLine("  " + Down_Selected_Tab_Start + wordmarks + Down_Selected_Tab_End);

                    }
                    else
                    {
                        currentMode.Internal_Type = Internal_Type_Enum.Wordmarks;
                        Output.WriteLine("  <a href=\"" + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + wordmarks + Down_Tab_End + "</a>");
                    }
                    Output.WriteLine("</div>");
                }

                /*  THIS IS CURRENTLY DISABLED.. ONLY EVER SHOWS THE MASTER LIST 
                // Add subtypes for collection information
                if ((type == Internal_Type_Enum.Aggregations) || ( type == Internal_Type_Enum.Aggregations_List ))
                {
                    // Create the strings for the sub views
                    const string aggregations = "MASTER LIST";
                    const string single = "SINGLE AGGREGATIONS";
                    string submode = currentMode.Info_Browse_Mode;

                    // Add the master list first
                    Output.WriteLine("<div class=\"ShowSelectRow\">");
                    if (type == Internal_Type_Enum.Aggregations_List)
                    {
                        Output.WriteLine("  " + Down_Selected_Tab_Start + aggregations + Down_Selected_Tab_End);
                    }
                    else
                    {
                        currentMode.Internal_Type = Internal_Type_Enum.Aggregations_List;
                        currentMode.Info_Browse_Mode = String.Empty;
                        Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + aggregations + Down_Tab_End + "</a>");
                        currentMode.Internal_Type = type;
                    }

                    // Add the aggregation list next
                    if (codeManager.All_Types.Count > 0)
                    {
                        if (type == Internal_Type_Enum.Aggregations)
                        {
                            Output.WriteLine("  " + Down_Selected_Tab_Start + single + Down_Selected_Tab_End);
                        }
                        else
                        {
                            currentMode.Internal_Type = Internal_Type_Enum.Aggregations;
                            currentMode.Info_Browse_Mode = codeManager.All_Types[0];
                            Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + single + Down_Tab_End + "</a>");
                            currentMode.Internal_Type = type;
                        }
                    }

                   
                    currentMode.Internal_Type = type;
                    currentMode.Info_Browse_Mode = submode;
                    Output.WriteLine("</div>");
                } */

                // Set the type back
                currentMode.Internal_Type = type;

                // Add the appropriate text
                switch (type)
                {
                    case Internal_Type_Enum.Aggregations_List:
                        add_aggregations_master_list_html(Output, Tracer);
                        break;

                    case Internal_Type_Enum.Cache:
                        add_cache_html(Output, Tracer);
                        break;

                    case Internal_Type_Enum.Aggregations:
                        add_single_aggregation_html(Output, Tracer);
                        break;


                    case Internal_Type_Enum.New_Items:
                        add_new_item_html(Output, New_Items, Tracer);
                        break;

                    case Internal_Type_Enum.Build_Failures:
                        int start_month = DateTime.Now.Month;
                        int start_year = DateTime.Now.Year;
                        int end_month = DateTime.Now.Month;
                        int end_year = DateTime.Now.Year;
                        if (currentMode.Info_Browse_Mode.Length == 12)
                        {
                            Int32.TryParse(currentMode.Info_Browse_Mode.Substring(0, 4), out start_year);
                            Int32.TryParse(currentMode.Info_Browse_Mode.Substring(4, 2), out start_month);
                            Int32.TryParse(currentMode.Info_Browse_Mode.Substring(6, 4), out end_year);
                            Int32.TryParse(currentMode.Info_Browse_Mode.Substring(10, 2), out end_month);

                            if (start_year > end_year)
                            {
                                int save_year = start_year;
                                int save_month = start_month;
                                start_year = end_year;
                                start_month = end_month;
                                end_year = save_year;
                                end_month = save_month;
                            }

                            if ((start_year == end_year) && (end_month < start_month))
                            {
                                int save_month2 = start_month;
                                start_month = end_month;
                                end_month = save_month2;
                            }
                        }
                        add_build_failures(Output, start_month, start_year, end_month, end_year, Tracer);
                        break;

                    case Internal_Type_Enum.Wordmarks:
                        add_wordmarks(Output, Tracer);
                        break;
                }
            }

            return true;
        }

        #region Method to add the wordmarks to the response stream

        /// <summary> Adds the wordmarks to the response stream</summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_wordmarks(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_wordmarks", "Rendering HTML");

            Output.WriteLine("<br />");
            Output.WriteLine("");
            Output.WriteLine("</div>");
            Output.WriteLine("<center>");
            Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" width=\"1000px\" class=\"statsTable\">");
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"5\"></td></tr>");
            Output.WriteLine("  <tr align=\"center\" valign=\"bottom\" >");

            int current_column = 0;
            SortedList<string, Wordmark_Icon> sortedIcons = new SortedList<string, Wordmark_Icon>();
            foreach( Wordmark_Icon thisIcon in iconList.Values )
            {
                sortedIcons.Add( thisIcon.Code, thisIcon);
            }
           
            foreach ( Wordmark_Icon thisIcon in sortedIcons.Values )
            {
                Output.Write("    <td width=\"200px\">");
                if (thisIcon.Link.Length > 0)
                    Output.Write("<a href=\"" + thisIcon.Link + "\" target=\"_blank\">");
                Output.Write("<img border=\"0px\" class=\"SobekcmItemWorkdmark\" src=\"" + currentMode.Base_URL + "design/wordmarks/" +thisIcon.Image_FileName + "\"");
                if ( thisIcon.Title.Length > 0)
                    Output.Write(" title=\"" + thisIcon.Title + "\"");
                Output.Write(" />");
                if (thisIcon.Link.Length > 0)
                    Output.Write("</a>");
                Output.WriteLine("<br /><b>" + thisIcon.Code + "</b></td>");

                current_column++;

                if (current_column >= 5)
                {
                    Output.WriteLine("  </tr>");
                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"5\"></td></tr>");
                    Output.WriteLine("  <tr align=\"center\" valign=\"bottom\" >");
                    current_column = 0;
                }
            }

            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"5\"></td></tr>");

            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<br /><br />");
            Output.WriteLine("<div id=\"pagecontainer_resumed\">");
        }

        #endregion

        #region Method to add the build failures to the response stream

        /// <summary> Adds the list of build failures to the output stream for a given date range</summary>
        /// <param name="first_month"> Month for the first date in the date range </param>
        /// <param name="first_year"> Year for the first date in the date range </param>
        /// <param name="second_year"> Year for the last date in the date range</param>
        /// <param name="second_month"> Month for the last date in the date range</param>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_build_failures(TextWriter Output, int first_month, int first_year, int second_month, int second_year, Custom_Tracer Tracer)
        {
            currentMode.Internal_Type = Internal_Type_Enum.Build_Failures;

            Tracer.Add_Trace("Internal_HtmlSubwriter.add_build_failures", "Rendering HTML");

            string currentInfoBrowseMode = currentMode.Info_Browse_Mode;
            currentMode.Info_Browse_Mode = String.Empty;
            string redirect_url = currentMode.Redirect_URL();
            currentMode.Info_Browse_Mode = currentInfoBrowseMode;

            Output.WriteLine("<br />");
            Output.WriteLine("");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>The data below shows errors which occurred while loading new items through the builder.  These can be displayed by month and year below by selecting the start and end month.  These failures will continue to display until they are manually cleared by a DLC technician or until the item successfully loads after the failure or warning.</p>" );
            Output.WriteLine();
            Output.WriteLine("<h2>Selected Date Range</h2>");
            Output.WriteLine();
            Output.WriteLine("<p>The failures and warnings which were encountered during build are searchable below, by month:</p>");

            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:date_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"date1_selector\" class=\"SobekStatsDateSelector\">");

            int select_month = DateTime.Now.Month;
            int select_year = DateTime.Now.Year - 1;
            while ((select_month != DateTime.Now.Month) || (select_year != DateTime.Now.Year )) 
            {
                if ((first_month == select_month) && (first_year == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((first_month == select_month) && (first_year == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    To: <select name=\"date2_selector\" class=\"SobekStatsDateSelector\" >");

            select_month = DateTime.Now.Month;
            select_year = DateTime.Now.Year - 1;
            while ((select_month != DateTime.Now.Month) || (select_year != DateTime.Now.Year)) 
            {
                if ((second_month == select_month) && (second_year == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((second_month == select_month) && (second_year == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }

            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Range\" class=\"go_button\" onclick=\"date_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the date shown, choose your dates above and hit the GO button.</p>");
            Output.WriteLine();
            Output.WriteLine("<h2>Build Failures and Warnings</h2>");
            Output.WriteLine();
            Output.WriteLine("</div>");

            // Pull this date from the database
            DataTable values = SobekCM_Database.Get_Build_Error_Logs(Tracer, new DateTime( first_year, first_month, 1 ), new DateTime( second_year, second_month, 1).AddMonths(1));

            if ((values == null) || (values.Rows.Count == 0))
            {
                Output.WriteLine("<br />");
                Output.WriteLine("<center><b>No uncleared warnings or failures for the selected date range.</b></center>");
                Output.WriteLine("<br /><br />");
                return;
            }


            // Add the header information
            Output.WriteLine("<center>");
            Output.WriteLine("<table width=\"700px\" border=\"0px\" cellspacing=\"0px\"  class=\"statsTable\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th width=\"150px\"><span style=\"color: White\"><b>BIBID : VID</b></span></th>");
            Output.WriteLine("    <th width=\"150px\"><span style=\"color: White\"><b>METS TYPE</b></span></th>");
            Output.WriteLine("    <th width=\"400px\"><span style=\"color: White\"><b>DESCRIPTION</b></span></th>");
            Output.WriteLine("  </tr>");

            // Now, add each line
            string lastDate = String.Empty;
            foreach (DataRow thisRow in values.Rows)
            {
                // Get this date
                string thisDate = thisRow[4].ToString().Split(" ".ToCharArray())[0];

                // Is this a new date?
                if (thisDate != lastDate)
                {
                    Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" ><td colspan=\"3\"><span style=\"color: White\"><b>" + thisDate + "</b></span></td></tr>");
                    lastDate = thisDate;
                }

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"3\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">");
                Output.WriteLine("    <td><a href=\"?b=" + thisRow[0] + "&v=" + thisRow[1] + "\">" + thisRow[0] + " : " + thisRow[1] + "</a></td>");
                Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                Output.WriteLine("    <td>" + thisRow[3] + "</td>");
                Output.WriteLine("  </tr>");
            }
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"3\"></td></tr>");

            // Close out this table
            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<br />");
            Output.WriteLine();

        }

        #endregion

        #region Method to add the current memory profile to the response stream

        /// <summary> Adds the current memory profile to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_cache_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_cache_html", "Rendering HTML");

            HttpApplicationState applicationState = HttpContext.Current.Application;
            HttpSessionState session = HttpContext.Current.Session;

            string global_values = "GLOBAL VALUES";
            string application_state = "APPLICATION STATE VALUES";
            string local_cache_state = "LOCALLY CACHED OBJECTS";
            string remote_cache_state = "REMOTELY CACHED OBJECTS";
            string session_state = "SESSION STATE VALUES";
            string variable_name = "INSTANCE NAME";
            string key = "KEY";
            string objectTitle = "OBJECT";

                if (currentMode.Language == Web_Language_Enum.French)
                {
                    global_values = "VALEURS MONIDAL";
                    application_state = "APPLICATAION LES VALEURS DE L'ÉTAT";
                    local_cache_state = "MIS EN CACHE LOCALEMENT DES VALEURS";
                    remote_cache_state = "A DISTANCE EN CACHE DES VALEURS";
                    session_state = "SESSION LES VALEURS DE L'ÉTAT";
                    variable_name = "Nom Instance";
                    key = "Clef";
                    objectTitle = "Objet";
                }

                if (currentMode.Language == Web_Language_Enum.Spanish)
                {
                    global_values = "GLOBAL VALORES";
                    application_state = "APLICACIÓN ESTADO VALORES";
                    local_cache_state = "LOCALMENTE EN CACHE LOS VALORES";
                    remote_cache_state = "DE FORMA REMOTA LOS VALORES ALMACENADOS EN CACHE";
                    session_state = "SESIÓN ESTADO VALORES";
                    variable_name = "Instancia Nombre";
                    key = "Clave";
                    objectTitle = "Objeto";
                }

                // Start the application data
                Output.WriteLine("<br />");
                Output.WriteLine("");
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + global_values + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + variable_name + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                // Add each global value
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Checked_List</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Checked_Out_Items_List</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Codes</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Aggregation_Code_Manager</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Collection_Aliases</td>" + Environment.NewLine + "    <td>Dictionary&lt;string,string&gt;</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Icon_List</td>" + Environment.NewLine + "    <td>Dictionary&lt;string,SobekCM.Library.Application_State.Wordmark_Icon&gt;</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>IP_Restrictions</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.IP_Restriction_Ranges</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Item_List</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Item_Lookup_Object</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Last_Refresh</td>" + Environment.NewLine + "    <td>DateTime</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Search_History</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Recent_Searches</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Search_Stop_Words</td>" + Environment.NewLine + "    <td>List&lt;string&gt;</td>" + Environment.NewLine + "  </tr>");               

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Skins</td>" + Environment.NewLine + "    <td>SobekCM.Library.Skins.SobekCM_Skin_Collection</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Stats_Date_Range</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Statistics_Dates</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Thematic_Headings</td>" + Environment.NewLine + "    <td>List&lt;SobekCM.Library.Aggregations.Thematic_Heading&gt;</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Translation</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Language_Support_Info</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>URL_Portals</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Portal_List</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Version</td>" + Environment.NewLine + "    <td>string</td>" + Environment.NewLine + "  </tr>");

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");

                // Start the application data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + application_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Step through all the keys
                    string[] allkeys = applicationState.AllKeys;
                    if (allkeys.Length == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (string thisKey in allkeys)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisKey + "</td>");
                            if (applicationState[thisKey] != null)
                            {
                                Output.WriteLine("    <td>" + applicationState[thisKey].GetType().FullName + "</td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td><i>NULL</i></td>");
                            }
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch(Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling Application State memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");

                // Start the locally cached data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + local_cache_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Now, get the information from the cache
                    ReadOnlyCollection<Cached_Object_Info> locally_cached_objects = Cached_Data_Manager.Locally_Cached_Objects;
                    if (locally_cached_objects.Count == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (Cached_Object_Info thisItem in locally_cached_objects)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisItem.Object_Key + "</td>");
                            string type = thisItem.Object_Type.FullName;
                            if (type == "System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]")
                                type = "generic List&lt;System.String&gt;";
                            Output.WriteLine("    <td>" + type + "</td>");
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch (Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling local cache memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");

                // Start the remotely cached data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + remote_cache_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Now, get the information from the cache
                    ReadOnlyCollection<Cached_Object_Info> network_cached_objects = Cached_Data_Manager.Remotely_Cached_Objects;
                    if (network_cached_objects.Count == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (Cached_Object_Info thisItem in network_cached_objects)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisItem.Object_Key + "</td>");
                            string typeString = "<i>UNKNOWN</i>";
                            if ( thisItem.Object_Key != null )
                                typeString = thisItem.Object_Type.FullName;
                            if (typeString == "System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]")
                                typeString = "generic List&lt;System.String&gt;";
                            if (typeString != null && typeString.Length == 0)
                                typeString = "<i>UNKNOWN</i>";
                            Output.WriteLine("    <td>" + typeString + "</td>");
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch (Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling remotely cached memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");


                // Start the session data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + session_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Now, get the information from the Session
                    //	System.Collections.Specialized.NameObjectCollectionBase.KeysCollection sessionkeys = Session.Keys;
                    if (session.Count == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (string thisKey in session.Keys)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisKey + "</td>");
                            Output.WriteLine("    <td>" + session[thisKey].GetType().FullName + "</td>");
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch (Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling Session State memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine();
        }

        #endregion

        #region Method to add information about a single aggregation to the response stream

        /// <summary> Adds information about a single type of aggregation to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_single_aggregation_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_collection_html", "Rendering HTML");

            // Start the text
            Output.WriteLine("<br />");
            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<h2>All Aggregation Types</h2>");
            Output.WriteLine("<p>Select one of the aggregation types below to view information about all aggregations of that type.</p>");
            Output.WriteLine("<blockquote>");

            // Now, add each individual aggregation type
            currentMode.Internal_Type = Internal_Type_Enum.Aggregations;
            string curentSubMode = currentMode.Info_Browse_Mode;
            ReadOnlyCollection<string> allTypes = codeManager.All_Types;
            SortedList<string, string> sortedTypes = new SortedList<string, string>();
            foreach (string t in allTypes)
                sortedTypes.Add(t, t);
            string current_type = allTypes[0];
            foreach (string thisType in sortedTypes.Keys)
            {
                if (curentSubMode == thisType.ToLower())
                {
                    current_type = thisType;
                    Output.WriteLine("<span style=\"color:Gray\">" + thisType +"</span><br />");
                }
                else
                {
                    currentMode.Info_Browse_Mode = thisType;
                    Output.WriteLine("<a href=\"" + currentMode.Redirect_URL() + "\">" + thisType + "</a><br />");
                }
            }
            currentMode.Info_Browse_Mode = curentSubMode;
            Output.WriteLine("</blockquote>");
            Output.WriteLine("<h2>All " + current_type + "s</h2>");

            string active = "ACTIVE " + current_type.ToUpper() + "S";
            string inactive = "INACTIVE " + current_type.ToUpper() + "S";

            // Start the data
            Output.WriteLine("</div>");
            Output.WriteLine("</div> <!-- ends PageContainer div momentarily for this extra wide table -->");

            // Get all the matching aggregations
            ReadOnlyCollection<Item_Aggregation_Related_Aggregations> aggregations = codeManager.Aggregations_By_Type(current_type);

            // Get the relationships between aggregations
            DataTable aggregationRelationships = SobekCM_Database.Get_Aggregation_Hierarchies(Tracer);
            DataColumn childCodeColumn = null;
            DataColumn childNameColumn = null;
            DataColumn parentCodeColumn = null;
            DataColumn parentNameColumn = null;
            if (aggregationRelationships != null)
            {
                childCodeColumn = aggregationRelationships.Columns["Code"];
                childNameColumn = aggregationRelationships.Columns["ShortName"];
                parentCodeColumn = aggregationRelationships.Columns["ParentCode"];
                parentNameColumn = aggregationRelationships.Columns["Parent_ShortName"];
            }

            // If there was no count, or no rows returned, say something
            if ((aggregations == null) || (aggregations.Count == 0))
            {
                Output.WriteLine("<b>NO INFORMATION AVAILABLE</b>");
                return;
            }

            // Add the header information
            Output.WriteLine("<table width=\"1215px\" border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\">");

            Output.WriteLine("    <th align=\"left\" width=\"50px\"><span style=\"color: White\"><b>SobekCM CODE</b></span></th>");
            Output.WriteLine("    <th align=\"left\" width=\"301px\"><span style=\"color: White\"><b>NAME</b></span></th>");
            Output.WriteLine("    <th align=\"left\" width=\"432px\"><span style=\"color: White\"><b>PARENTS</b></span></th>");
            Output.WriteLine("    <th align=\"left\" width=\"432px\"><span style=\"color: White\"><b>CHILDREN</b></span></th>");
            Output.WriteLine("  </tr>");

            // See if both activa and inactive exist
            bool active_exist = false;
            bool inactive_exist = false;
            foreach (Item_Aggregation_Related_Aggregations thisAggregation in aggregations)
            {
                if (thisAggregation.Active)
                    active_exist = true;
                if (!thisAggregation.Active)
                    inactive_exist = true;
                if ((active_exist) && (inactive_exist))
                    break;
            }

            // Now, add each active line
            if (active_exist)
            {
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\"><td colspan=\"4\"><span style=\"color: White\"><b>" + active + "</b></span></td></tr>");
                foreach (Item_Aggregation_Related_Aggregations thisAggregation in aggregations)
                {
                    // Add this row
                    if (thisAggregation.Active)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"4\"></td></tr>");

                        Output.WriteLine("  <tr align=\"left\" valign=\"top\">");

                        Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisAggregation.Code + "\">" + thisAggregation.Code + "</a></td>");

                        //Output.WriteLine("    <td>" + thisAggregation.Code + "</td>");

                        Output.WriteLine("    <td>" + thisAggregation.ShortName + "</td>");

                        // Add relationship information
                        if (aggregationRelationships != null)
                        {
                            // Add parents codes first
                            DataRow[] parents = aggregationRelationships.Select("ChildID=" + thisAggregation.ID);
                            if (parents.Length > 0)
                            {
                                Output.Write("    <td>");
                                int parent_count = 0;
                                foreach (DataRow thisRow in parents)
                                {
                                    string code = thisRow[parentCodeColumn].ToString();
                                    if (code != "ALL")
                                    {
                                        if (parent_count > 0)
                                            Output.Write("<br />");
                                        Item_Aggregation_Related_Aggregations parentAggr = codeManager[code];
                                        if ((parentAggr != null) && (parentAggr.Active))
                                            Output.Write("<a href=\"" + currentMode.Base_URL + code + "\">" + code + "</a> (" + parentAggr.ShortName + ")");
                                        else
                                            Output.Write(code + " (" + thisRow[parentNameColumn] + ")");
                                        parent_count++;
                                    }
                                }
                                Output.WriteLine("</td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>&nbsp;</td>");
                            }

                            // Add child codes next
                            DataRow[] children = aggregationRelationships.Select("ParentID=" + thisAggregation.ID);
                            if (children.Length > 0)
                            {
                                Output.Write("    <td>");
                                int child_count = 0;
                                foreach (DataRow thisRow in children)
                                {
                                    string code = thisRow[childCodeColumn].ToString();
                                    if (child_count > 0)
                                        Output.Write("<br />");
                                    Item_Aggregation_Related_Aggregations childAggr = codeManager[code];
                                    if ((childAggr != null) && (childAggr.Active))
                                        Output.Write("<a href=\"" + currentMode.Base_URL + code + "\">" + code + "</a> (" + childAggr.ShortName + ")");
                                    else
                                        Output.Write(thisRow[childCodeColumn] + " (" + thisRow[childNameColumn] + ")");
                                    child_count++;
                                }
                                Output.WriteLine("</td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>&nbsp;</td>");
                            }
                        }
                        else
                        {
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                        }
                        Output.WriteLine("  </tr>");
                    }
                }
            }

            // Now, add each inactive line
            if (inactive_exist)
            {
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\"><td colspan=\"4\"><span style=\"color: White\"><b>" + inactive + "</b></span></td></tr>");
                foreach (Item_Aggregation_Related_Aggregations thisAggregation in aggregations)
                {
                    // Add this row
                    if (!thisAggregation.Active)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"4\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\" valign=\"top\">");
                        Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisAggregation.Code + "\">" + thisAggregation.Code + "</a></td>");
                        Output.WriteLine("    <td>" + thisAggregation.ShortName + "</td>");

                        // Add relationship information
                        if (aggregationRelationships != null)
                        {
                            // Add parents codes first
                            DataRow[] parents = aggregationRelationships.Select("ChildID=" + thisAggregation.ID);
                            if (parents.Length > 0)
                            {
                                Output.Write("    <td>");
                                int parent_count = 0;
                                foreach (DataRow thisRow in parents)
                                {
                                    string code = thisRow[parentCodeColumn].ToString();
                                    if (code != "ALL")
                                    {
                                        if (parent_count > 0)
                                            Output.Write("<br />");
                                        Item_Aggregation_Related_Aggregations parentAggr = codeManager[code];
                                        if ((parentAggr != null) && (parentAggr.Active))
                                            Output.Write("<a href=\"" + currentMode.Base_URL + code + "\">" + code + "</a> (" + parentAggr.ShortName + ")");
                                        else
                                            Output.Write(code + " (" + thisRow[parentNameColumn] + ")");
                                        parent_count++;
                                    }
                                }
                                Output.WriteLine("</td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>&nbsp;</td>");
                            }

                            // Add child codes next
                            DataRow[] children = aggregationRelationships.Select("ParentID=" + thisAggregation.ID);
                            if (parents.Length > 0)
                            {
                                Output.Write("    <td>");
                                int child_count = 0;
                                foreach (DataRow thisRow in children)
                                {
                                    string code = thisRow[childCodeColumn].ToString();
                                    if (child_count > 0)
                                        Output.Write("<br />");
                                    Item_Aggregation_Related_Aggregations childAggr = codeManager[code];
                                    if ((childAggr != null) && (childAggr.Active))
                                        Output.Write("<a href=\"" + currentMode.Base_URL + code + "\">" + code + "</a> (" + childAggr.ShortName + ")");
                                    else
                                        Output.Write(thisRow[childCodeColumn] + " (" + thisRow[childNameColumn] + ")");
                                    child_count++;
                                }
                                Output.WriteLine("</td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td>&nbsp;</td>");
                            }
                        }
                        else
                        {
                            Output.WriteLine("    <td>&nbsp;</td>");
                            Output.WriteLine("    <td>&nbsp;</td>");
                        }
                        Output.WriteLine("  </tr>");
                    }
                }
            }

            // Close out this table
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"4\"></td></tr>");
            Output.WriteLine("</table>");
            Output.WriteLine("<br /> <br />");
            Output.WriteLine("<div id=\"pagecontainer_resumed\">");
            Output.WriteLine();
        }

        #endregion

        #region Method to add the master list of ALL aggregations

        /// <summary> Adds information about all aggregations to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_aggregations_master_list_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_collection_html", "Rendering HTML");


            // Get the collection information
            DataTable collInfo = SobekCM_Database.Get_Codes_Item_Aggregations( Tracer);

            // If there was no count, or no rows returned, say something
            if ((collInfo == null) || (collInfo.Rows.Count == 0))
            {
                Output.WriteLine("<b>ERROR PULLING MASTER LIST</b>");
                return;
            }

            // Put the data into a data view
            DataView collInfoView = new DataView(collInfo);

            // Add text at the top and sort the dataset if necessary
            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<br />");
            Output.WriteLine("<p>Below is the complete master list of all aggregations within this library.  This includes all active aggregations, as well as all hidden or inactive collections.</p>");
            if (( currentMode.Info_Browse_Mode.Length == 0 ) || ( currentMode.Info_Browse_Mode.ToUpper() != "DATE" ))
            {
                currentMode.Info_Browse_Mode = "date";
                Output.WriteLine("<p><a href=\"" + currentMode.Redirect_URL() + "\">Click here to sort by DATE ADDED</a></p>");
                currentMode.Info_Browse_Mode = String.Empty;
            }
            else
            {
                currentMode.Info_Browse_Mode = String.Empty;
                Output.WriteLine("<p><a href=\"" + currentMode.Redirect_URL() + "\">Click here to sort by CODE</a></p>");
                currentMode.Info_Browse_Mode = "date";

                collInfoView.Sort = "DateAdded DESC, Code ASC";
            }
            Output.WriteLine("<br />");
            Output.WriteLine("</div>");
            Output.WriteLine("</div>");
            Output.WriteLine("<center>");

            // Add the header information
            Output.WriteLine("<table width=\"900px\" border=\"0px\" cellspacing=\"0px\" class=\"statsTable\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\">");
            Output.WriteLine("    <th><span style=\"color: White\"><b>SobekCM CODE</b></span></th>");
            Output.WriteLine("    <th><span style=\"color: White\"><b>TYPE</b></span></th>");
            Output.WriteLine("    <th><span style=\"color: White\"><b>NAME</b></span></th>");
            Output.WriteLine("    <th><span style=\"color: White\"><b>DATE ADDED</b></span></th>");
            Output.WriteLine("  </tr>");

            // Now, add each active line
            string lastCode = String.Empty;
            foreach (DataRowView thisRow in collInfoView)
            {
                string code = thisRow.Row["Code"].ToString();
                if ( code != lastCode )
                {
                    lastCode = code;

                    // Add this row
                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"4\"></td></tr>");

                    Output.WriteLine("  <tr align=\"left\">");
                    Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + code + "\">" + code + "</a></td>");
                    Output.WriteLine("    <td>" + thisRow.Row["Type"] + "</td>");
                    Output.WriteLine("    <td>" + thisRow.Row["ShortName"] + "</td>");

                    DateTime dateAdded = Convert.ToDateTime( thisRow.Row["DateAdded"]);
                    if ( dateAdded.Year > 2000 )
                    {
                        Output.WriteLine("    <td>" + dateAdded.ToShortDateString() + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("    <td>&nbsp;</td>");
                    }
                    Output.WriteLine("  </tr>");
                }
            }


            // Close out this table
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"4\"></td></tr>");
            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<div id=\"pagecontainer_resumed\">");
            Output.WriteLine("<br /> <br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to add the list of all new and recently changed items

        /// <summary> Adds the list of all new and recently changed items to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="New_Items"> The list of recently added/changed items to display </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_new_item_html(TextWriter Output, DataTable New_Items, Custom_Tracer Tracer)
        {
            // Create the strings for the sub views
            const string bibid = "BIBID : VID";
            string last_event = "DATE";
            string mets_type = "METS TYPE";
            const string allTypes = "ALL";

            string online_edits = "ONLINE EDITS";
            string online_submits = "ONLINE SUBMITS";
            string visibility = "VISIBILITY CHANGES";
            string bulk_loaded = "BULK LOADED";
            string post_processed = "POST-PROCESSED";


            switch (currentMode.Language)
            {
                case Web_Language_Enum.French:
                    last_event = "Dernière année de construction";
                    mets_type = "Type de METS";
                    break;

                case Web_Language_Enum.Spanish:
                    last_event = "Última Construido";
                    mets_type = "Tipe de METS";
                    break;
            }

            // If there was no count, or no rows returned, say something
            if ((New_Items == null) || (New_Items.Rows.Count == 0))
            {
                Output.WriteLine("<br /><br /><strong>NO NEW ITEMS</strong><br /><br />");
                return;
            }

            // Get the submode
            string type = currentMode.Info_Browse_Mode;

            // Make sure the value is one of the set values
            if ((type != String.Empty) && (type != "all") && (type != "edit") && (type != "submit") && (type != "visibility") && (type != "bulkloaded") && (type != "postprocessed"))
                type = String.Empty;

            // set to ALL as default if there aren't an extraordinary number of rows
            if ((New_Items.Rows.Count < 5000) && ( type.Length == 0 ))
            {
                type = "all";
            }

            // Add the number of each metadata type to the end
            online_edits = online_edits + " ( " + New_Items.Select("WorkFlowName = 'Online Edit'").Length + " )";
            online_submits = online_submits + " ( " + New_Items.Select("WorkFlowName = 'Online Submit'").Length + " )";
            visibility = visibility + " ( " + New_Items.Select("WorkFlowName='Made Private' or WorkFlowName='Made Public' or WorkFlowName='Made Restricted'").Length + " )";
            bulk_loaded = bulk_loaded + " ( " + New_Items.Select("WorkFlowName = 'Bulk Loaded'").Length + " )";
            post_processed = post_processed + " ( " + New_Items.Select("WorkFlowName = 'Post-Processed'").Length + " )";


            Output.WriteLine("<div class=\"ShowSelectRow\">");
            if (type == "all")
            {
                Output.WriteLine("  " + Down_Selected_Tab_Start + allTypes + Down_Selected_Tab_End);
            }
            else
            {
                currentMode.Info_Browse_Mode = "all";
                Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + allTypes + Down_Tab_End + "</a>");
            }

            if (type == "edit")
            {
                Output.WriteLine("  " + Down_Selected_Tab_Start + online_edits + Down_Selected_Tab_End);
            }
            else
            {
                currentMode.Info_Browse_Mode = "edit";
                Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + online_edits + Down_Tab_End + "</a>");
            }

            if (type == "submit")
            {
                Output.WriteLine("  " + Down_Selected_Tab_Start + online_submits + Down_Selected_Tab_End);
            }
            else
            {
                currentMode.Info_Browse_Mode = "submit";
                Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + online_submits + Down_Tab_End + "</a>");
            }

            if (type == "visibility")
            {
                Output.WriteLine("  " + Down_Selected_Tab_Start + visibility + Down_Selected_Tab_End);
            }
            else
            {
                currentMode.Info_Browse_Mode = "visibility";
                Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + visibility + Down_Tab_End + "</a>");
            }

            if (type == "bulkloaded")
            {
                Output.WriteLine("  " + Down_Selected_Tab_Start + bulk_loaded + Down_Selected_Tab_End);
            }
            else
            {
                currentMode.Info_Browse_Mode = "bulkloaded";
                Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + bulk_loaded + Down_Tab_End + "</a>");
            }

            if (type == "postprocessed")
            {
                Output.WriteLine("  " + Down_Selected_Tab_Start + post_processed + Down_Selected_Tab_End);
            }
            else
            {
                currentMode.Info_Browse_Mode = "postprocessed";
                Output.WriteLine("  <a href=\"" + SobekCM_Library_Settings.Base_SobekCM_Location_Relative + currentMode.Redirect_URL() + "\">" + Down_Tab_Start + post_processed + Down_Tab_End + "</a>");
            }
            Output.WriteLine("</div>");
            currentMode.Info_Browse_Mode = type;

            Output.WriteLine("<br />");
            Output.WriteLine("");

            string thisDate;
            string lastDate = String.Empty;

            bool display_user = false;
            int columns = 3;
            int width = 600;
            if ((user != null) && (user.Is_Internal_User))
            {
                display_user = true;
                columns = 4;
                width = 750;
            }

            if (type.Length == 0)
            {
                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine("<br />");
                Output.WriteLine("<p>There have been an unusually large number of updates over the last week.</p>");
                Output.WriteLine("<p>Select the update type tab above to view the details.</p>");
                Output.WriteLine("<br />");
                Output.WriteLine("<br />");
                Output.WriteLine("</div>");
                return;
            }

            Output.WriteLine("<br />");


            // Now, add each line
            if (type == "all")
            {
                if (New_Items.Rows.Count > 0)
                {
                    // Add the header information
                    Output.WriteLine("<table width=\"" + width + "px\" border=\"0px\" cellspacing=\"0px\">");
                    Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
                    Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>" + bibid + "</b></span></th>");
                    Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>" + last_event + "</b></span></th>");
                    Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>" + mets_type + "</b></span></th>");
                    if (display_user)
                    {
                        Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>USER</b></span></th>");
                    }
                    Output.WriteLine("  </tr>");

                    foreach (DataRow thisRow in New_Items.Rows)
                    {
                        // Get this date
                        thisDate = thisRow[2].ToString().Split(" ".ToCharArray())[0];

                        // Is this a new date?
                        if (thisDate != lastDate)
                        {
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" ><td colspan=\"" + columns + "\"><span style=\"color: White\"><b>" + thisDate + "</b></span></td></tr>");

                            lastDate = thisDate;
                        }

                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[0] + "/" + thisRow[1] + "\">" + thisRow[0] + " : " + thisRow[1] + "</a></td>");
                        Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                        Output.WriteLine("    <td>" + thisRow[3] + "</td>");

                        if (display_user)
                        {
                            Output.WriteLine("    <td>" + thisRow[4] + "</td>");
                        }

                        Output.WriteLine("  </tr>");
                    }

                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    Output.WriteLine("</table>");
                }
                else
                {
                    Output.WriteLine("<br />");
                    Output.WriteLine("<center>NO TRACKING INFORMATION FOR YOUR SELECTION.</center>");
                    Output.WriteLine("<br />");
                }
            }
            else
            {
                DataRow[] matches = null;
                switch (type)
                {
                    case "edit":
                        matches = New_Items.Select("WorkFlowName = 'Online Edit'");
                        break;

                    case "submit":
                        matches = New_Items.Select("WorkFlowName = 'Online Submit'");
                        break;

                    case "visibility":
                        matches = New_Items.Select("WorkFlowName='Made Private' or WorkFlowName='Made Public' or WorkFlowName='Made Restricted'");
                        break;

                    case "bulkloaded":
                        matches = New_Items.Select("WorkFlowName = 'Bulk Loaded'");
                        break;

                    case "postprocessed":
                        matches = New_Items.Select("WorkFlowName = 'Post-Processed'");
                        break;
                }

                if ((matches != null) && ( matches.Length > 0 ))
                {
                    // Add the header information
                    Output.WriteLine("<table width=\"" + width + "px\" border=\"0px\" cellspacing=\"0px\">");
                    Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
                    Output.WriteLine("    <th><span style=\"color: White\"><b>" + bibid + "</b></span></th>");
                    Output.WriteLine("    <th><span style=\"color: White\"><b>" + last_event + "</b></span></th>");
                    Output.WriteLine("    <th><span style=\"color: White\"><b>" + mets_type + "</b></span></th>");
                    if (display_user)
                    {
                        Output.WriteLine("    <th><span style=\"color: White\"><b>USER</b></span></th>");
                    }
                    Output.WriteLine("  </tr>");

                    foreach (DataRow thisRow in matches)
                    {
                        // Get this date
                        thisDate = thisRow[2].ToString().Split(" ".ToCharArray())[0];

                        // Is this a new date?
                        if (thisDate != lastDate)
                        {
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" ><td colspan=\"" + columns + "\"><span style=\"color: White\"><b>" + thisDate + "</b></span></td></tr>");

                            lastDate = thisDate;
                        }

                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><a href=\"" + currentMode.Base_URL + thisRow[0] + "/" + thisRow[1] + "\">" + thisRow[0] + " : " + thisRow[1] + "</a></td>");
                        Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                        Output.WriteLine("    <td>" + thisRow[3] + "</td>");

                        if (display_user)
                        {
                            Output.WriteLine("    <td>" + thisRow[4] + "</td>");
                        }

                        Output.WriteLine("  </tr>");
                    }

                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    Output.WriteLine("</table>");
                }
                else
                {
                    Output.WriteLine("<br />");
                    Output.WriteLine("<center>NO INFORMATION FOR YOUR SELECTION.</center>");
                    Output.WriteLine("<br />");
                }
            }

            Output.WriteLine("<br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to convert between the month sequence and the english month name

        /// <summary> Convert between the month sequence and the english month name </summary>
        /// <param name="Month_Int"> Sequence for the month to return the string for </param>
        /// <returns> The name of the month indicated, or INVALID </returns>
        protected internal string Month_From_Int(int Month_Int)
        {
            string monthString1 = "Invalid";
            switch (Month_Int)
            {
                case 1:
                    monthString1 = "January";
                    break;

                case 2:
                    monthString1 = "February";
                    break;

                case 3:
                    monthString1 = "March";
                    break;

                case 4:
                    monthString1 = "April";
                    break;

                case 5:
                    monthString1 = "May";
                    break;

                case 6:
                    monthString1 = "June";
                    break;

                case 7:
                    monthString1 = "July";
                    break;

                case 8:
                    monthString1 = "August";
                    break;

                case 9:
                    monthString1 = "September";
                    break;

                case 10:
                    monthString1 = "October";
                    break;

                case 11:
                    monthString1 = "November";
                    break;

                case 12:
                    monthString1 = "December";
                    break;
            }
            return monthString1;
        }

        #endregion
    }
}
