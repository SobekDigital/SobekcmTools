//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=1.1.4322.2032.
// 

#pragma warning disable 1591

namespace SobekCM.Library.Items.Authority
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Map_Features_DataSet : DataSet {
        
        private FeaturesDataTable tableFeatures;
        
        private TypesDataTable tableTypes;
        
        public Map_Features_DataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Map_Features_DataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Features"] != null)) {
                    this.Tables.Add(new FeaturesDataTable(ds.Tables["Features"]));
                }
                if ((ds.Tables["Types"] != null)) {
                    this.Tables.Add(new TypesDataTable(ds.Tables["Types"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeaturesDataTable Features {
            get {
                return this.tableFeatures;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TypesDataTable Types {
            get {
                return this.tableTypes;
            }
        }
        
        public override DataSet Clone() {
            Map_Features_DataSet cln = ((Map_Features_DataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Features"] != null)) {
                this.Tables.Add(new FeaturesDataTable(ds.Tables["Features"]));
            }
            if ((ds.Tables["Types"] != null)) {
                this.Tables.Add(new TypesDataTable(ds.Tables["Types"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        public void InitVars() {
            this.tableFeatures = ((FeaturesDataTable)(this.Tables["Features"]));
            if ((this.tableFeatures != null)) {
                this.tableFeatures.InitVars();
            }
            this.tableTypes = ((TypesDataTable)(this.Tables["Types"]));
            if ((this.tableTypes != null)) {
                this.tableTypes.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Map_Features_DataSet";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableFeatures = new FeaturesDataTable();
            this.Tables.Add(this.tableFeatures);
            this.tableTypes = new TypesDataTable();
            this.Tables.Add(this.tableTypes);
        }
        
        private bool ShouldSerializeFeatures() {
            return false;
        }
        
        private bool ShouldSerializeTypes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void FeaturesRowChangeEventHandler(object sender, FeaturesRowChangeEvent e);
        
        public delegate void TypesRowChangeEventHandler(object sender, TypesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeaturesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnFeatureName;
            
            private DataColumn columnLocationDesc;
            
            private DataColumn columnAA_Indicated;
            
            private DataColumn columnCorporateName;
            
            private DataColumn columnCorporateID;
            
            private DataColumn columnPageName;
            
            private DataColumn columnsorter;
            
            public FeaturesDataTable() : 
                    base("Features") {
                this.InitClass();
            }
            
            public FeaturesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            public DataColumn FeatureNameColumn {
                get {
                    return this.columnFeatureName;
                }
            }
            
            public DataColumn LocationDescColumn {
                get {
                    return this.columnLocationDesc;
                }
            }
            
            public DataColumn AA_IndicatedColumn {
                get {
                    return this.columnAA_Indicated;
                }
            }
            
            public DataColumn CorporateNameColumn {
                get {
                    return this.columnCorporateName;
                }
            }
            
            public DataColumn CorporateIDColumn {
                get {
                    return this.columnCorporateID;
                }
            }
            
            public DataColumn PageNameColumn {
                get {
                    return this.columnPageName;
                }
            }
            
            public DataColumn sorterColumn {
                get {
                    return this.columnsorter;
                }
            }
            
            public FeaturesRow this[int index] {
                get {
                    return ((FeaturesRow)(this.Rows[index]));
                }
            }
            
            public event FeaturesRowChangeEventHandler FeaturesRowChanged;
            
            public event FeaturesRowChangeEventHandler FeaturesRowChanging;
            
            public event FeaturesRowChangeEventHandler FeaturesRowDeleted;
            
            public event FeaturesRowChangeEventHandler FeaturesRowDeleting;
            
            public void AddFeaturesRow(FeaturesRow row) {
                this.Rows.Add(row);
            }
            
            public FeaturesRow AddFeaturesRow(int FeatureID, string FeatureName, string LocationDesc, bool AA_Indicated, string CorporateName, int CorporateID, string PageName, string sorter) {
                FeaturesRow rowFeaturesRow = ((FeaturesRow)(this.NewRow()));
                rowFeaturesRow.ItemArray = new object[] {
                        FeatureID,
                        FeatureName,
                        LocationDesc,
                        AA_Indicated,
                        CorporateName,
                        CorporateID,
                        PageName,
                        sorter};
                this.Rows.Add(rowFeaturesRow);
                return rowFeaturesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FeaturesDataTable cln = ((FeaturesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FeaturesDataTable();
            }
            
            public void InitVars() {
                this.columnFeatureID = this.Columns["FeatureID"];
                this.columnFeatureName = this.Columns["FeatureName"];
                this.columnLocationDesc = this.Columns["LocationDesc"];
                this.columnAA_Indicated = this.Columns["AA_Indicated"];
                this.columnCorporateName = this.Columns["CorporateName"];
                this.columnCorporateID = this.Columns["CorporateID"];
                this.columnPageName = this.Columns["PageName"];
                this.columnsorter = this.Columns["sorter"];
            }
            
            private void InitClass() {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureID);
                this.columnFeatureName = new DataColumn("FeatureName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureName);
                this.columnLocationDesc = new DataColumn("LocationDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocationDesc);
                this.columnAA_Indicated = new DataColumn("AA_Indicated", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAA_Indicated);
                this.columnCorporateName = new DataColumn("CorporateName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCorporateName);
                this.columnCorporateID = new DataColumn("CorporateID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCorporateID);
                this.columnPageName = new DataColumn("PageName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPageName);
                this.columnsorter = new DataColumn("sorter", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsorter);
            }
            
            public FeaturesRow NewFeaturesRow() {
                return ((FeaturesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FeaturesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FeaturesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeaturesRowChanged != null)) {
                    this.FeaturesRowChanged(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeaturesRowChanging != null)) {
                    this.FeaturesRowChanging(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeaturesRowDeleted != null)) {
                    this.FeaturesRowDeleted(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeaturesRowDeleting != null)) {
                    this.FeaturesRowDeleting(this, new FeaturesRowChangeEvent(((FeaturesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFeaturesRow(FeaturesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeaturesRow : DataRow {
            
            private FeaturesDataTable tableFeatures;
            
            public FeaturesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeatures = ((FeaturesDataTable)(this.Table));
            }
            
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[this.tableFeatures.FeatureIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.FeatureIDColumn] = value;
                }
            }
            
            public string FeatureName {
                get {
                    try {
                        return ((string)(this[this.tableFeatures.FeatureNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.FeatureNameColumn] = value;
                }
            }
            
            public string LocationDesc {
                get {
                    try {
                        return ((string)(this[this.tableFeatures.LocationDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.LocationDescColumn] = value;
                }
            }
            
            public bool AA_Indicated {
                get {
                    try {
                        return ((bool)(this[this.tableFeatures.AA_IndicatedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.AA_IndicatedColumn] = value;
                }
            }
            
            public string CorporateName {
                get {
                    try {
                        return ((string)(this[this.tableFeatures.CorporateNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.CorporateNameColumn] = value;
                }
            }
            
            public int CorporateID {
                get {
                    try {
                        return ((int)(this[this.tableFeatures.CorporateIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.CorporateIDColumn] = value;
                }
            }
            
            public string PageName {
                get {
                    try {
                        return ((string)(this[this.tableFeatures.PageNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.PageNameColumn] = value;
                }
            }
            
            public string sorter {
                get {
                    try {
                        return ((string)(this[this.tableFeatures.sorterColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatures.sorterColumn] = value;
                }
            }
            
            public bool IsFeatureIDNull() {
                return this.IsNull(this.tableFeatures.FeatureIDColumn);
            }
            
            public void SetFeatureIDNull() {
                this[this.tableFeatures.FeatureIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFeatureNameNull() {
                return this.IsNull(this.tableFeatures.FeatureNameColumn);
            }
            
            public void SetFeatureNameNull() {
                this[this.tableFeatures.FeatureNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationDescNull() {
                return this.IsNull(this.tableFeatures.LocationDescColumn);
            }
            
            public void SetLocationDescNull() {
                this[this.tableFeatures.LocationDescColumn] = System.Convert.DBNull;
            }
            
            public bool IsAA_IndicatedNull() {
                return this.IsNull(this.tableFeatures.AA_IndicatedColumn);
            }
            
            public void SetAA_IndicatedNull() {
                this[this.tableFeatures.AA_IndicatedColumn] = System.Convert.DBNull;
            }
            
            public bool IsCorporateNameNull() {
                return this.IsNull(this.tableFeatures.CorporateNameColumn);
            }
            
            public void SetCorporateNameNull() {
                this[this.tableFeatures.CorporateNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCorporateIDNull() {
                return this.IsNull(this.tableFeatures.CorporateIDColumn);
            }
            
            public void SetCorporateIDNull() {
                this[this.tableFeatures.CorporateIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsPageNameNull() {
                return this.IsNull(this.tableFeatures.PageNameColumn);
            }
            
            public void SetPageNameNull() {
                this[this.tableFeatures.PageNameColumn] = System.Convert.DBNull;
            }
            
            public bool IssorterNull() {
                return this.IsNull(this.tableFeatures.sorterColumn);
            }
            
            public void SetsorterNull() {
                this[this.tableFeatures.sorterColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FeaturesRowChangeEvent : EventArgs {
            
            private FeaturesRow eventRow;
            
            private DataRowAction eventAction;
            
            public FeaturesRowChangeEvent(FeaturesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FeaturesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFeatureID;
            
            private DataColumn columnFeatureTypeName;
            
            private DataColumn columnFeatureTypeID;
            
            private DataColumn columnParentFeatureTypeID;
            
            public TypesDataTable() : 
                    base("Types") {
                this.InitClass();
            }
            
            public TypesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public DataColumn FeatureIDColumn {
                get {
                    return this.columnFeatureID;
                }
            }
            
            public DataColumn FeatureTypeNameColumn {
                get {
                    return this.columnFeatureTypeName;
                }
            }
            
            public DataColumn FeatureTypeIDColumn {
                get {
                    return this.columnFeatureTypeID;
                }
            }
            
            public DataColumn ParentFeatureTypeIDColumn {
                get {
                    return this.columnParentFeatureTypeID;
                }
            }
            
            public TypesRow this[int index] {
                get {
                    return ((TypesRow)(this.Rows[index]));
                }
            }
            
            public event TypesRowChangeEventHandler TypesRowChanged;
            
            public event TypesRowChangeEventHandler TypesRowChanging;
            
            public event TypesRowChangeEventHandler TypesRowDeleted;
            
            public event TypesRowChangeEventHandler TypesRowDeleting;
            
            public void AddTypesRow(TypesRow row) {
                this.Rows.Add(row);
            }
            
            public TypesRow AddTypesRow(int FeatureID, string FeatureTypeName, int FeatureTypeID, int ParentFeatureTypeID) {
                TypesRow rowTypesRow = ((TypesRow)(this.NewRow()));
                rowTypesRow.ItemArray = new object[] {
                        FeatureID,
                        FeatureTypeName,
                        FeatureTypeID,
                        ParentFeatureTypeID};
                this.Rows.Add(rowTypesRow);
                return rowTypesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TypesDataTable cln = ((TypesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TypesDataTable();
            }
            
            public void InitVars() {
                this.columnFeatureID = this.Columns["FeatureID"];
                this.columnFeatureTypeName = this.Columns["FeatureTypeName"];
                this.columnFeatureTypeID = this.Columns["FeatureTypeID"];
                this.columnParentFeatureTypeID = this.Columns["ParentFeatureTypeID"];
            }
            
            private void InitClass() {
                this.columnFeatureID = new DataColumn("FeatureID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureID);
                this.columnFeatureTypeName = new DataColumn("FeatureTypeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureTypeName);
                this.columnFeatureTypeID = new DataColumn("FeatureTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFeatureTypeID);
                this.columnParentFeatureTypeID = new DataColumn("ParentFeatureTypeID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParentFeatureTypeID);
            }
            
            public TypesRow NewTypesRow() {
                return ((TypesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TypesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TypesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TypesRowChanged != null)) {
                    this.TypesRowChanged(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TypesRowChanging != null)) {
                    this.TypesRowChanging(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TypesRowDeleted != null)) {
                    this.TypesRowDeleted(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TypesRowDeleting != null)) {
                    this.TypesRowDeleting(this, new TypesRowChangeEvent(((TypesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTypesRow(TypesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypesRow : DataRow {
            
            private TypesDataTable tableTypes;
            
            public TypesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTypes = ((TypesDataTable)(this.Table));
            }
            
            public int FeatureID {
                get {
                    try {
                        return ((int)(this[this.tableTypes.FeatureIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypes.FeatureIDColumn] = value;
                }
            }
            
            public string FeatureTypeName {
                get {
                    try {
                        return ((string)(this[this.tableTypes.FeatureTypeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypes.FeatureTypeNameColumn] = value;
                }
            }
            
            public int FeatureTypeID {
                get {
                    try {
                        return ((int)(this[this.tableTypes.FeatureTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypes.FeatureTypeIDColumn] = value;
                }
            }
            
            public int ParentFeatureTypeID {
                get {
                    try {
                        return ((int)(this[this.tableTypes.ParentFeatureTypeIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTypes.ParentFeatureTypeIDColumn] = value;
                }
            }
            
            public bool IsFeatureIDNull() {
                return this.IsNull(this.tableTypes.FeatureIDColumn);
            }
            
            public void SetFeatureIDNull() {
                this[this.tableTypes.FeatureIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsFeatureTypeNameNull() {
                return this.IsNull(this.tableTypes.FeatureTypeNameColumn);
            }
            
            public void SetFeatureTypeNameNull() {
                this[this.tableTypes.FeatureTypeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFeatureTypeIDNull() {
                return this.IsNull(this.tableTypes.FeatureTypeIDColumn);
            }
            
            public void SetFeatureTypeIDNull() {
                this[this.tableTypes.FeatureTypeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsParentFeatureTypeIDNull() {
                return this.IsNull(this.tableTypes.ParentFeatureTypeIDColumn);
            }
            
            public void SetParentFeatureTypeIDNull() {
                this[this.tableTypes.ParentFeatureTypeIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TypesRowChangeEvent : EventArgs {
            
            private TypesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TypesRowChangeEvent(TypesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TypesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591